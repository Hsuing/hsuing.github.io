import{_ as a,o as t,c as e,R as s}from"./chunks/framework.zUbWieqp.js";const m=JSON.parse('{"title":"1.高可用性技术","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Database/SqlServer/AG/index.md","filePath":"guide/Database/SqlServer/AG/index.md","lastUpdated":1720533756000}'),i={name:"guide/Database/SqlServer/AG/index.md"},r=s('<h3 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h3><ol><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.microsoft.com%2Fzh-cn%2Fsql%2Fdatabase-engine%2Favailability-groups%2Fwindows%2Fconfigure-read-only-routing-for-an-availability-group-sql-server%3Fview%3Dsql-server-2017" target="_blank" rel="noreferrer">https://docs.microsoft.com/zh-cn/sql/database-engine/availability-groups/windows/configure-read-only-routing-for-an-availability-group-sql-server?view=sql-server-2017</a></li><li><a href="https://learn.microsoft.com/zh-cn/sql/database-engine/availability-groups/windows/getting-started-with-always-on-availability-groups-sql-server?view=sql-server-2017" target="_blank" rel="noreferrer">https://learn.microsoft.com/zh-cn/sql/database-engine/availability-groups/windows/getting-started-with-always-on-availability-groups-sql-server?view=sql-server-2017</a></li><li>ALTER AVAILABILITY GROUP (Transact-SQL)： <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.microsoft.com%2Fzh-cn%2Fsql%2Ft-sql%2Fstatements%2Falter-availability-group-transact-sql%3Fview%3Dsql-server-ver15" target="_blank" rel="noreferrer">https://docs.microsoft.com/zh-cn/sql/t-sql/statements/alter-availability-group-transact-sql?view=sql-server-ver15</a></li></ol><h1 id="_1-高可用性技术" tabindex="-1">1.高可用性技术 <a class="header-anchor" href="#_1-高可用性技术" aria-label="Permalink to &quot;1.高可用性技术&quot;">​</a></h1><h2 id="_1-复制replication-快照、事务、合并" tabindex="-1">1. 复制Replication（快照、事务、合并） <a class="header-anchor" href="#_1-复制replication-快照、事务、合并" aria-label="Permalink to &quot;1.  复制Replication（快照、事务、合并）&quot;">​</a></h2><p>应用场景： 　　　　负载均衡、提供副本读，写操作。</p><p>分区将历史数据复制到其它表中。</p><p>授权，将数据提供它人使用。</p><p>数据合并。</p><p>故障转移。</p><p>优点:</p><p>实现简单。</p><p>数据同时同步,几乎达到镜像。</p><p>可以实现对某些表，或表数据过滤进行复制。</p><p>缺点:</p><p>不适合做高可用，因为整个库复制影响性能。</p><p>不支持故障自动切换。</p><p>要求:</p><p>必须有主键的表才能做复制</p><h2 id="_2-日志传送log-shipping-备份-复制-恢复" tabindex="-1">2.日志传送log shipping(备份--&gt;复制--&gt;恢复) <a class="header-anchor" href="#_2-日志传送log-shipping-备份-复制-恢复" aria-label="Permalink to &quot;2.日志传送log shipping(备份--&gt;复制--&gt;恢复)&quot;">​</a></h2><p>应用场景： 　　　　多台主从服务器定时备份同步。</p><p>负载均衡、提供副本只读。 　　优点: 　　　　实现简单。</p><p>要求: 　　　　必须是完整备份模式。</p><p>主服务器、辅助服务器、监视服务器的备份文件夹必须有读写权限。</p><p>sql agent代理必须启动</p><h2 id="_3-镜像" tabindex="-1">3.镜像 <a class="header-anchor" href="#_3-镜像" aria-label="Permalink to &quot;3.镜像&quot;">​</a></h2><p>应用场景：</p><p>​ 要求高服务可用性。</p><p>​ 要求实现自动故障转移。</p><p>​ 确保数据的完整。</p><p>​ 优点：</p><p>​ 根据业务可实现同步和异步镜像。</p><p>​ 快速的故障转移恢复。低硬件成本。</p><p>​ 要求：</p><p>​ 主体服务器。</p><p>​ 镜像服务器。</p><p>​ 见证服务器</p><h2 id="_4-故障转移群集" tabindex="-1">4.故障转移群集 <a class="header-anchor" href="#_4-故障转移群集" aria-label="Permalink to &quot;4.故障转移群集&quot;">​</a></h2><p>应用场景：</p><p>硬件故障转移。</p><p>服务故障转移。</p><p>人工故障或各种其它原因等。</p><p>优点：</p><p>根据业务进行灵活的群集拓扑结构</p><p>快速且自动故障转移</p><p>缺点:</p><p>群集非活跃节点浪费硬件资源</p><p>群集节点间共用的共享存储，仍然存在潜在的单点故障隐患。</p><p>没有负载能力，不是提升性能的技术。</p><p>​ 要求</p><p>​ 基于windows故障转移</p><h2 id="_5-alway-on-优点" tabindex="-1">5.alway on 优点 <a class="header-anchor" href="#_5-alway-on-优点" aria-label="Permalink to &quot;5.alway on 优点&quot;">​</a></h2><p>支持最多5个可用性副本</p><p>支持替代可用性模式（同步，异步）</p><p>支持集中形式的可用性组故障转移：自动故障转移、手动故障转移、强制故障转移</p><p>支持2种辅助功能，只读副本访问/辅助副本执行备份操作</p><p>支持每个可用性组的可用性侦听器</p><p>支持灵活的故障转移策略以便更好地控制可用性故障转移</p><p>支持用于避免页损坏的自动页修复</p><p>支持加密和压缩</p><p>提供了一组集成的工具来简化部署和管理可用性组</p><h3 id="_5-1故障转移灵活设置" tabindex="-1">5.1故障转移灵活设置 <a class="header-anchor" href="#_5-1故障转移灵活设置" aria-label="Permalink to &quot;5.1故障转移灵活设置&quot;">​</a></h3><table><thead><tr><th>副本</th><th>可用性模式和故障转移模式设置</th></tr></thead><tbody><tr><td>A</td><td>同步提交模式（自动故障转移）</td></tr><tr><td>B</td><td>同步提交模式（自动故障转移）</td></tr><tr><td>C</td><td>同步提交模式（仅限计划的手动故障转移）</td></tr><tr><td>D</td><td>异步提交模式（仅限强制故障转移）</td></tr></tbody></table><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406141027164.jpg" alt=""></p><h2 id="_6-选择alway-on原因" tabindex="-1">6.选择alway on原因 <a class="header-anchor" href="#_6-选择alway-on原因" aria-label="Permalink to &quot;6.选择alway on原因&quot;">​</a></h2><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406141027232.jpg" alt=""></p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406141027955.jpg" alt=""></p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406141027946.jpg" alt=""></p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406141027433.jpg" alt=""></p><h2 id="_7-节点" tabindex="-1">7.节点 <a class="header-anchor" href="#_7-节点" aria-label="Permalink to &quot;7.节点&quot;">​</a></h2><h3 id="_7-1两个节点" tabindex="-1">7.1两个节点 <a class="header-anchor" href="#_7-1两个节点" aria-label="Permalink to &quot;7.1两个节点&quot;">​</a></h3><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406141027128.jpg" alt=""></p><h3 id="_7-3三个节点" tabindex="-1">7.3三个节点 <a class="header-anchor" href="#_7-3三个节点" aria-label="Permalink to &quot;7.3三个节点&quot;">​</a></h3><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406141028977.jpg" alt=""></p><h2 id="_8-多网" tabindex="-1">8.多网 <a class="header-anchor" href="#_8-多网" aria-label="Permalink to &quot;8.多网&quot;">​</a></h2><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406141028561.jpg" alt=""></p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406141028651.jpg" alt=""></p><blockquote><p>小结：</p><p>单实例激活alwaysOn是为了以后扩张节点时不造成停机的预留手段</p><p>4个节点、5个节点的情况都属于以上两种基础解决方案</p><p>如果准备多节点情况下，需要明确是否有使用MSSQL的其他服务如：Analysis Service、Intergration Service等，如果有且需要共享这些服务器，则将这部分Feature独立出alwaysOn所在实例，新建其他实例使用MSSQL Cluster同时为这些服务提供Failover能力</p><p>建议不在Hyper-V Host构建Live Migration 的VM中部署AlwaysOn，至少不使用该Host Cluster作为AlwaysOn Cluster，当Host Cluster 发生Failover时，可能导致VM中AlwaysOn漂移</p></blockquote>',77),o=[r];function p(l,n,h,c,d,g){return t(),e("div",null,o)}const _=a(i,[["render",p]]);export{m as __pageData,_ as default};
