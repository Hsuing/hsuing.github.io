import{_ as s,o as a,c as n,R as l}from"./chunks/framework.zUbWieqp.js";const u=JSON.parse('{"title":"1. 数据背景","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/0-管理上千节点.md","filePath":"guide/container/k8s/0-管理上千节点.md","lastUpdated":1729503684000}'),e={name:"guide/container/k8s/0-管理上千节点.md"},p=l(`<h1 id="_1-数据背景" tabindex="-1">1. 数据背景 <a class="header-anchor" href="#_1-数据背景" aria-label="Permalink to &quot;1. 数据背景&quot;">​</a></h1><p>100,000+ Pods</p><p>1300+ Nodes</p><p>3集群（单：11Master + 17ETCD)</p><h1 id="_2-遇到的问题" tabindex="-1">2. 遇到的问题 <a class="header-anchor" href="#_2-遇到的问题" aria-label="Permalink to &quot;2. 遇到的问题&quot;">​</a></h1><ul><li>Apiserver调度，延迟问题；</li><li>Controller 不能及时从 API Server 感知到最新的变化，处理的延时较高；</li><li>Scheduler 延迟高、吞吐低，无法适应业务日常需求；</li><li>ETCD架构设计不合理/ETCD稳定性/ETCD性能无法满足业务；</li><li>发生异常重启时，服务的恢复时间需要几分钟；</li></ul><h1 id="_3-优化之路" tabindex="-1">3. 优化之路 <a class="header-anchor" href="#_3-优化之路" aria-label="Permalink to &quot;3. 优化之路&quot;">​</a></h1><h2 id="_3-1-硬件-网络-存储-架构等" tabindex="-1">3.1 硬件/网络/存储/架构等 <a class="header-anchor" href="#_3-1-硬件-网络-存储-架构等" aria-label="Permalink to &quot;3.1 硬件/网络/存储/架构等&quot;">​</a></h2><p><strong>虚拟机（或物理服务器）层面的优化：</strong></p><ul><li>旧换新：使用较久的服务全部更新为新款服务器，针对类型采购最新不同类型的资源</li><li>调整虚拟机配置：增加虚拟机的内存、CPU 核心数等资源，以满足高并发负载的需求</li><li>使用高性能的虚拟化技术：选择性能较好的虚拟机管理器（如KVM、Xen等），充分利用硬件资源</li><li>宿主资源超卖：比如将一个实际只有 48 核的宿主上报资源给 apiserver 时上报为60 核，以此来对宿主进行资源超卖。</li></ul><p><strong>硬件层面的优化：</strong></p><ul><li>多核处理器：使用多核处理器可以提高系统的处理能力，使其能够更好地应对高并发负载。</li><li>高速缓存：充分利用硬件的高速缓存，减少数据访问的延迟。</li><li>高性能网络接口：采用高性能的网卡和交换机，提供更快的网络传输速度和更低的延迟。</li></ul><p><strong>网络层面的优化：</strong></p><ul><li>负载均衡：采用负载均衡设备或技术，将请求均匀地分布到多台服务器上，提高整体的并发处理能力。</li><li>增加带宽：提高网络带宽可以支持更多的并发连接，并减少网络传输的瓶颈。</li><li>优化网络协议：使用较低延迟和高吞吐量的网络协议，如使用GRPC代替HTTP，QUIC代替TCP等。</li></ul><p><strong>存储层面的优化：</strong></p><ul><li>使用高性能的存储设备：采用 SSD 硬盘或 NVMe 存储设备，提高数据的读写速度和响应时间。</li><li>数据缓存：使用缓存技术（如 Redis、Memcached 等），减少后端存储的访问压力。</li><li>数据库优化：对数据库进行索引优化、查询优化等，提高数据库的读写性能。</li></ul><p><strong>架构层面的优化：</strong></p><ul><li>异步处理：采用异步处理模式，如使用消息队列或事件驱动架构等，将请求的处理过程解耦，提高系统的并发能力。</li><li>分布式架构：使用分布式架构，将负载分散到多个节点上，提高系统的横向扩展性能。</li><li>水平拆分：根据负载情况和业务需求，将系统按照不同的功能或模块进行水平拆分，以提高并发处理能力。</li></ul><h2 id="_3-2-内核层面" tabindex="-1">3.2 内核层面 <a class="header-anchor" href="#_3-2-内核层面" aria-label="Permalink to &quot;3.2 内核层面&quot;">​</a></h2><p>增大内核选项配置 <code>/etc/sysctl.conf </code></p><p>1）一般如果遇到文件句柄达到上限时，会碰到 &quot;Too many open files&quot; 或者Socket/File: Can’t open so many files 等错误：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># max-file 表示系统级别的能够打开的文件句柄的数量，</span></span>
<span class="line"><span style="color:#B392F0;">fs.file-max</span><span style="color:#E1E4E8;">=1000000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># max-file 表示系统级别的能够打开的文件句柄的数量，</span></span>
<span class="line"><span style="color:#6F42C1;">fs.file-max</span><span style="color:#24292E;">=1000000</span></span></code></pre></div><p>2）配置 arp cache 大小，当内核维护的arp表过于庞大时候，可以考虑优化：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 存在于ARP高速缓存中的最少层数，如果少于这个数，垃圾收集器将不会运行。缺省值是128。</span></span>
<span class="line"><span style="color:#B392F0;">net.ipv4.neigh.default.gc_thresh1</span><span style="color:#E1E4E8;">=1024</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 保存在 ARP 高速缓存中的最多的记录软限制。垃圾收集器在开始收集前，允许记录数超过这个数字 5 秒。缺省值是 512。</span></span>
<span class="line"><span style="color:#B392F0;">net.ipv4.neigh.default.gc_thresh2</span><span style="color:#E1E4E8;">=4096</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 保存在 ARP 高速缓存中的最多记录的硬限制，一旦高速缓存中的数目高于此，垃圾收集器将马上运行。缺省值是1024。</span></span>
<span class="line"><span style="color:#B392F0;">net.ipv4.neigh.default.gc_thresh3</span><span style="color:#E1E4E8;">=8192</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 存在于ARP高速缓存中的最少层数，如果少于这个数，垃圾收集器将不会运行。缺省值是128。</span></span>
<span class="line"><span style="color:#6F42C1;">net.ipv4.neigh.default.gc_thresh1</span><span style="color:#24292E;">=1024</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 保存在 ARP 高速缓存中的最多的记录软限制。垃圾收集器在开始收集前，允许记录数超过这个数字 5 秒。缺省值是 512。</span></span>
<span class="line"><span style="color:#6F42C1;">net.ipv4.neigh.default.gc_thresh2</span><span style="color:#24292E;">=4096</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 保存在 ARP 高速缓存中的最多记录的硬限制，一旦高速缓存中的数目高于此，垃圾收集器将马上运行。缺省值是1024。</span></span>
<span class="line"><span style="color:#6F42C1;">net.ipv4.neigh.default.gc_thresh3</span><span style="color:#24292E;">=8192</span></span></code></pre></div><p>3） conntrack 是指针对连接跟踪（Connection Tracking）进行的性能优化措施：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 允许的最大跟踪连接条目，是在内核内存中netfilter可以同时处理的“任务”（连接跟踪条目）</span></span>
<span class="line"><span style="color:#B392F0;">net.netfilter.nf_conntrack_max</span><span style="color:#E1E4E8;">=10485760</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 哈希表大小（只读）（64位系统、8G内存默认 65536，16G翻倍，如此类推）</span></span>
<span class="line"><span style="color:#B392F0;">net.core.netdev_max_backlog</span><span style="color:#E1E4E8;">=10000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</span></span>
<span class="line"><span style="color:#B392F0;">net.netfilter.nf_conntrack_tcp_timeout_established</span><span style="color:#E1E4E8;">=300</span></span>
<span class="line"><span style="color:#B392F0;">net.netfilter.nf_conntrack_buckets</span><span style="color:#E1E4E8;">=655360</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 允许的最大跟踪连接条目，是在内核内存中netfilter可以同时处理的“任务”（连接跟踪条目）</span></span>
<span class="line"><span style="color:#6F42C1;">net.netfilter.nf_conntrack_max</span><span style="color:#24292E;">=10485760</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 哈希表大小（只读）（64位系统、8G内存默认 65536，16G翻倍，如此类推）</span></span>
<span class="line"><span style="color:#6F42C1;">net.core.netdev_max_backlog</span><span style="color:#24292E;">=10000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</span></span>
<span class="line"><span style="color:#6F42C1;">net.netfilter.nf_conntrack_tcp_timeout_established</span><span style="color:#24292E;">=300</span></span>
<span class="line"><span style="color:#6F42C1;">net.netfilter.nf_conntrack_buckets</span><span style="color:#24292E;">=655360</span></span></code></pre></div><p>4）监听文件系统上的事件（如文件创建、修改、删除等），并在事件发生时通知相应的应用程序：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 默认值: 128 指定了每一个real user ID可创建的inotify instatnces的数量上限</span></span>
<span class="line"><span style="color:#B392F0;">fs.inotify.max_user_instances</span><span style="color:#E1E4E8;">=524288</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 默认值: 8192 指定了每个inotify instance相关联的watches的上限</span></span>
<span class="line"><span style="color:#B392F0;">fs.inotify.max_user_watches</span><span style="color:#E1E4E8;">=524288</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 默认值: 128 指定了每一个real user ID可创建的inotify instatnces的数量上限</span></span>
<span class="line"><span style="color:#6F42C1;">fs.inotify.max_user_instances</span><span style="color:#24292E;">=524288</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 默认值: 8192 指定了每个inotify instance相关联的watches的上限</span></span>
<span class="line"><span style="color:#6F42C1;">fs.inotify.max_user_watches</span><span style="color:#24292E;">=524288</span></span></code></pre></div><p>5)完整配置</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># Kubernetes Settings</span></span>
<span class="line"><span style="color:#B392F0;">vm.max_map_count</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">262144</span></span>
<span class="line"><span style="color:#B392F0;">kernel.softlockup_panic</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#B392F0;">kernel.softlockup_all_cpu_backtrace</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#B392F0;">net.ipv4.ip_local_reserved_ports</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30000</span><span style="color:#9ECBFF;">-32767</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Increase the number of connections</span></span>
<span class="line"><span style="color:#B392F0;">net.core.somaxconn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">32768</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Maximum Socket Receive Buffer</span></span>
<span class="line"><span style="color:#B392F0;">net.core.rmem_max</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16777216</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Maximum Socket Send Buffer</span></span>
<span class="line"><span style="color:#B392F0;">net.core.wmem_max</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16777216</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Increase the maximum total buffer-space allocatable</span></span>
<span class="line"><span style="color:#B392F0;">net.ipv4.tcp_wmem</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4096</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">87380</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16777216</span></span>
<span class="line"><span style="color:#B392F0;">net.ipv4.tcp_rmem</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4096</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">87380</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16777216</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Increase the number of outstanding syn requests allowed</span></span>
<span class="line"><span style="color:#B392F0;">net.ipv4.tcp_max_syn_backlog</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8096</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># For persistent HTTP connections</span></span>
<span class="line"><span style="color:#B392F0;">net.ipv4.tcp_slow_start_after_idle</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Allow to reuse TIME_WAIT sockets for new connections</span></span>
<span class="line"><span style="color:#6A737D;"># when it is safe from protocol viewpoint</span></span>
<span class="line"><span style="color:#B392F0;">net.ipv4.tcp_tw_reuse</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Max number of packets that can be queued on interface input</span></span>
<span class="line"><span style="color:#6A737D;"># If kernel is receiving packets faster than can be processed</span></span>
<span class="line"><span style="color:#6A737D;"># this queue increases</span></span>
<span class="line"><span style="color:#B392F0;">net.core.netdev_max_backlog</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16384</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Increase size of file handles and inode cache</span></span>
<span class="line"><span style="color:#B392F0;">fs.file-max</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2097152</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Max number of inotify instances and watches for a user</span></span>
<span class="line"><span style="color:#6A737D;"># Since dockerd runs as a single user, the default instances value of 128 per user is too low</span></span>
<span class="line"><span style="color:#6A737D;"># e.g. uses of inotify: nginx ingress controller, kubectl logs -f</span></span>
<span class="line"><span style="color:#B392F0;">fs.inotify.max_user_instances</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8192</span></span>
<span class="line"><span style="color:#B392F0;">fs.inotify.max_user_watches</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">524288</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Additional sysctl flags that kubelet expects</span></span>
<span class="line"><span style="color:#B392F0;">vm.overcommit_memory</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#B392F0;">kernel.panic</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#B392F0;">kernel.panic_on_oops</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Prevent docker from changing iptables: https://github.com/kubernetes/kubernetes/issues/40182</span></span>
<span class="line"><span style="color:#B392F0;">net.ipv4.ip_forward</span><span style="color:#E1E4E8;">=1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># Kubernetes Settings</span></span>
<span class="line"><span style="color:#6F42C1;">vm.max_map_count</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">262144</span></span>
<span class="line"><span style="color:#6F42C1;">kernel.softlockup_panic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6F42C1;">kernel.softlockup_all_cpu_backtrace</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6F42C1;">net.ipv4.ip_local_reserved_ports</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30000</span><span style="color:#032F62;">-32767</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Increase the number of connections</span></span>
<span class="line"><span style="color:#6F42C1;">net.core.somaxconn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">32768</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Maximum Socket Receive Buffer</span></span>
<span class="line"><span style="color:#6F42C1;">net.core.rmem_max</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16777216</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Maximum Socket Send Buffer</span></span>
<span class="line"><span style="color:#6F42C1;">net.core.wmem_max</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16777216</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Increase the maximum total buffer-space allocatable</span></span>
<span class="line"><span style="color:#6F42C1;">net.ipv4.tcp_wmem</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4096</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">87380</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16777216</span></span>
<span class="line"><span style="color:#6F42C1;">net.ipv4.tcp_rmem</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4096</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">87380</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16777216</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Increase the number of outstanding syn requests allowed</span></span>
<span class="line"><span style="color:#6F42C1;">net.ipv4.tcp_max_syn_backlog</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8096</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># For persistent HTTP connections</span></span>
<span class="line"><span style="color:#6F42C1;">net.ipv4.tcp_slow_start_after_idle</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Allow to reuse TIME_WAIT sockets for new connections</span></span>
<span class="line"><span style="color:#6A737D;"># when it is safe from protocol viewpoint</span></span>
<span class="line"><span style="color:#6F42C1;">net.ipv4.tcp_tw_reuse</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Max number of packets that can be queued on interface input</span></span>
<span class="line"><span style="color:#6A737D;"># If kernel is receiving packets faster than can be processed</span></span>
<span class="line"><span style="color:#6A737D;"># this queue increases</span></span>
<span class="line"><span style="color:#6F42C1;">net.core.netdev_max_backlog</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16384</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Increase size of file handles and inode cache</span></span>
<span class="line"><span style="color:#6F42C1;">fs.file-max</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2097152</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Max number of inotify instances and watches for a user</span></span>
<span class="line"><span style="color:#6A737D;"># Since dockerd runs as a single user, the default instances value of 128 per user is too low</span></span>
<span class="line"><span style="color:#6A737D;"># e.g. uses of inotify: nginx ingress controller, kubectl logs -f</span></span>
<span class="line"><span style="color:#6F42C1;">fs.inotify.max_user_instances</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8192</span></span>
<span class="line"><span style="color:#6F42C1;">fs.inotify.max_user_watches</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">524288</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Additional sysctl flags that kubelet expects</span></span>
<span class="line"><span style="color:#6F42C1;">vm.overcommit_memory</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6F42C1;">kernel.panic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#6F42C1;">kernel.panic_on_oops</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Prevent docker from changing iptables: https://github.com/kubernetes/kubernetes/issues/40182</span></span>
<span class="line"><span style="color:#6F42C1;">net.ipv4.ip_forward</span><span style="color:#24292E;">=1</span></span></code></pre></div><p>如果是aws,需要多开启两个参数</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># AWS settings</span></span>
<span class="line"><span style="color:#6A737D;"># Issue #23395</span></span>
<span class="line"><span style="color:#B392F0;">net.ipv4.neigh.default.gc_thresh1</span><span style="color:#E1E4E8;">=0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Enable IPv6 forwarding for network plugins that don&#39;t do it themselves</span></span>
<span class="line"><span style="color:#B392F0;">net.ipv6.conf.all.forwarding</span><span style="color:#E1E4E8;">=1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># AWS settings</span></span>
<span class="line"><span style="color:#6A737D;"># Issue #23395</span></span>
<span class="line"><span style="color:#6F42C1;">net.ipv4.neigh.default.gc_thresh1</span><span style="color:#24292E;">=0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Enable IPv6 forwarding for network plugins that don&#39;t do it themselves</span></span>
<span class="line"><span style="color:#6F42C1;">net.ipv6.conf.all.forwarding</span><span style="color:#24292E;">=1</span></span></code></pre></div><h2 id="参数解释" tabindex="-1">参数解释 <a class="header-anchor" href="#参数解释" aria-label="Permalink to &quot;参数解释&quot;">​</a></h2><table><thead><tr><th>分类</th><th>内核参数</th><th>说明</th><th>参考链接</th></tr></thead><tbody><tr><td>Kubernetes</td><td><code>vm.max_map_count = 262144</code></td><td>限制一个进程可以拥有的 VMA(虚拟内存区域)的数量， 一个更大的值对于 elasticsearch、mongo 或其他 mmap 用户来说非常有用</td><td><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.1/setup-configuration.html#vm-max-map-count" target="_blank" rel="noreferrer">ES Configuration</a></td></tr><tr><td>Kubernetes</td><td><code>kernel.softlockup_panic = 1</code></td><td>用于解决 K8S 内核软锁相关 bug</td><td><a href="https://github.com/kubernetes/kubernetes/issues/37853" target="_blank" rel="noreferrer">root cause kernel soft lockups · Issue #37853 · kubernetes/kubernetes (github.com)</a></td></tr><tr><td>Kubernetes</td><td><code>kernel.softlockup_all_cpu_backtrace = 1</code></td><td>用于解决 K8S 内核软锁相关 bug</td><td><a href="https://github.com/kubernetes/kubernetes/issues/37853" target="_blank" rel="noreferrer">root cause kernel soft lockups · Issue #37853 · kubernetes/kubernetes (github.com)</a></td></tr><tr><td>Kubernetes</td><td><code>net.ipv4.ip_local_reserved_ports = 30000-32767</code></td><td>默认 K8S Nodport 端口</td><td><a href="https://github.com/kubernetes/kops/issues/6342" target="_blank" rel="noreferrer">service-node-port-range and ip_local_port_range collision · Issue #6342 · kubernetes/kops (github.com)</a></td></tr><tr><td>网络</td><td><code>net.core.somaxconn = 32768</code></td><td>表示 socket 监听（listen）的 backlog 上限。什么是 backlog？backlog 就是 socket 的监听队列，当一个请求（request）尚未被处理或建立时，他会进入 backlog。 增加连接数.</td><td><a href="https://github.com/kubernetes-retired/kube-deploy/issues/261" target="_blank" rel="noreferrer">Image: We should tweak our sysctls · Issue #261 · kubernetes-retired/kube-deploy (github.com)</a></td></tr><tr><td>网络</td><td><code>net.core.rmem_max = 16777216</code></td><td>接收套接字缓冲区大小的最大值 (以字节为单位)。 最大化 Socket Receive Buffer</td><td><a href="https://github.com/kubernetes-retired/kube-deploy/issues/261" target="_blank" rel="noreferrer">Image: We should tweak our sysctls · Issue #261 · kubernetes-retired/kube-deploy (github.com)</a></td></tr><tr><td>网络</td><td><code>net.core.wmem_max = 16777216</code></td><td>发送套接字缓冲区大小的最大值 (以字节为单位)。 最大化 Socket Send Buffer</td><td><a href="https://github.com/kubernetes-retired/kube-deploy/issues/261" target="_blank" rel="noreferrer">Image: We should tweak our sysctls · Issue #261 · kubernetes-retired/kube-deploy (github.com)</a></td></tr><tr><td>网络</td><td>net.ipv4.tcp_wmem = 4096 87380 16777216 net.ipv4.tcp_rmem = 4096 87380 16777216</td><td>增加总的可分配的 buffer 空间的最大值</td><td><a href="https://github.com/kubernetes-retired/kube-deploy/issues/261" target="_blank" rel="noreferrer">Image: We should tweak our sysctls · Issue #261 · kubernetes-retired/kube-deploy (github.com)</a></td></tr><tr><td>网络</td><td><code>net.ipv4.tcp_max_syn_backlog = 8096</code></td><td>表示那些尚未收到客户端确认信息的连接（SYN 消息）队列的长度，默认为 1024 增加未完成的 syn 请求的数量</td><td><a href="https://github.com/kubernetes-retired/kube-deploy/issues/261" target="_blank" rel="noreferrer">Image: We should tweak our sysctls · Issue #261 · kubernetes-retired/kube-deploy (github.com)</a></td></tr><tr><td>网络</td><td><code>net.ipv4.tcp_slow_start_after_idle = 0</code></td><td>持久化 HTTP 连接</td><td><a href="https://github.com/kubernetes-retired/kube-deploy/issues/261" target="_blank" rel="noreferrer">Image: We should tweak our sysctls · Issue #261 · kubernetes-retired/kube-deploy (github.com)</a></td></tr><tr><td>网络</td><td><code>net.ipv4.tcp_tw_reuse = 1</code></td><td>表示允许重用 TIME_WAIT 状态的套接字用于新的 TCP 连接, 默认为 0，表示关闭。 允许在协议安全的情况下重用 TIME_WAIT 套接字用于新的连接</td><td><a href="https://github.com/kubernetes-retired/kube-deploy/issues/261" target="_blank" rel="noreferrer">Image: We should tweak our sysctls · Issue #261 · kubernetes-retired/kube-deploy (github.com)</a></td></tr><tr><td>网络</td><td><code>net.core.netdev_max_backlog = 16384</code></td><td>当网卡接收数据包的速度大于内核处理的速度时，会有一个队列保存这些数据包。这个参数表示该队列的最大值 如果内核接收数据包的速度超过了可以处理的速度，这个队列就会增加</td><td><a href="https://github.com/kubernetes-retired/kube-deploy/issues/261" target="_blank" rel="noreferrer">Image: We should tweak our sysctls · Issue #261 · kubernetes-retired/kube-deploy (github.com)</a></td></tr><tr><td>文件系统</td><td><code>fs.file-max = 2097152</code></td><td>该参数决定了系统中所允许的文件句柄最大数目，文件句柄设置代表 linux 系统中可以打开的文件的数量。 增加文件句柄和 inode 缓存的大小</td><td><a href="https://github.com/kubernetes-retired/kube-deploy/issues/261" target="_blank" rel="noreferrer">Image: We should tweak our sysctls · Issue #261 · kubernetes-retired/kube-deploy (github.com)</a></td></tr><tr><td>文件系统</td><td>fs.inotify.max_user_instances = 8192 fs.inotify.max_user_watches = 524288</td><td>一个用户的 inotify 实例和 watch 的最大数量 由于 dockerd 作为单个用户运行，每个用户的默认实例值 128 太低了 例如使用 inotify: nginx ingress controller, kubectl logs -f</td><td><a href="https://github.com/kubernetes-retired/kube-deploy/issues/261" target="_blank" rel="noreferrer">Image: We should tweak our sysctls · Issue #261 · kubernetes-retired/kube-deploy (github.com)</a></td></tr><tr><td>kubelet</td><td><code>vm.overcommit_memory = 1</code></td><td>对内存分配的一种策略 =1， 表示内核允许分配所有的物理内存，而不管当前的内存状态如何</td><td><a href="https://github.com/kubernetes-retired/kube-deploy/issues/261" target="_blank" rel="noreferrer">Image: We should tweak our sysctls · Issue #261 · kubernetes-retired/kube-deploy (github.com)</a></td></tr><tr><td>kubelet</td><td><code>kernel.panic = 10</code></td><td>panic 错误中自动重启，等待时间为 10 秒</td><td><a href="https://github.com/kubernetes-retired/kube-deploy/issues/261" target="_blank" rel="noreferrer">Image: We should tweak our sysctls · Issue #261 · kubernetes-retired/kube-deploy (github.com)</a></td></tr><tr><td>kubelet</td><td><code>kernel.panic_on_oops = 1</code></td><td>在 Oops 发生时会进行 panic()操作</td><td><a href="https://github.com/kubernetes-retired/kube-deploy/issues/261" target="_blank" rel="noreferrer">Image: We should tweak our sysctls · Issue #261 · kubernetes-retired/kube-deploy (github.com)</a></td></tr><tr><td>网络</td><td><code>net.ipv4.ip_forward=1</code></td><td>启用 ip 转发 另外也防止 docker 改变 iptables</td><td><a href="https://github.com/kubernetes/kubernetes/issues/40182" target="_blank" rel="noreferrer">Upgrading docker 1.13 on nodes causes outbound container traffic to stop working · Issue #40182 · kubernetes/kubernetes (github.com)</a></td></tr><tr><td>网络</td><td><code>net.ipv4.neigh.default.gc_thresh1=0</code></td><td>修复 AWS <code>arp_cache: neighbor table overflow!</code> 报错</td><td><a href="https://github.com/kubernetes/kops/issues/4533" target="_blank" rel="noreferrer">arp_cache: neighbor table overflow! · Issue #4533 · kubernetes/kops (github.com)</a></td></tr></tbody></table><h2 id="_3-3-etcd性能优化" tabindex="-1">3.3 Etcd性能优化 <a class="header-anchor" href="#_3-3-etcd性能优化" aria-label="Permalink to &quot;3.3 Etcd性能优化&quot;">​</a></h2><p>架构层面:</p><p>1、搭建高可用的etcd集群, 集群规模增大时可以自动增加etcd节点；</p><p>硬件层面：</p><p>1、etcd 采用本地 ssd 盘作为后端存储存储；</p><p>2、etcd 独立部署在非 k8s node 上；</p><p>3、etcd 快照(snap)与预写式日志(wal)分盘存储；</p><p>1）Etcd对磁盘写入延迟非常敏感，因此对于负载较重的集群，etcd一定要使用 Local SSD 或者高性能云盘。可以使用fio测量磁盘实际顺序 IOPS。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fio</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-filename=/dev/sda1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-direct=1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-iodepth</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-thread</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rw=write</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-ioengine=psync</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-bs=4k</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-size=60G</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-numjobs=64</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-runtime=10</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-group_reporting</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-name=file</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fio</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-filename=/dev/sda1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-direct=1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-iodepth</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-thread</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rw=write</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-ioengine=psync</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-bs=4k</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-size=60G</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-numjobs=64</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-runtime=10</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-group_reporting</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-name=file</span></span></code></pre></div><p>2）由于etcd必须将数据持久保存到磁盘日志文件中，因此来自其他进程的磁盘活动可能会导致增加写入时间，结果导致etcd请求超时和临时leader丢失。</p><p>因此可以给etcd进程更高的磁盘优先级，使etcd服务可以稳定地与这些进程一起运行。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ionice</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">pgrep</span><span style="color:#9ECBFF;"> etcd)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ionice</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">pgrep</span><span style="color:#032F62;"> etcd)</span></span></code></pre></div><p>3）默认etcd空间配额大小为 2G，超过 2G 将不再写入数据。通过给etcd配置 --quota-backend-bytes 参数增大空间配额，最大支持 8G。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">--quota-backend-bytes</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8589934592</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">--quota-backend-bytes</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8589934592</span></span></code></pre></div><p>4）如果 etcd leader 处理大量并发客户端请求，可能由于网络拥塞而延迟处理follower对等请求。在follower 节点上可能会产生如下的发送缓冲区错误的消息：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">dropped</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">MsgProp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">247</span><span style="color:#9ECBFF;">ae21ff9436b2d</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">since</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">streamMsg&#39;s sending buffer is full</span></span>
<span class="line"><span style="color:#9ECBFF;">dropped MsgAppResp to 247ae21ff9436b2d since streamMsg&#39;s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sending</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">buffer</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">full</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">dropped</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MsgProp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">247</span><span style="color:#032F62;">ae21ff9436b2d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">since</span><span style="color:#24292E;"> </span><span style="color:#032F62;">streamMsg&#39;s sending buffer is full</span></span>
<span class="line"><span style="color:#032F62;">dropped MsgAppResp to 247ae21ff9436b2d since streamMsg&#39;s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sending</span><span style="color:#24292E;"> </span><span style="color:#032F62;">buffer</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">full</span></span></code></pre></div><p>可以通过提高etcd对于对等网络流量优先级来解决这些错误。在 Linux 上，可以使用 tc对对等流量进行优先级排序：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">qdisc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eth0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">handle</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">prio</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bands</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#B392F0;">tc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">filter</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eth0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">parent</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">prio</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">u32</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">match</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ip</span></span>
<span class="line"><span style="color:#B392F0;">sport</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2380</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xffff</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">flowid</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">:1</span></span>
<span class="line"><span style="color:#B392F0;">tc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">filter</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eth0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">parent</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">prio</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">u32</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">match</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ip</span></span>
<span class="line"><span style="color:#B392F0;">dport</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2380</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xffff</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">flowid</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">:1</span></span>
<span class="line"><span style="color:#B392F0;">tc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">filter</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eth0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">parent</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">prio</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">u32</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">match</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ip</span></span>
<span class="line"><span style="color:#B392F0;">sport</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2379</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xffff</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">flowid</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">:1</span></span>
<span class="line"><span style="color:#B392F0;">tc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">filter</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eth0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">parent</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">prio</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">u32</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">match</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ip</span></span>
<span class="line"><span style="color:#B392F0;">dport</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2379</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xffff</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">flowid</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">:1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">qdisc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eth0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">root</span><span style="color:#24292E;"> </span><span style="color:#032F62;">handle</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">prio</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bands</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#6F42C1;">tc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">filter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eth0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">parent</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">protocol</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">prio</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">u32</span><span style="color:#24292E;"> </span><span style="color:#032F62;">match</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ip</span></span>
<span class="line"><span style="color:#6F42C1;">sport</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2380</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xffff</span><span style="color:#24292E;"> </span><span style="color:#032F62;">flowid</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">:1</span></span>
<span class="line"><span style="color:#6F42C1;">tc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">filter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eth0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">parent</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">protocol</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">prio</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">u32</span><span style="color:#24292E;"> </span><span style="color:#032F62;">match</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ip</span></span>
<span class="line"><span style="color:#6F42C1;">dport</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2380</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xffff</span><span style="color:#24292E;"> </span><span style="color:#032F62;">flowid</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">:1</span></span>
<span class="line"><span style="color:#6F42C1;">tc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">filter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eth0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">parent</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">protocol</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">prio</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">u32</span><span style="color:#24292E;"> </span><span style="color:#032F62;">match</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ip</span></span>
<span class="line"><span style="color:#6F42C1;">sport</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2379</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xffff</span><span style="color:#24292E;"> </span><span style="color:#032F62;">flowid</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">:1</span></span>
<span class="line"><span style="color:#6F42C1;">tc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">filter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eth0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">parent</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">protocol</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">prio</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">u32</span><span style="color:#24292E;"> </span><span style="color:#032F62;">match</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ip</span></span>
<span class="line"><span style="color:#6F42C1;">dport</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2379</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xffff</span><span style="color:#24292E;"> </span><span style="color:#032F62;">flowid</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">:1</span></span></code></pre></div><p>5）为了在大规模集群下提高性能，可以将events存储在单独的 ETCD 实例中，可以配置kube-apiserver参数：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">##添加 etcd 配置</span></span>
<span class="line"><span style="color:#B392F0;">vim</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/manifests/kube-apiserver.yaml</span></span>
<span class="line"><span style="color:#6A737D;">##新增如下，第一行代表着当前的主ETCD，第二块代表着 Event 事件拆分到的 Etcd 集群</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">--etcd-servers</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://etcd1:2379,http://etcd2:2379,http://etcd3:2379&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">--etcd-servers-overrides</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/events#http://etcd4:2379,http://etcd5:2379,http://etcd6:2379&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">##添加 etcd 配置</span></span>
<span class="line"><span style="color:#6F42C1;">vim</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/manifests/kube-apiserver.yaml</span></span>
<span class="line"><span style="color:#6A737D;">##新增如下，第一行代表着当前的主ETCD，第二块代表着 Event 事件拆分到的 Etcd 集群</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">--etcd-servers</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://etcd1:2379,http://etcd2:2379,http://etcd3:2379&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">--etcd-servers-overrides</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/events#http://etcd4:2379,http://etcd5:2379,http://etcd6:2379&quot;</span></span></code></pre></div><p>6）目前的解决方案是使用 etcd operator 来搭建 etcd 集群，它是一个感知应用状态的控制器，通过扩展Kubernetes API来自动创建、管理和配置应用实例。</p><p>etcd operator 有如下特性：</p><ul><li>ceate/destroy：自动部署和删除 etcd 集群，不需要人额外干预配置。</li><li>resize：可以动态实现 etcd 集群的扩缩容。</li><li>backup：支持etcd集群的数据备份和集群恢复重建</li><li>upgrade：可以实现在升级etcd集群时不中断服务。</li></ul><h1 id="_4-apiserver优化" tabindex="-1">4. apiserver优化 <a class="header-anchor" href="#_4-apiserver优化" aria-label="Permalink to &quot;4. apiserver优化&quot;">​</a></h1><p><a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-apiserver/" target="_blank" rel="noreferrer">apiserver</a></p><h2 id="_4-1-参数调整" tabindex="-1">4.1 参数调整 <a class="header-anchor" href="#_4-1-参数调整" aria-label="Permalink to &quot;4.1 参数调整&quot;">​</a></h2><p>kube-apiserve</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">--max-mutating-requests-inflight</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">The</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">maximum</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mutating</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">requests</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">flight</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">given</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">time.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">When</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exceeds</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">this,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rejects</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">requests.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Zero</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">no</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">limit.</span><span style="color:#E1E4E8;"> (default </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">--max-requests-inflight</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">The</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">maximum</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ofnon-mutating</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">requests</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">flight</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">given</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">time.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">When</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exceeds</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">this,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rejects</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">requests.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Zero</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">no</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">limit.</span><span style="color:#E1E4E8;"> (default </span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">--max-mutating-requests-inflight</span><span style="color:#24292E;"> </span><span style="color:#032F62;">int</span><span style="color:#24292E;"> </span><span style="color:#032F62;">The</span><span style="color:#24292E;"> </span><span style="color:#032F62;">maximum</span><span style="color:#24292E;"> </span><span style="color:#032F62;">number</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mutating</span><span style="color:#24292E;"> </span><span style="color:#032F62;">requests</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">flight</span><span style="color:#24292E;"> </span><span style="color:#032F62;">at</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">given</span><span style="color:#24292E;"> </span><span style="color:#032F62;">time.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">When</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exceeds</span><span style="color:#24292E;"> </span><span style="color:#032F62;">this,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rejects</span><span style="color:#24292E;"> </span><span style="color:#032F62;">requests.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Zero</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no</span><span style="color:#24292E;"> </span><span style="color:#032F62;">limit.</span><span style="color:#24292E;"> (default </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">--max-requests-inflight</span><span style="color:#24292E;"> </span><span style="color:#032F62;">int</span><span style="color:#24292E;"> </span><span style="color:#032F62;">The</span><span style="color:#24292E;"> </span><span style="color:#032F62;">maximum</span><span style="color:#24292E;"> </span><span style="color:#032F62;">number</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ofnon-mutating</span><span style="color:#24292E;"> </span><span style="color:#032F62;">requests</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">flight</span><span style="color:#24292E;"> </span><span style="color:#032F62;">at</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">given</span><span style="color:#24292E;"> </span><span style="color:#032F62;">time.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">When</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exceeds</span><span style="color:#24292E;"> </span><span style="color:#032F62;">this,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rejects</span><span style="color:#24292E;"> </span><span style="color:#032F62;">requests.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Zero</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no</span><span style="color:#24292E;"> </span><span style="color:#032F62;">limit.</span><span style="color:#24292E;"> (default </span><span style="color:#005CC5;">400</span><span style="color:#24292E;">)</span></span></code></pre></div><p>节点数量在 1000 - 3000 之间时，推荐：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">--max-requests-inflight</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1500</span></span>
<span class="line"><span style="color:#E1E4E8;">--max-mutating-requests-inflight</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">500</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">--max-requests-inflight</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1500</span></span>
<span class="line"><span style="color:#24292E;">--max-mutating-requests-inflight</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">500</span></span></code></pre></div><p>节点数量大于 3000 时，推荐：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">--max-requests-inflight</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3000</span></span>
<span class="line"><span style="color:#E1E4E8;">--max-mutating-requests-inflight</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">--max-requests-inflight</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3000</span></span>
<span class="line"><span style="color:#24292E;">--max-mutating-requests-inflight</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1000</span></span></code></pre></div><p>当集群中 node 以及 pod 数量非常多时可以稍微调大：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">--watch-cache-sizes：调大</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">resources</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">的</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">watch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">size，默认为</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#9ECBFF;">，</span></span>
<span class="line"><span style="color:#B392F0;">如：</span></span>
<span class="line"><span style="color:#E1E4E8;">--watch-cache-sizes</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">node#1000,</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pod#5000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">--watch-cache-sizes：调大</span><span style="color:#24292E;"> </span><span style="color:#032F62;">resources</span><span style="color:#24292E;"> </span><span style="color:#032F62;">的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">watch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">size，默认为</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#032F62;">，</span></span>
<span class="line"><span style="color:#6F42C1;">如：</span></span>
<span class="line"><span style="color:#24292E;">--watch-cache-sizes</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">node#1000,</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pod#5000</span></span></code></pre></div><p>配置kube-apiserver的内存</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">使用--target-ram-mb配置kube-apiserver的内存，按以下公式得到一个合理的值：</span></span>
<span class="line"><span style="color:#e1e4e8;">--target-ram-mb=node_nums * 60</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">使用--target-ram-mb配置kube-apiserver的内存，按以下公式得到一个合理的值：</span></span>
<span class="line"><span style="color:#24292e;">--target-ram-mb=node_nums * 60</span></span></code></pre></div><h2 id="_4-2-apiserver负载均衡" tabindex="-1">4.2 apiserver负载均衡 <a class="header-anchor" href="#_4-2-apiserver负载均衡" aria-label="Permalink to &quot;4.2 apiserver负载均衡&quot;">​</a></h2><p>方式一：启动多个 kube-apiserver 实例通过外部 LB 做负载均衡。</p><p>方式二：设置 --apiserver-count 和 --endpoint-reconciler-type ，让多个kube-apiserver 实例加入到 Kubernetes Service 的 endpoints 中，从而实现高可用。</p><h2 id="_4-3-使用pprof进行性能分析" tabindex="-1">4.3 使用pprof进行性能分析 <a class="header-anchor" href="#_4-3-使用pprof进行性能分析" aria-label="Permalink to &quot;4.3 使用pprof进行性能分析&quot;">​</a></h2><p>pprof 是 golang 的一大杀器，要想进行源码级别的性能分析，必须使用 pprof</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">安装相关包</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">brew</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">graphviz</span></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">启动</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pprof</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tool</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pprof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http://localhost:8001/debug/pprof/profile</span></span>
<span class="line"><span style="color:#B392F0;">File:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kube-apiserver</span></span>
<span class="line"><span style="color:#B392F0;">Type:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpu</span></span>
<span class="line"><span style="color:#B392F0;">Time:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Oct</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">11</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2019</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">11</span><span style="color:#9ECBFF;">:39am</span><span style="color:#E1E4E8;"> (CST)</span></span>
<span class="line"><span style="color:#B392F0;">Duration:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span><span style="color:#9ECBFF;">s,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Total</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">samples</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">620</span><span style="color:#9ECBFF;">ms</span><span style="color:#E1E4E8;"> ( </span><span style="color:#79B8FF;">2.07</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">Entering</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">interactive</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mode</span><span style="color:#E1E4E8;"> (type </span><span style="color:#9ECBFF;">&quot;help&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commands,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;o&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span></span>
<span class="line"><span style="color:#B392F0;">options</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">pprof</span><span style="color:#E1E4E8;">) web // 使用 web 命令生成 svg 文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">安装相关包</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">brew</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">graphviz</span></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">启动</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pprof</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tool</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pprof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http://localhost:8001/debug/pprof/profile</span></span>
<span class="line"><span style="color:#6F42C1;">File:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kube-apiserver</span></span>
<span class="line"><span style="color:#6F42C1;">Type:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cpu</span></span>
<span class="line"><span style="color:#6F42C1;">Time:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Oct</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">11</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2019</span><span style="color:#24292E;"> </span><span style="color:#032F62;">at</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">11</span><span style="color:#032F62;">:39am</span><span style="color:#24292E;"> (CST)</span></span>
<span class="line"><span style="color:#6F42C1;">Duration:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span><span style="color:#032F62;">s,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Total</span><span style="color:#24292E;"> </span><span style="color:#032F62;">samples</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">620</span><span style="color:#032F62;">ms</span><span style="color:#24292E;"> ( </span><span style="color:#005CC5;">2.07</span><span style="color:#032F62;">%</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">Entering</span><span style="color:#24292E;"> </span><span style="color:#032F62;">interactive</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mode</span><span style="color:#24292E;"> (type </span><span style="color:#032F62;">&quot;help&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commands,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;o&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span></span>
<span class="line"><span style="color:#6F42C1;">options</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">pprof</span><span style="color:#24292E;">) web // 使用 web 命令生成 svg 文件</span></span></code></pre></div><p>可以通过 graph 以及交互式界面得到 cpu 耗时、goroutine 阻塞等信息，apiserver 中的对象比较多，序列化会消耗非常大的时间。</p><h1 id="_5-kube-controller-manager优化" tabindex="-1">5. kube-controller-manager优化 <a class="header-anchor" href="#_5-kube-controller-manager优化" aria-label="Permalink to &quot;5. kube-controller-manager优化&quot;">​</a></h1><p><a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-controller-manager/" target="_blank" rel="noreferrer">kube-controller-manager</a></p><h2 id="_5-1-参数优化" tabindex="-1">5.1 参数优化 <a class="header-anchor" href="#_5-1-参数优化" aria-label="Permalink to &quot;5.1 参数优化&quot;">​</a></h2><ul><li><p>调大 --kube-api-qps 值：与 apiServer 的每秒请求数量限制可以调整至 100，默认值为 20；</p></li><li><p>调大 --kube-api-burst 值：可以调整至 100，默认值为 30；</p></li><li><p>禁用不需要的 controller：默认启动为 --controllers ，即启动所有 controller，可以禁用不需要的 controller；</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># - --controllers=*,deployment.*</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">--kube-api-qps=100</span></span>
<span class="line"><span style="color:#e1e4e8;">--kube-api-burst=150</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># - --controllers=*,deployment.*</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">--kube-api-qps=100</span></span>
<span class="line"><span style="color:#24292e;">--kube-api-burst=150</span></span></code></pre></div><h2 id="_5-2-kube-controller-manager-升级过程-informer-预加载" tabindex="-1">5.2 kube-controller-manager 升级过程 informer 预加载 <a class="header-anchor" href="#_5-2-kube-controller-manager-升级过程-informer-预加载" aria-label="Permalink to &quot;5.2 kube-controller-manager 升级过程 informer 预加载&quot;">​</a></h2><p>尽量的减小 controller-manager 单次升级对系统的中断时间，主要有以下两处改造：</p><ul><li>预启动 controller informer ，提前加载 controller 需要的数据；</li><li>主 controller 升级时，会主动释放 Leader Lease ，触发备立即接管工作；</li></ul><h2 id="_5-3-通过-leader-election-实现高可用" tabindex="-1">5.3 通过 leader election 实现高可用 <a class="header-anchor" href="#_5-3-通过-leader-election-实现高可用" aria-label="Permalink to &quot;5.3 通过 leader election 实现高可用&quot;">​</a></h2><p>kube-controller-manager可以通过 leader election 实现高可用，添加以下命令行参数：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">--leader-elect=true</span></span>
<span class="line"><span style="color:#e1e4e8;">--leader-elect-lease-duration=15s</span></span>
<span class="line"><span style="color:#e1e4e8;">--leader-elect-renew-deadline=10s</span></span>
<span class="line"><span style="color:#e1e4e8;">--leader-elect-resource-lock=endpoints</span></span>
<span class="line"><span style="color:#e1e4e8;">--leader-elect-retry-period=2s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">--leader-elect=true</span></span>
<span class="line"><span style="color:#24292e;">--leader-elect-lease-duration=15s</span></span>
<span class="line"><span style="color:#24292e;">--leader-elect-renew-deadline=10s</span></span>
<span class="line"><span style="color:#24292e;">--leader-elect-resource-lock=endpoints</span></span>
<span class="line"><span style="color:#24292e;">--leader-elect-retry-period=2s</span></span></code></pre></div><h1 id="_6-kube-scheduler优化" tabindex="-1">6. kube-scheduler优化 <a class="header-anchor" href="#_6-kube-scheduler优化" aria-label="Permalink to &quot;6. kube-scheduler优化&quot;">​</a></h1><p><a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-scheduler/" target="_blank" rel="noreferrer">kube-scheduler</a></p><p>首先还是使用好调度器的基本功能：</p><ul><li>Pod/Node Affinity &amp; Anti-affinity //亲和</li><li>Taint &amp; Toleration //污点 &amp; 容忍</li><li>Eviction &amp; Preemption //驱逐 &amp; 抢占</li></ul><p>优先级抢占调度策略的核心行为分别是</p><p>驱逐 （Eviction）：kubelet进程的行为。</p><p>抢占 （Preemption）：Scheduler执行的行为。</p><p><strong>驱逐：</strong></p><p>即当一个Node发生资源不足（under resource pressure）的情况时，该节点上的kubelet进程会执行驱逐动作，此时 Kubelet会综合考虑Pod的优先级、资源申请量与实际使用量等信息来计 算哪些Pod需要被驱逐；当同样优先级的Pod需要被驱逐时，实际使用的 资源量超过申请量最大倍数的高耗能Pod会被首先驱逐。对于QoS等级 为“Best Effort”的Pod来说，由于没有定义资源申请（CPU/Memory Request），所以它们实际使用的资源可能非常大；</p><p><strong>抢占：</strong></p><p>当一个新的Pod因为资源无法满足而不能被调度 时，Scheduler可能（有权决定）选择驱逐部分低优先级的Pod实例来满 足此Pod的调度目标，这就是Preemption机制；</p><p><strong>Pod Disruption Budget(简称PDB)：</strong></p><p>通过PodDisruptionBudget控制器可以设置应用POD集群处于运行状态最低个数，也可以设置应用POD集群处于运行状态的最低百分比，这样可以保证在主动销毁应用POD的时候，不会一次性销毁太多的应用POD，从而保证业务不中断或业务SLA不降级。</p><p>1、 MinAvailable参数：表示最小可用POD数，表示应用POD集群处于运行状态的最小POD数量，或者是运行状态的POD数同总POD数的最小百分比。</p><p>2、 MaxUnavailable参数：表示最大不可用POD数，表示应用POD集群处于不可用状态的最大POD数，或者是不可用状态的POD数同总POD数的最大百分比。</p><h2 id="_6-1-参数优化" tabindex="-1">6.1 参数优化 <a class="header-anchor" href="#_6-1-参数优化" aria-label="Permalink to &quot;6.1 参数优化&quot;">​</a></h2><p>调大 --kube-api-qps 值：可以调整至 100，默认值为 50</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">--kube-api-qps=100</span></span>
<span class="line"><span style="color:#e1e4e8;">--kube-api-burst=150</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">--kube-api-qps=100</span></span>
<span class="line"><span style="color:#24292e;">--kube-api-burst=150</span></span></code></pre></div><h2 id="_6-2-调度器优化" tabindex="-1">6.2 调度器优化 <a class="header-anchor" href="#_6-2-调度器优化" aria-label="Permalink to &quot;6.2 调度器优化&quot;">​</a></h2><ul><li>扩展调度器功能：目前可以通过 scheduler_extender 很方便的扩展调度器，比如对于 GPU 的调度，可以通过 scheduler_extender + device-plugins 来支持。</li><li>多调度器支持：kubernetes 也支持在集群中运行多个调度器调度不同作业，例如可以在 pod 的 spec.schedulerName 指定对应的调度器，也可以在 job 的.spec.template.spec.schedulerName 指定调度器</li><li>动态调度支持：由于 kubernetes 的默认调度器只在 pod 创建过程中进行一次性调度，后续不会重新去平衡 pod 在集群中的分布，导致实际的资源使用率不均衡，此时集群中会存在部分热点宿主，为了解决默认调度器的功能缺陷，kubernetes 孵化了一个工具 Descheduler 来对默认调度器的功能进行一些补充，详细说明可以参考官方文档。</li></ul><h2 id="_6-3通过-leader-election-实现高可用" tabindex="-1">6.3通过 leader election 实现高可用 <a class="header-anchor" href="#_6-3通过-leader-election-实现高可用" aria-label="Permalink to &quot;6.3通过 leader election 实现高可用&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">--leader-elect=true</span></span>
<span class="line"><span style="color:#e1e4e8;">--leader-elect-lease-duration=15s</span></span>
<span class="line"><span style="color:#e1e4e8;">--leader-elect-renew-deadline=10s</span></span>
<span class="line"><span style="color:#e1e4e8;">--leader-elect-resource-lock=endpoints</span></span>
<span class="line"><span style="color:#e1e4e8;">--leader-elect-retry-period=2s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">--leader-elect=true</span></span>
<span class="line"><span style="color:#24292e;">--leader-elect-lease-duration=15s</span></span>
<span class="line"><span style="color:#24292e;">--leader-elect-renew-deadline=10s</span></span>
<span class="line"><span style="color:#24292e;">--leader-elect-resource-lock=endpoints</span></span>
<span class="line"><span style="color:#24292e;">--leader-elect-retry-period=2s</span></span></code></pre></div><h1 id="_7-kubelet-优化" tabindex="-1">7. kubelet 优化 <a class="header-anchor" href="#_7-kubelet-优化" aria-label="Permalink to &quot;7. kubelet 优化&quot;">​</a></h1><p><a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kubelet/" target="_blank" rel="noreferrer">kubelet</a></p><h2 id="_7-1-参数优化" tabindex="-1">7.1 参数优化 <a class="header-anchor" href="#_7-1-参数优化" aria-label="Permalink to &quot;7.1 参数优化&quot;">​</a></h2><p>--max-pods ：kubelet 可以运行的最大 Pod 数量。</p><p>--image-pull-progress-deadline ：配置镜像拉取超时。</p><p>--eviction-hard 和 --eviction-soft ：这两个参数用于定义 kubelet 中 Pod 驱逐（Eviction）策略的硬性和软性限制。</p><p>--image-gc-high-threshold 和 --image-gc-low-threshold ：这两个参数用于定义 kubelet 中镜像垃圾回收（Garbage Collection）的阈值。</p><p>--serialize-image-pulls ：该选项配置串行拉取镜像，默认值时true，配置为false可以增加并发度。</p><h2 id="_7-2-kubelet-状态更新机制" tabindex="-1">7.2 kubelet 状态更新机制 <a class="header-anchor" href="#_7-2-kubelet-状态更新机制" aria-label="Permalink to &quot;7.2 kubelet 状态更新机制&quot;">​</a></h2><ol><li>kubelet 自身会定期更新状态到 apiserver，通过参数 --node-status-update-frequency 指定上报频率，默认是 10s 上报一次。</li><li>kube-controller-manager 会每隔 --node-monitor-period 时间去检查 kubelet 的状态，默认是 5s。</li><li>当 node 失联一段时间后，kubernetes 判定 node 为 notready 状态，这段时长通过 --node-monitor-grace-period 参数配置，默认 40s。</li><li>当 node 失联一段时间后，kubernetes 判定 node 为 unhealthy 状态，这段时长通过 --node-startup-grace-period 参数配置，默认 1m0s。</li><li>当 node 失联一段时间后，kubernetes 开始删除原 node 上的 pod，这段时长是通过 --pod-eviction-timeout 参数配置，默认 5m0s。</li></ol><p>默认参数：</p><table><thead><tr><th>参数</th><th>默认值</th></tr></thead><tbody><tr><td>--node-status-update-frequency</td><td>10s</td></tr><tr><td>--node-monitor-period</td><td>5s</td></tr><tr><td>--node-monitor-grace-period</td><td>40s</td></tr><tr><td>--pod-eviction-timeout</td><td>5m</td></tr></tbody></table><p>快速更新和快速响应：</p><table><thead><tr><th>参数</th><th>默认值</th></tr></thead><tbody><tr><td>--node-status-update-frequency</td><td>4s</td></tr><tr><td>--node-monitor-period</td><td>2s</td></tr><tr><td>--node-monitor-grace-period</td><td>20s</td></tr><tr><td>--pod-eviction-timeout</td><td>30s</td></tr></tbody></table><p>中等更新和平均响应：</p><table><thead><tr><th>参数</th><th>默认值</th></tr></thead><tbody><tr><td>--node-status-update-frequency</td><td>20s</td></tr><tr><td>--node-monitor-period</td><td>5s</td></tr><tr><td>--node-monitor-grace-period</td><td>2m</td></tr><tr><td>--pod-eviction-timeout</td><td>1m</td></tr></tbody></table><p>这种场景下会 20s 更新一次 node 状态，controller manager 认为 node 状态不正常之 前，会有 (2mx60/20)x5=30 次的 node 状态更新，Node 状态为 down 之后 1m，就会触发驱逐操作。</p><p>如果有 1000 个节点，1分钟之内就会有 60s/20s*1000=3000 次的节点状态更新操作。</p><p>低更新和慢响应：</p><table><thead><tr><th>参数</th><th>默认值</th></tr></thead><tbody><tr><td>--node-status-update-frequency</td><td>1m</td></tr><tr><td>--node-monitor-period</td><td>5s</td></tr><tr><td>--node-monitor-grace-period</td><td>5m</td></tr><tr><td>--pod-eviction-timeout</td><td>1m</td></tr></tbody></table><p>Kubelet 将会 1m 更新一次节点的状态，在认为不健康之后会有 5m/1m*5=25 次重试更新的机会。Node为不健康的时候，1m 之后 pod开始被驱逐。</p><h2 id="_7-3-使用-bookmark-机制" tabindex="-1">7.3 使用 bookmark 机制 <a class="header-anchor" href="#_7-3-使用-bookmark-机制" aria-label="Permalink to &quot;7.3 使用 bookmark 机制&quot;">​</a></h2><p>Kubernetes（K8s）中的 &quot;bookmark&quot; 是一个用于标记资源的机制，允许用户保存特定资源对象的状态，并随后通过该标记来检索和操作该资源。</p><p>在 Kubernetes API 中，bookmark 是由 API 资源对象的 metadata 字段中的resourceVersion 和 kind 属性组成的。这个 bookmark 可以用作查询参数传递给API，以便在操作期间锁定特定的资源状态。</p><p>使用 bookmark 的常见场景是在众多资源对象中执行分页操作或轮询更新。例如，在获取 Pod 列表的过程中，如果列表很大并且你希望在下次获取时继续之前的状态，可以通过将当前的 bookmark 作为查询参数传递给 API 来实现。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">GET</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/api/v1/namespaces/default/pods?limit=</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">&amp;bookmark</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">f3b9fc35-5f82-4820-bfa4-7079595c48b3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">GET</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/api/v1/namespaces/default/pods?limit=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">&amp;bookmark</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">f3b9fc35-5f82-4820-bfa4-7079595c48b3</span></span></code></pre></div><p>尽管 bookmark 对于分页和追踪资源状态很有用，但它不是 Kubernetes 中常用的功能，因此在应用程序开发中可能会相对较少使用。</p><h2 id="_7-4-限制驱逐" tabindex="-1">7.4 限制驱逐 <a class="header-anchor" href="#_7-4-限制驱逐" aria-label="Permalink to &quot;7.4 限制驱逐&quot;">​</a></h2><p>资源紧张时不建议进行驱逐的原因有以下几点：</p><ol><li>资源可用性：特殊属性节点可能提供了某些独特的能力或功能，例如高性能计算、存储设备或专用网络连接等。</li><li>资源调度：对于特殊属性的节点，通常只有少数几台存在于集群中，并且它们被认为是有限且宝贵的资源。</li><li>重新调度成本：在高并发集群中频繁地驱逐容器会导致频繁的重新调度操作。重新调度包括为被驱逐容器选择新的节点、迁移容器的状态和数据等。</li></ol><h2 id="_7-5-原地升级" tabindex="-1">7.5 原地升级 <a class="header-anchor" href="#_7-5-原地升级" aria-label="Permalink to &quot;7.5 原地升级&quot;">​</a></h2><ul><li>对组件进行二开，或者通过operator来变现；</li><li>在 resource 对应于 k8s 中的应用，当 pod 中的 image 改变后只更新 pod 不重建，kubelet 重启 container 生效。</li></ul><h1 id="_8-kube-proxy-优化" tabindex="-1">8. kube-proxy 优化 <a class="header-anchor" href="#_8-kube-proxy-优化" aria-label="Permalink to &quot;8. kube-proxy 优化&quot;">​</a></h1><p><a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-proxy/" target="_blank" rel="noreferrer">kube-proxy</a></p><h2 id="_8-1-使用-ipvs-模式" tabindex="-1">8.1 使用 ipvs 模式 <a class="header-anchor" href="#_8-1-使用-ipvs-模式" aria-label="Permalink to &quot;8.1 使用 ipvs 模式&quot;">​</a></h2><p>IPVS模式和IPTABLES模式之间的差异如下：</p><ul><li>性能和扩展性：IPVS 是一个基于内核的 TCP/UDP 负载均衡器，相对于 iptables 具有更高的性能和扩展能力。</li><li>负载均衡算法：IPVS 提供了多种负载均衡算法，如轮询、加权轮询、最少连接数等。</li><li>服务代理模式：与 iptables 相比，IPVS 可以以直接代理模式工作，将数据包直接转发到后端 Pod 的 IP 地址，而无需修改数据包的目标 IP 地址。</li><li>动态配置更新：IPVS 支持动态配置更新，可以让 kube-proxy 在运行时动态地添加、删除和更新负载均衡规则，而无需重新生成整个 iptables 规则集。</li></ul><h2 id="_8-2-优化" tabindex="-1">8.2 优化 <a class="header-anchor" href="#_8-2-优化" aria-label="Permalink to &quot;8.2 优化&quot;">​</a></h2><p>--conntrack-tcp-timeout-close-wait ：用于指定 IPVS 的 TCP CLOSE_WAIT状态下的连接超时时间。</p><p>--conntrack-max-per-core ：用于指定每个 CPU 核心的最大并发连接数限制。</p><h1 id="_9-镜像优化" tabindex="-1">9. 镜像优化 <a class="header-anchor" href="#_9-镜像优化" aria-label="Permalink to &quot;9. 镜像优化&quot;">​</a></h1><p>一个容器的镜像平均 1~2G 左右，若频繁的拉取镜像可能会将宿主机的带宽打满，甚至影响镜像仓库的使用，</p><p>1、镜像优化；</p><ul><li>使用基于 Alpine Linux、BusyBox 或 Scratch 的轻量级基础镜像；</li><li>能在一个阶段中执行的业务逻辑就不要放到2个；</li><li>移除不必要的依赖和文件；</li><li>镜像使用最小化的操作系统组件。</li></ul><p>2、镜像缓存；</p><p>3、使用 P2P 进行镜像分发，比如：dragonfly；</p><p>4、基础镜像预加载（一般镜像会分为三层）：</p><ul><li>第一层：基础镜像即 os，</li><li>第二层：环境镜像即带有 nginx、tomcat 等服务的镜像，</li><li>第三层：业务镜像也就是带有业务代码的镜像。</li><li>基础镜像一般不会频繁更新，可在所有宿主机上预先加载，环境镜像可以定时</li><li>进行加载，业务镜像则实时拉取。</li></ul><h1 id="_10-docker优化" tabindex="-1">10. docker优化 <a class="header-anchor" href="#_10-docker优化" aria-label="Permalink to &quot;10. docker优化&quot;">​</a></h1><h2 id="_10-1-daemon-json" tabindex="-1">10.1 daemon.json <a class="header-anchor" href="#_10-1-daemon-json" aria-label="Permalink to &quot;10.1 daemon.json&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#创建docker目录</span></span>
<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/docker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/docker/daemon.json</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#9ECBFF;">EOF</span></span>
<span class="line"><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;exec-opts&quot;: [</span></span>
<span class="line"><span style="color:#9ECBFF;">  	&quot;native.cgroupdriver=systemd&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">  ],</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;max-concurrent-downloads&quot;: 10,</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;max-concurrent-uploads&quot;: 5,</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;live-restore&quot;:true,</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;log-driver&quot;: &quot;json-file&quot;,</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;log-opts&quot;: {</span></span>
<span class="line"><span style="color:#9ECBFF;">  	&quot;max-size&quot;: &quot;100m&quot;,</span></span>
<span class="line"><span style="color:#9ECBFF;">	&quot;max-file&quot;:&quot;5&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">  },</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;storage-opts&quot;: [</span></span>
<span class="line"><span style="color:#9ECBFF;">  	&quot;overlay2.override_kernel_check=true&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">  ],</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;registry-mirrors&quot; : [</span></span>
<span class="line"><span style="color:#9ECBFF;">  ],</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;data-root&quot;: &quot;/data/docker&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">EOF</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#创建docker目录</span></span>
<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/docker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/docker/daemon.json</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">EOF</span></span>
<span class="line"><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#032F62;">  &quot;exec-opts&quot;: [</span></span>
<span class="line"><span style="color:#032F62;">  	&quot;native.cgroupdriver=systemd&quot;</span></span>
<span class="line"><span style="color:#032F62;">  ],</span></span>
<span class="line"><span style="color:#032F62;">  &quot;max-concurrent-downloads&quot;: 10,</span></span>
<span class="line"><span style="color:#032F62;">  &quot;max-concurrent-uploads&quot;: 5,</span></span>
<span class="line"><span style="color:#032F62;">  &quot;live-restore&quot;:true,</span></span>
<span class="line"><span style="color:#032F62;">  &quot;log-driver&quot;: &quot;json-file&quot;,</span></span>
<span class="line"><span style="color:#032F62;">  &quot;log-opts&quot;: {</span></span>
<span class="line"><span style="color:#032F62;">  	&quot;max-size&quot;: &quot;100m&quot;,</span></span>
<span class="line"><span style="color:#032F62;">	&quot;max-file&quot;:&quot;5&quot;</span></span>
<span class="line"><span style="color:#032F62;">  },</span></span>
<span class="line"><span style="color:#032F62;">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span></span>
<span class="line"><span style="color:#032F62;">  &quot;storage-opts&quot;: [</span></span>
<span class="line"><span style="color:#032F62;">  	&quot;overlay2.override_kernel_check=true&quot;</span></span>
<span class="line"><span style="color:#032F62;">  ],</span></span>
<span class="line"><span style="color:#032F62;">  &quot;registry-mirrors&quot; : [</span></span>
<span class="line"><span style="color:#032F62;">  ],</span></span>
<span class="line"><span style="color:#032F62;">  &quot;data-root&quot;: &quot;/data/docker&quot;</span></span>
<span class="line"><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">EOF</span></span></code></pre></div><h2 id="_10-2-pause" tabindex="-1">10.2 pause <a class="header-anchor" href="#_10-2-pause" aria-label="Permalink to &quot;10.2 pause&quot;">​</a></h2><p>提前下载pause镜像，导入</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5</span></span></code></pre></div>`,164),o=[p];function t(r,c,i,y,E,d){return a(),n("div",null,o)}const h=s(e,[["render",t]]);export{u as __pageData,h as default};
