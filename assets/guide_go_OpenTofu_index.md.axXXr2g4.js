import{_ as t,o as s,c as r,R as o}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"1. Terraform 的许可转向","description":"","frontmatter":{},"headers":[],"relativePath":"guide/go/OpenTofu/index.md","filePath":"guide/go/OpenTofu/index.md","lastUpdated":1753542088000}'),a={name:"guide/go/OpenTofu/index.md"},n=o(`<div style="text-align:center;width:500px;"><img alt="" src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/20250726212012255.png" style="margin:0 auto;"></div><p>官方文档，<a href="https://opentofu.org/" target="_blank" rel="noreferrer">https://opentofu.org/</a></p><h1 id="_1-terraform-的许可转向" tabindex="-1">1. Terraform 的许可转向 <a class="header-anchor" href="#_1-terraform-的许可转向" aria-label="Permalink to &quot;1. Terraform 的许可转向&quot;">​</a></h1><p>在过去近十年里，HashiCorp 的 Terraform 无疑是 IaC 领域的代名词。然而，2023年8月，HashiCorp 宣布将其核心产品（包括 Terraform）的许可证从开源的 MPL 2.0 切换到商业源许可证（Business Source License, BSL）。</p><p>BSL 许可证虽然允许个人免费使用、修改和分发代码，但对商业用途施加了严格限制。任何可能与 HashiCorp 构成竞争的商业产品，都无法在不支付昂贵费用的情况下使用 Terraform。这一转变，加上其云服务不断上涨的成本，让许多严重依赖 Terraform 的企业和开发者开始重新评估“厂商锁定”带来的风险。当一个基础工具的未来完全由一家公司的商业决策左右时，寻找一个开放、中立的替代方案便显得至关重要。</p><h1 id="_2-opentofu-的诞生-一个真正开源的替代方案" tabindex="-1">2. OpenTofu 的诞生：一个真正开源的替代方案 <a class="header-anchor" href="#_2-opentofu-的诞生-一个真正开源的替代方案" aria-label="Permalink to &quot;2. OpenTofu 的诞生：一个真正开源的替代方案&quot;">​</a></h1><p>正是在这样的背景下，OpenTofu 应运而生。它最初是由多家公司联合发起的 OpenTF 倡议，旨在保留一个真正开源的 Terraform。如今，OpenTofu 已经成为一个由 Linux 基金会托管的独立项目，并致力于加入云原生计算基金会（CNCF）。</p><p>OpenTofu 是 Terraform 1.5.x 版本的一个硬分叉，它承诺：</p><p>• <strong>永远开源</strong>：在 MPL 2.0 许可下发布，确保所有用户都可以自由地用于任何目的，无商业限制之忧。</p><p>• <strong>社区驱动</strong>：由中立的基金会管理，其发展方向由社区贡献者共同决定，功能和修复的优先级基于社区的实际需求，而非单一供应商的利益。</p><p>• <strong>向后兼容</strong>：作为 Terraform 的直接替代品，用户可以平滑迁移，现有的代码、模块和工作流几乎无需更改。</p><h1 id="_3-opentofu-vs-terraform-关键差异对比" tabindex="-1">3. OpenTofu vs. Terraform：关键差异对比 <a class="header-anchor" href="#_3-opentofu-vs-terraform-关键差异对比" aria-label="Permalink to &quot;3. OpenTofu vs. Terraform：关键差异对比&quot;">​</a></h1><p>虽然 OpenTofu 源于 Terraform，但两者在核心理念和功能上已开始出现分化。以下是它们之间的关键差异：</p><table><thead><tr><th><strong>特性 / 维度</strong></th><th><strong>OpenTofu</strong></th><th><strong>Terraform</strong></th></tr></thead><tbody><tr><td><strong>许可证</strong></td><td>MPL 2.0 (真正开源)</td><td>BSL 1.1 (商业源，限制性)</td></tr><tr><td><strong>治理模式</strong></td><td>社区驱动，由 Linux 基金会托管</td><td>单一厂商 (HashiCorp) 控制</td></tr><tr><td><strong>状态文件加密</strong></td><td>✅ <strong>支持</strong> (客户端加密)</td><td>❌ <strong>不支持</strong> (社区呼吁多年)</td></tr><tr><td><strong>早期变量评估</strong></td><td>✅ <strong>支持</strong></td><td>❌ <strong>不支持</strong></td></tr><tr><td><strong>代码即策略 (Policy as Code)</strong></td><td>✅ <strong>支持</strong> (原生支持 OPA)</td><td>✅ <strong>支持</strong> (需使用 Sentinel)</td></tr><tr><td><strong>状态修复</strong></td><td>✅ <strong>支持</strong> (<code>tofu repair --auto</code>)</td><td>❌ <strong>不支持</strong> (需手动刷新和应用)</td></tr><tr><td><strong>生态系统</strong></td><td>兼容 Terraform 提供商和模块</td><td>庞大但受商业策略影响</td></tr></tbody></table><p>最显著的优势在于，OpenTofu 实现了许多 Terraform 社区长期以来渴望但未被实现的功能，其中<strong>状态文件加密</strong>尤为关键。在 Terraform 中，状态文件以明文形式存储敏感信息，存在巨大的安全隐患。OpenTofu 在 1.7 版本中引入的客户端加密功能，彻底解决了这一痛点。</p><h1 id="_4-快速从-terraform-迁移" tabindex="-1">4. 快速从 Terraform 迁移 <a class="header-anchor" href="#_4-快速从-terraform-迁移" aria-label="Permalink to &quot;4. 快速从 Terraform 迁移&quot;">​</a></h1><p>如果您已有 Terraform 项目，迁移状态文件仅需两步。这是一个无损操作，因为 OpenTofu 完全兼容 Terraform 的状态格式。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 1. 从您当前的 Terraform 后端拉取状态文件</span></span>
<span class="line"><span style="color:#B392F0;">terraform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pull</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">terraform.tfstate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 2. 将状态文件推送到 OpenTofu 管理的同一后端</span></span>
<span class="line"><span style="color:#B392F0;">tofu</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">terraform.tfstate</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 1. 从您当前的 Terraform 后端拉取状态文件</span></span>
<span class="line"><span style="color:#6F42C1;">terraform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">state</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">terraform.tfstate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 2. 将状态文件推送到 OpenTofu 管理的同一后端</span></span>
<span class="line"><span style="color:#6F42C1;">tofu</span><span style="color:#24292E;"> </span><span style="color:#032F62;">state</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#032F62;">terraform.tfstate</span></span></code></pre></div><p>完成之后， CI/CD 流程只需将 <code>terraform</code> 命令替换为 <code>tofu</code> 即可。没有学习成本</p><h1 id="_5-为什么-opentofu-是更优选择" tabindex="-1">5. 为什么 OpenTofu 是更优选择 <a class="header-anchor" href="#_5-为什么-opentofu-是更优选择" aria-label="Permalink to &quot;5. 为什么 OpenTofu 是更优选择&quot;">​</a></h1><p>• <strong>长期的稳定性</strong>：由中立基金会确保其开源地位，不受单一公司商业策略的冲击。</p><p>• <strong>更高的安全性</strong>：原生支持状态加密等关键安全特性。</p><p>• <strong>更快的创新</strong>：社区驱动的开发模式能更快地响应真实世界的需求。</p><p>• <strong>完全的控制权</strong>：无厂商锁定，让我们的基础设施未来掌握在自己手中。</p>`,24),e=[n];function p(l,d,c,f,i,g){return s(),r("div",null,e)}const m=t(a,[["render",p]]);export{h as __pageData,m as default};
