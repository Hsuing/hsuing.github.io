import{_ as t,o as e,c as a,R as o}from"./chunks/framework.zUbWieqp.js";const p=JSON.parse('{"title":"1. Prometheus本地存储","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Linux/Monitor/Prometheus/6-cluster_local.md","filePath":"guide/Linux/Monitor/Prometheus/6-cluster_local.md","lastUpdated":1739960402000}'),r={name:"guide/Linux/Monitor/Prometheus/6-cluster_local.md"},s=o('<h1 id="_1-prometheus本地存储" tabindex="-1">1. Prometheus本地存储 <a class="header-anchor" href="#_1-prometheus本地存储" aria-label="Permalink to &quot;1. Prometheus本地存储&quot;">​</a></h1><h2 id="_1-1-简介" tabindex="-1">1.1 简介 <a class="header-anchor" href="#_1-1-简介" aria-label="Permalink to &quot;1.1 简介&quot;">​</a></h2><ol><li>prometheus将样本数据保存在本地磁盘当中。按照两个小时为一个时间窗口，将两小时内产生的数据存储在一个块(Block)中，每一个块中包含该时间窗口内的所有样本数据(chunks)，元数据文件(meta.json)以及索引文件(index)。</li><li>当前时间窗口内正在收集的样本数据，Prometheus则会直接将数据保存在内存当中。为了确保此期间如果Prometheus发生崩溃或者重启时能够恢复数据，Prometheus启动时会从写入日志(WAL)进行重播，从而恢复数据。此期间如果通过API删除时间序列，删除记录也会保存在单独的逻辑文件当中(tombstone)。</li><li>Prometheus保存块数据的目录结构如下</li></ol><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202502191719671.png" alt="image.png"></p><h2 id="_1-2-本地存储配置" tabindex="-1">1.2 本地存储配置 <a class="header-anchor" href="#_1-2-本地存储配置" aria-label="Permalink to &quot;1.2 本地存储配置&quot;">​</a></h2><p>用户可以通过命令行启动参数的方式修改本地存储的配置。</p><table><thead><tr><th>启动参数</th><th>默认值</th><th>含义</th></tr></thead><tbody><tr><td>--storage.tsdb.path</td><td>data/</td><td>本地存储路径</td></tr><tr><td>--storage.tsdb.retention</td><td>15d</td><td>样本保存时间</td></tr><tr><td>--storage.tsdb.min-block-duration</td><td>2h</td><td>样本数据持久化到磁盘时间</td></tr></tbody></table>',7),d=[s];function i(h,l,n,c,u,_){return e(),a("div",null,d)}const P=t(r,[["render",i]]);export{p as __pageData,P as default};
