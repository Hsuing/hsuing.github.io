import{_ as a,o as e,c as r,R as o}from"./chunks/framework.zUbWieqp.js";const P=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/资源对象/2-Pod常见状态.md","filePath":"guide/container/k8s/资源对象/2-Pod常见状态.md","lastUpdated":1723447113000}'),n={name:"guide/container/k8s/资源对象/2-Pod常见状态.md"},i=o('<h2 id="_1-pod-状态-第一阶段" tabindex="-1">1. Pod 状态（第一阶段） <a class="header-anchor" href="#_1-pod-状态-第一阶段" aria-label="Permalink to &quot;1. Pod 状态（第一阶段）&quot;">​</a></h2><h3 id="_1-pending" tabindex="-1">1）Pending <a class="header-anchor" href="#_1-pending" aria-label="Permalink to &quot;1）Pending&quot;">​</a></h3><p>Pod已经被创建，但还没有完成调度，或者说有一个或多个镜像正处于从远程仓库下载的过程。处在这个阶段的 Pod 可能正在写数据到 etcd 中、调度、pull镜像或启动容器。</p><h3 id="_2-running" tabindex="-1">2）Running <a class="header-anchor" href="#_2-running" aria-label="Permalink to &quot;2）Running&quot;">​</a></h3><p>该 Pod 已经绑定到了一个节点上，Pod 中所有的容器都已被创建。至少有一个容器正在运行，或者正处于启动或重启状态。</p><h3 id="_3-succeeded" tabindex="-1">3）Succeeded <a class="header-anchor" href="#_3-succeeded" aria-label="Permalink to &quot;3）Succeeded&quot;">​</a></h3><p>Pod中的所有的容器已经正常的执行后退出，并且不会自动重启，一般会是在部署 job 的时候会出现。</p><h3 id="_4-failed" tabindex="-1">4）Failed <a class="header-anchor" href="#_4-failed" aria-label="Permalink to &quot;4）Failed&quot;">​</a></h3><p>Pod 中的所有容器都已终止了，并且至少有一个容器是因为失败终止。也就是说，容器以 非0状态 退出或者被系统终止。</p><h3 id="_5-unkonwn" tabindex="-1">5）Unkonwn <a class="header-anchor" href="#_5-unkonwn" aria-label="Permalink to &quot;5）Unkonwn&quot;">​</a></h3><p>API Server无法正常获取到Pod对象的状态信息，通常是由于其无法与所在工作节点的 kubelet 通信所致。</p><h2 id="_2-pod-状态-第二阶段" tabindex="-1">2. Pod 状态（第二阶段） <a class="header-anchor" href="#_2-pod-状态-第二阶段" aria-label="Permalink to &quot;2. Pod 状态（第二阶段）&quot;">​</a></h2><h3 id="_1-unschedulable" tabindex="-1">1）Unschedulable <a class="header-anchor" href="#_1-unschedulable" aria-label="Permalink to &quot;1）Unschedulable&quot;">​</a></h3><p>Pod不能被调度，kube-scheduler 没有匹配到合适的 node 节点。</p><h3 id="_2-podscheduled" tabindex="-1">2）PodScheduled <a class="header-anchor" href="#_2-podscheduled" aria-label="Permalink to &quot;2）PodScheduled&quot;">​</a></h3><p>Pod 正处于调度中，在 kube-scheduler 刚开始调度的时候，还没有将 Pod 分配到指定的 node，在筛选出合适的节点后就会更新 etcd 数据，将 Pod 分配到指定的 node。</p><h3 id="_3-initialized" tabindex="-1">3）Initialized <a class="header-anchor" href="#_3-initialized" aria-label="Permalink to &quot;3）Initialized&quot;">​</a></h3><p>所有 pod 中的初始化容器已经完成了。</p><h3 id="_4-imagepullbackoff" tabindex="-1">4）ImagePullBackOff <a class="header-anchor" href="#_4-imagepullbackoff" aria-label="Permalink to &quot;4）ImagePullBackOff&quot;">​</a></h3><p>Pod 所在的 node 节点下载镜像失败。</p><h3 id="_5-running" tabindex="-1">5）Running <a class="header-anchor" href="#_5-running" aria-label="Permalink to &quot;5）Running&quot;">​</a></h3><p>Pod 内部的容器已经被创建并且启动。</p><h3 id="_6-ready" tabindex="-1">6）Ready <a class="header-anchor" href="#_6-ready" aria-label="Permalink to &quot;6）Ready&quot;">​</a></h3><p>表示 pod 中的容器已经可以提供访问服务。</p><h2 id="_3-pod-状态-其他" tabindex="-1">3. Pod 状态（其他） <a class="header-anchor" href="#_3-pod-状态-其他" aria-label="Permalink to &quot;3. Pod 状态（其他）&quot;">​</a></h2><h3 id="_1-error" tabindex="-1">1）Error <a class="header-anchor" href="#_1-error" aria-label="Permalink to &quot;1）Error&quot;">​</a></h3><p>Pod 启动过程中发生错误。</p><h3 id="_2-nodelost" tabindex="-1">2）NodeLost <a class="header-anchor" href="#_2-nodelost" aria-label="Permalink to &quot;2）NodeLost&quot;">​</a></h3><p>Pod 所在节点失联。</p><h3 id="_3-unkown" tabindex="-1">3）Unkown <a class="header-anchor" href="#_3-unkown" aria-label="Permalink to &quot;3）Unkown&quot;">​</a></h3><p>Pod 所在节点失联或其它未知异常。</p><h3 id="_4-waiting" tabindex="-1">4）Waiting <a class="header-anchor" href="#_4-waiting" aria-label="Permalink to &quot;4）Waiting&quot;">​</a></h3><p>Pod 等待启动。</p><h3 id="_5-pending" tabindex="-1">5）Pending <a class="header-anchor" href="#_5-pending" aria-label="Permalink to &quot;5）Pending&quot;">​</a></h3><p>Pod 等待被调度。</p><h3 id="_6-terminating" tabindex="-1">6）Terminating <a class="header-anchor" href="#_6-terminating" aria-label="Permalink to &quot;6）Terminating&quot;">​</a></h3><p>Pod 正在被销毁。</p><h3 id="_7-crashloopbackoff" tabindex="-1">7）CrashLoopBackOff <a class="header-anchor" href="#_7-crashloopbackoff" aria-label="Permalink to &quot;7）CrashLoopBackOff&quot;">​</a></h3><p>Pod 异常，但是kubelet正在将它重启pod。</p><h3 id="_8-invalidimagename" tabindex="-1">8）InvalidImageName <a class="header-anchor" href="#_8-invalidimagename" aria-label="Permalink to &quot;8）InvalidImageName&quot;">​</a></h3><p>node 节点无法解析镜像名称导致的镜像无法下载。</p><h3 id="_9-imageinspecterror" tabindex="-1">9）ImageInspectError <a class="header-anchor" href="#_9-imageinspecterror" aria-label="Permalink to &quot;9）ImageInspectError&quot;">​</a></h3><p>无法校验镜像，镜像不完整导致。</p><h3 id="_10-errimageneverpull" tabindex="-1">10）ErrImageNeverPull <a class="header-anchor" href="#_10-errimageneverpull" aria-label="Permalink to &quot;10）ErrImageNeverPull&quot;">​</a></h3><p>策略禁止拉取镜像，镜像中心权限是私有等。</p><h3 id="_11-imagepullbackoff" tabindex="-1">11）ImagePullBackOff <a class="header-anchor" href="#_11-imagepullbackoff" aria-label="Permalink to &quot;11）ImagePullBackOff&quot;">​</a></h3><p>镜像拉取失败，但是正在重新拉取。</p><h3 id="_12-registryunavailable" tabindex="-1">12）RegistryUnavailable <a class="header-anchor" href="#_12-registryunavailable" aria-label="Permalink to &quot;12）RegistryUnavailable&quot;">​</a></h3><p>镜像服务器不可用，网络原因或 harbor 宕机。</p><h3 id="_13-errimagepull" tabindex="-1">13）ErrImagePull <a class="header-anchor" href="#_13-errimagepull" aria-label="Permalink to &quot;13）ErrImagePull&quot;">​</a></h3><p>镜像拉取出错，超时或下载被强制终止</p><h3 id="_14-createcontainerconfigerror" tabindex="-1">14）CreateContainerConfigError <a class="header-anchor" href="#_14-createcontainerconfigerror" aria-label="Permalink to &quot;14）CreateContainerConfigError&quot;">​</a></h3><p>不能创建kubelet使用的容器配置</p><h3 id="_15-createcontainererror" tabindex="-1">15）CreateContainerError <a class="header-anchor" href="#_15-createcontainererror" aria-label="Permalink to &quot;15）CreateContainerError&quot;">​</a></h3><p>创建容器失败</p><h3 id="_16-prestartcontainer" tabindex="-1">16）PreStartContainer <a class="header-anchor" href="#_16-prestartcontainer" aria-label="Permalink to &quot;16）PreStartContainer&quot;">​</a></h3><p>执行 preStart hook 报错，Pod hook(钩子)是由 Kubernetes 管理的 kubelet 发起的，当容器中的进程启动前或者容器中的进程终止之前运行，比如容器创建完成后里面的服务启动之前可以检查一下依赖的其它服务是否启动，或者容器退出之前可以把容器中的服务先通过命令停止。</p><h3 id="_17-poststarthookerror" tabindex="-1">17)PostStartHookError <a class="header-anchor" href="#_17-poststarthookerror" aria-label="Permalink to &quot;17)PostStartHookError&quot;">​</a></h3><p>执行 postStart hook 报错。</p><h3 id="_18-runcontainererror" tabindex="-1">18）RunContainerError <a class="header-anchor" href="#_18-runcontainererror" aria-label="Permalink to &quot;18）RunContainerError&quot;">​</a></h3><p>Pod 运行失败，容器中没有初始化PID为1的守护进程等。</p><h3 id="_19-containersnotinitialized" tabindex="-1">19）ContainersNotInitialized <a class="header-anchor" href="#_19-containersnotinitialized" aria-label="Permalink to &quot;19）ContainersNotInitialized&quot;">​</a></h3><p>Pod 没有初始化完毕。</p><h3 id="_20-containersnotready" tabindex="-1">20）ContainersNotReady <a class="header-anchor" href="#_20-containersnotready" aria-label="Permalink to &quot;20）ContainersNotReady&quot;">​</a></h3><p>Pod 没有准备完毕。</p><h3 id="_21-containercreating" tabindex="-1">21）ContainerCreating <a class="header-anchor" href="#_21-containercreating" aria-label="Permalink to &quot;21）ContainerCreating&quot;">​</a></h3><p>Pod 正在创建中。</p><h3 id="_22-podinitializing" tabindex="-1">22）PodInitializing <a class="header-anchor" href="#_22-podinitializing" aria-label="Permalink to &quot;22）PodInitializing&quot;">​</a></h3><p>Pod 正在初始化中。</p><h3 id="_23-dockerdaemonnotready" tabindex="-1">23）DockerDaemonNotReady <a class="header-anchor" href="#_23-dockerdaemonnotready" aria-label="Permalink to &quot;23）DockerDaemonNotReady&quot;">​</a></h3><p>node 节点 docker 服务没有启动。</p><h3 id="_24-networkpluginnotready" tabindex="-1">24）NetworkPluginNotReady <a class="header-anchor" href="#_24-networkpluginnotready" aria-label="Permalink to &quot;24）NetworkPluginNotReady&quot;">​</a></h3><p>网络插件还没有完全启动。</p>',73),t=[i];function d(l,h,c,u,s,p){return e(),r("div",null,t)}const b=a(n,[["render",d]]);export{P as __pageData,b as default};
