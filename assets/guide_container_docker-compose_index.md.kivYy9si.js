import{_ as e,o,c as r,R as a}from"./chunks/framework.zUbWieqp.js";const _=JSON.parse('{"title":"1.Docker-compose","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/docker-compose/index.md","filePath":"guide/container/docker-compose/index.md","lastUpdated":1730456937000}'),c={name:"guide/container/docker-compose/index.md"},s=a('<p><a href="https://docs.docker.com/compose/" target="_blank" rel="noreferrer">官当</a></p><p><a href="https://github.com/docker/compose" target="_blank" rel="noreferrer">官方仓库</a></p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202411011727977.png" alt="Docker Compose" style="margin:0 auto;"><h1 id="_1-docker-compose" tabindex="-1">1.Docker-compose <a class="header-anchor" href="#_1-docker-compose" aria-label="Permalink to &quot;1.Docker-compose&quot;">​</a></h1><h2 id="_1-1-介绍" tabindex="-1">1.1 介绍 <a class="header-anchor" href="#_1-1-介绍" aria-label="Permalink to &quot;1.1 介绍&quot;">​</a></h2><p>docker Compose是一个用来定义和运行复杂应用的Docker工具。一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose不再需要使用shell脚本来启动容器。</p><p>Compose 通过一个配置文件来管理多个Docker容器，在配置文件中，所有的容器通过services来定义，然后使用docker-compose脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器，非常适合组合使用多个容器进行开发的场景。</p><h2 id="_1-1-是如何工作" tabindex="-1">1.1 是如何工作？ <a class="header-anchor" href="#_1-1-是如何工作" aria-label="Permalink to &quot;1.1 是如何工作？&quot;">​</a></h2><p>Docker-compose使用Yaml文件来管理容器服务。YAML模板文件的组成包含， <a href="https://docs.docker.com/reference/compose-file/services/" target="_blank" rel="noreferrer">services</a>， <a href="https://docs.docker.com/reference/compose-file/networks/" target="_blank" rel="noreferrer">networks</a>， <a href="https://docs.docker.com/reference/compose-file/volumes/" target="_blank" rel="noreferrer">volumes</a>， <a href="https://docs.docker.com/reference/compose-file/configs/" target="_blank" rel="noreferrer">configs</a>， <a href="https://docs.docker.com/reference/compose-file/secrets/" target="_blank" rel="noreferrer">secret</a></p><p>默认使用<code>compose.yml</code>或者<code>compose.yaml</code>来启动服务,也支持<code>docker-compose.yaml</code></p><h2 id="_1-2-为什么使用它" tabindex="-1">1.2 为什么使用它？ <a class="header-anchor" href="#_1-2-为什么使用它" aria-label="Permalink to &quot;1.2 为什么使用它？&quot;">​</a></h2><p>可以简化应用程序的部署和管理，有以下几点</p><ul><li>简化的控制:Docker Compose允许您在单个YAML文件中定义和管理多容器应用程序。这简化了协调和协调各种服务的复杂任务,从而使管理和复制应用程序环境变得更加容易。</li><li>高效的协作:Docker Compose配置文件易于共享,从而促进了开发人员,运营团队和其他利益相关者之间的协作。这种协作方法可实现更顺畅的工作流程,更快的问题解决方案并提高整体效率。</li><li>快速应用程序开发:组成缓存用于创建容器的配置。重新启动未更改的服务时,Compose会重新使用现有容器。重新使用容器意味着您可以非常快速地更改环境。</li><li>跨环境的可移植性:Compose支持Compose文件中的变量。您可以使用这些变量为不同的环境或不同的用户自定义构图。</li><li>广泛的社区和支持:Docker Compose受益于充满活力和活跃的社区,这意味着丰富的资源,教程和支持。这个社区驱动的生态系统有助于Docker Compose的不断改进,并帮助用户有效地解决问题。</li></ul><h2 id="_1-3-发展历史" tabindex="-1">1.3 发展历史 <a class="header-anchor" href="#_1-3-发展历史" aria-label="Permalink to &quot;1.3 发展历史&quot;">​</a></h2><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202411011752584.png" alt="Image showing the main differences between Compose V1 and Compose V2"></p>',15),t=[s];function n(i,l,p,m,d,h){return o(),r("div",null,t)}const f=e(c,[["render",n]]);export{_ as __pageData,f as default};
