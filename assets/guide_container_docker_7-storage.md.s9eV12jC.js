import{_ as s,o as a,c as n,R as l}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"1. Docker的数据管理","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/docker/7-storage.md","filePath":"guide/container/docker/7-storage.md","lastUpdated":1723447064000}'),o={name:"guide/container/docker/7-storage.md"},p=l(`<p>文档,<a href="https://docs.docker.com/storage/volumes/" target="_blank" rel="noreferrer">https://docs.docker.com/storage/volumes/</a></p><h1 id="_1-docker的数据管理" tabindex="-1">1. Docker的数据管理 <a class="header-anchor" href="#_1-docker的数据管理" aria-label="Permalink to &quot;1. Docker的数据管理&quot;">​</a></h1><h2 id="_1-1-概述" tabindex="-1">1.1 概述 <a class="header-anchor" href="#_1-1-概述" aria-label="Permalink to &quot;1.1 概述&quot;">​</a></h2><p>Docker的数据管理是指在Docker容器中对数据进行存储、共享、备份和持久化的方法和技术。它允许用户在保持容器轻量级的同时，确保容器产生的数据能够安全、高效地存储和管理。</p><h2 id="_1-2-主要的技术-三种数据挂载方式" tabindex="-1">1.2 主要的技术（三种数据挂载方式） <a class="header-anchor" href="#_1-2-主要的技术-三种数据挂载方式" aria-label="Permalink to &quot;1.2 主要的技术（三种数据挂载方式）&quot;">​</a></h2><h3 id="_1-2-1-数据卷-volumes" tabindex="-1">1.2.1 数据卷（Volumes） <a class="header-anchor" href="#_1-2-1-数据卷-volumes" aria-label="Permalink to &quot;1.2.1 数据卷（Volumes）&quot;">​</a></h3><ul><li>数据卷是Docker管理的、独立于容器的存储区域，提供了数据持久化和容器间共享的能力。</li><li>数据卷存储在Docker主机上的特定目录，默认是 <code>/var/lib/docker/volumes/</code>（Linux系统），并且可以在容器间共享而不依赖于任何单一容器的生命周期。</li><li>即使容器被删除，数据依然存在。</li></ul><h3 id="_1-2-2-绑定挂载-bind-mounts" tabindex="-1">1.2.2 绑定挂载（Bind mounts） <a class="header-anchor" href="#_1-2-2-绑定挂载-bind-mounts" aria-label="Permalink to &quot;1.2.2 绑定挂载（Bind mounts）&quot;">​</a></h3><ul><li>绑定挂载是将宿主机上的文件系统路径直接挂载到容器内的过程。</li><li>这种方式允许直接利用宿主机的文件系统资源，但可能带来数据管理上的复杂性和安全性考量。</li><li>绑定挂载的存储位置和数据格式完全由宿主机控制，不受到Docker的直接管理。</li></ul><h3 id="_1-2-3-tmpfs挂载-tmpfs-mounts" tabindex="-1">1.2.3 tmpfs挂载（Tmpfs mounts） <a class="header-anchor" href="#_1-2-3-tmpfs挂载-tmpfs-mounts" aria-label="Permalink to &quot;1.2.3 tmpfs挂载（Tmpfs mounts）&quot;">​</a></h3><ul><li>Tmpfs挂载是将数据存储在宿主机的内存中而不是磁盘上，适用于临时文件或对速度有高要求的场景。</li><li>这种类型的存储不会持久化，容器停止或宿主机重启后数据将会丢失。</li><li>适合存储敏感信息或缓存数据，因其不会写入磁盘，可以增加安全性。</li></ul><h3 id="_1-2-4-之间的关系-数据在docker主机上的存储位置" tabindex="-1">1.2.4 之间的关系（数据在Docker主机上的存储位置） <a class="header-anchor" href="#_1-2-4-之间的关系-数据在docker主机上的存储位置" aria-label="Permalink to &quot;1.2.4 之间的关系（数据在Docker主机上的存储位置）&quot;">​</a></h3><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202407241710683.webp" alt="img"></p><h2 id="_1-3-数据卷示例" tabindex="-1">1.3 数据卷示例 <a class="header-anchor" href="#_1-3-数据卷示例" aria-label="Permalink to &quot;1.3 数据卷示例&quot;">​</a></h2><h3 id="_1、创建一个命名的数据卷" tabindex="-1">1、创建一个命名的数据卷 <a class="header-anchor" href="#_1、创建一个命名的数据卷" aria-label="Permalink to &quot;1、创建一个命名的数据卷&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker volume create web_data</span></span>
<span class="line"><span style="color:#B392F0;">web_data</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker volume create web_data</span></span>
<span class="line"><span style="color:#6F42C1;">web_data</span></span></code></pre></div><h3 id="_2、修改数据卷内文件内容" tabindex="-1">2、修改数据卷内文件内容 <a class="header-anchor" href="#_2、修改数据卷内文件内容" aria-label="Permalink to &quot;2、修改数据卷内文件内容&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker volume inspect web_data</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;CreatedAt&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2024-05-29T19:04:36+08:00&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Driver&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;local&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Labels&quot;</span><span style="color:#E1E4E8;">: null,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Mountpoint&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;/var/lib/docker/volumes/web_data/_data&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;web_data&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Options&quot;</span><span style="color:#E1E4E8;">: null,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Scope&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;local&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;">#这里的/var/lib/docker/volumes/web_data/_data就是数据卷在宿主机上的路径。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# echo </span><span style="color:#9ECBFF;">&quot;nginx test&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> /var/lib/docker/volumes/web_data/_data/index.html</span></span>
<span class="line"><span style="color:#6A737D;">#直接在宿主机上通过找到的路径修改数据卷内的文件。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker volume inspect web_data</span></span>
<span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;CreatedAt&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2024-05-29T19:04:36+08:00&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Driver&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;local&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Labels&quot;</span><span style="color:#24292E;">: null,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Mountpoint&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;/var/lib/docker/volumes/web_data/_data&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;web_data&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Options&quot;</span><span style="color:#24292E;">: null,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Scope&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;local&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">#这里的/var/lib/docker/volumes/web_data/_data就是数据卷在宿主机上的路径。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# echo </span><span style="color:#032F62;">&quot;nginx test&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> /var/lib/docker/volumes/web_data/_data/index.html</span></span>
<span class="line"><span style="color:#6A737D;">#直接在宿主机上通过找到的路径修改数据卷内的文件。</span></span></code></pre></div><h3 id="_3、启动两个容器并验证数据共享" tabindex="-1">3、启动两个容器并验证数据共享 <a class="header-anchor" href="#_3、启动两个容器并验证数据共享" aria-label="Permalink to &quot;3、启动两个容器并验证数据共享&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker run -itd --name nginx_v1 -v web_data:/usr/share/nginx/html -p 8085:80 nginx</span></span>
<span class="line"><span style="color:#B392F0;">73a584b4345b6bb05f99e153f5a92e1aaaf14b183ffb2173cd4238e1bd4edf60</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker run -itd --name nginx_v2 -v web_data:/usr/share/nginx/html -p 8086:80 nginx</span></span>
<span class="line"><span style="color:#B392F0;">5ce93af52b15d0f905fb749c483138f7e3247995186b9696709b3bd166bc10f6</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# curl -s 192.168.112.60:8085</span></span>
<span class="line"><span style="color:#B392F0;">nginx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# curl -s 192.168.112.60:8086</span></span>
<span class="line"><span style="color:#B392F0;">nginx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker run -itd --name nginx_v1 -v web_data:/usr/share/nginx/html -p 8085:80 nginx</span></span>
<span class="line"><span style="color:#6F42C1;">73a584b4345b6bb05f99e153f5a92e1aaaf14b183ffb2173cd4238e1bd4edf60</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker run -itd --name nginx_v2 -v web_data:/usr/share/nginx/html -p 8086:80 nginx</span></span>
<span class="line"><span style="color:#6F42C1;">5ce93af52b15d0f905fb749c483138f7e3247995186b9696709b3bd166bc10f6</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# curl -s 192.168.112.60:8085</span></span>
<span class="line"><span style="color:#6F42C1;">nginx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# curl -s 192.168.112.60:8086</span></span>
<span class="line"><span style="color:#6F42C1;">nginx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span></code></pre></div><blockquote><p>挂载在了相同宿主机目录到容器内的<code>/usr/share/nginx/html</code>路径，同时映射了不同的端口以区分访问。</p><p>可以看到数据内容是可以共享的，都显示<code>nginx test</code></p></blockquote><h3 id="_4、宿主机与容器间的实时同步" tabindex="-1">4、宿主机与容器间的实时同步 <a class="header-anchor" href="#_4、宿主机与容器间的实时同步" aria-label="Permalink to &quot;4、宿主机与容器间的实时同步&quot;">​</a></h3><h4 id="_4-1、进入容器内部修改数据测试同步" tabindex="-1">4.1、进入容器内部修改数据测试同步 <a class="header-anchor" href="#_4-1、进入容器内部修改数据测试同步" aria-label="Permalink to &quot;4.1、进入容器内部修改数据测试同步&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker exec -it nginx_v1 /bin/bash</span></span>
<span class="line"><span style="color:#B392F0;">root@73a584b4345b:/#</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;nginx test write !&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/share/nginx/html/index.html</span></span>
<span class="line"><span style="color:#B392F0;">root@73a584b4345b:/#</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exit</span></span>
<span class="line"><span style="color:#79B8FF;">exit</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# curl -s 192.168.112.60:8085</span></span>
<span class="line"><span style="color:#B392F0;">nginx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">write</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# curl -s 192.168.112.60:8086</span></span>
<span class="line"><span style="color:#B392F0;">nginx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">write</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker exec -it nginx_v1 /bin/bash</span></span>
<span class="line"><span style="color:#6F42C1;">root@73a584b4345b:/#</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;nginx test write !&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/share/nginx/html/index.html</span></span>
<span class="line"><span style="color:#6F42C1;">root@73a584b4345b:/#</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exit</span></span>
<span class="line"><span style="color:#005CC5;">exit</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# curl -s 192.168.112.60:8085</span></span>
<span class="line"><span style="color:#6F42C1;">nginx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">write</span><span style="color:#24292E;"> </span><span style="color:#032F62;">!</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# curl -s 192.168.112.60:8086</span></span>
<span class="line"><span style="color:#6F42C1;">nginx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">write</span><span style="color:#24292E;"> </span><span style="color:#032F62;">!</span></span></code></pre></div><h4 id="_4-2、宿主机修改数据测试同步" tabindex="-1">4.2、宿主机修改数据测试同步 <a class="header-anchor" href="#_4-2、宿主机修改数据测试同步" aria-label="Permalink to &quot;4.2、宿主机修改数据测试同步&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# echo </span><span style="color:#9ECBFF;">&quot;nginx test write twice&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> /var/lib/docker/volumes/web_data/_data/index.html</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# curl -s 192.168.112.60:8085                                                             nginx test write twice</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# curl -s 192.168.112.60:8086                                                           nginx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# echo </span><span style="color:#032F62;">&quot;nginx test write twice&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> /var/lib/docker/volumes/web_data/_data/index.html</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# curl -s 192.168.112.60:8085                                                             nginx test write twice</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# curl -s 192.168.112.60:8086                                                           nginx</span></span></code></pre></div><h3 id="_5、删除容器验证数据持久性" tabindex="-1">5、删除容器验证数据持久性 <a class="header-anchor" href="#_5、删除容器验证数据持久性" aria-label="Permalink to &quot;5、删除容器验证数据持久性&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker rm -fv  </span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> ps </span><span style="color:#79B8FF;">-qa</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#B392F0;">5ce93af52b15</span></span>
<span class="line"><span style="color:#B392F0;">73a584b4345b</span></span>
<span class="line"><span style="color:#6A737D;">#这是删除所有容器的命令针对删除nginx_v1以及nginx_v2的命令如下：</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-fv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx_v1</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-fv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx_v2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# cat /var/lib/docker/volumes/web_data/_data/index.html</span></span>
<span class="line"><span style="color:#B392F0;">nginx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">write</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">twice</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker rm -fv  </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">docker</span><span style="color:#032F62;"> ps </span><span style="color:#005CC5;">-qa</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#6F42C1;">5ce93af52b15</span></span>
<span class="line"><span style="color:#6F42C1;">73a584b4345b</span></span>
<span class="line"><span style="color:#6A737D;">#这是删除所有容器的命令针对删除nginx_v1以及nginx_v2的命令如下：</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-fv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx_v1</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-fv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx_v2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# cat /var/lib/docker/volumes/web_data/_data/index.html</span></span>
<span class="line"><span style="color:#6F42C1;">nginx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">write</span><span style="color:#24292E;"> </span><span style="color:#032F62;">twice</span></span></code></pre></div><blockquote><p>可以看到即使所有使用该数据卷的容器都被删除，数据卷本身及其数据依然会被保留</p><p>直到显式执行 <code>docker volume rm</code> 命令来删除它。</p></blockquote><h3 id="_6、只读挂载" tabindex="-1">6、只读挂载 <a class="header-anchor" href="#_6、只读挂载" aria-label="Permalink to &quot;6、只读挂载&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker run -itd --name nginx_v3 -v web_data:/usr/share/nginx/html/:ro -p 8087:80 nginx</span></span>
<span class="line"><span style="color:#B392F0;">64737fc7e6fc60e6d4f6203735afb464bc3cdbacbacb92372e3112d35a3d1be8</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker run -itd --name nginx_v4 -v web_data:/usr/share/nginx/html/:ro -p 8088:80 nginx</span></span>
<span class="line"><span style="color:#B392F0;">fbb5c0dc949b2fca4d9e39b392d535233dfa57b48f348c028d1518cebd7a3560</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker exec -it nginx_v3 /bin/bash</span></span>
<span class="line"><span style="color:#B392F0;">root@64737fc7e6fc:/#</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;test readonly&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/share/nginx/html/index.html</span></span>
<span class="line"><span style="color:#B392F0;">bash:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/share/nginx/html/index.html:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Read-only</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">system</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker run -itd --name nginx_v3 -v web_data:/usr/share/nginx/html/:ro -p 8087:80 nginx</span></span>
<span class="line"><span style="color:#6F42C1;">64737fc7e6fc60e6d4f6203735afb464bc3cdbacbacb92372e3112d35a3d1be8</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker run -itd --name nginx_v4 -v web_data:/usr/share/nginx/html/:ro -p 8088:80 nginx</span></span>
<span class="line"><span style="color:#6F42C1;">fbb5c0dc949b2fca4d9e39b392d535233dfa57b48f348c028d1518cebd7a3560</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker exec -it nginx_v3 /bin/bash</span></span>
<span class="line"><span style="color:#6F42C1;">root@64737fc7e6fc:/#</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;test readonly&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/share/nginx/html/index.html</span></span>
<span class="line"><span style="color:#6F42C1;">bash:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/share/nginx/html/index.html:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Read-only</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file</span><span style="color:#24292E;"> </span><span style="color:#032F62;">system</span></span></code></pre></div><blockquote><p>通过只读方式挂载以后，在容器内部是不允许修改数据的</p></blockquote><h1 id="_2-数据卷容器" tabindex="-1">2. 数据卷容器 <a class="header-anchor" href="#_2-数据卷容器" aria-label="Permalink to &quot;2. 数据卷容器&quot;">​</a></h1><h2 id="_2-1-概述" tabindex="-1">2.1 概述 <a class="header-anchor" href="#_2-1-概述" aria-label="Permalink to &quot;2.1 概述&quot;">​</a></h2><p>数据卷容器是Docker中管理数据卷的一种高级用法，它允许用户创建一个专门用于数据存储的容器，并将其数据卷挂载到其他容器中。</p><p>这种方式使得数据可以跨容器共享，同时保持数据的持久性和可移植性。</p><p>数据卷容器主要用于数据的持久化存储和跨容器共享，它本身并不运行任何实际的应用服务，而是作为一个存储媒介存在。</p><h2 id="_2-2-创建数据卷" tabindex="-1">2.2 创建数据卷 <a class="header-anchor" href="#_2-2-创建数据卷" aria-label="Permalink to &quot;2.2 创建数据卷&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker volume create my_volume</span></span>
<span class="line"><span style="color:#B392F0;">my_volume</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker volume create my_volume</span></span>
<span class="line"><span style="color:#6F42C1;">my_volume</span></span></code></pre></div><h2 id="_2-3-查看所有的数据卷" tabindex="-1">2.3 查看所有的数据卷 <a class="header-anchor" href="#_2-3-查看所有的数据卷" aria-label="Permalink to &quot;2.3 查看所有的数据卷&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker volume ls</span></span>
<span class="line"><span style="color:#B392F0;">DRIVER</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">VOLUME</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NAME</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">my_volume</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">mysql_data</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">web_data</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker volume ls</span></span>
<span class="line"><span style="color:#6F42C1;">DRIVER</span><span style="color:#24292E;">    </span><span style="color:#032F62;">VOLUME</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NAME</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;">     </span><span style="color:#032F62;">my_volume</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;">     </span><span style="color:#032F62;">mysql_data</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;">     </span><span style="color:#032F62;">web_data</span></span></code></pre></div><h2 id="_2-4-修改数据卷内文件内容" tabindex="-1">2.4 修改数据卷内文件内容 <a class="header-anchor" href="#_2-4-修改数据卷内文件内容" aria-label="Permalink to &quot;2.4 修改数据卷内文件内容&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# echo </span><span style="color:#9ECBFF;">&quot;my_volume_test&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> /var/lib/docker/volumes/my_volume/_data/index.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# echo </span><span style="color:#032F62;">&quot;my_volume_test&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> /var/lib/docker/volumes/my_volume/_data/index.html</span></span></code></pre></div><h2 id="_2-5-启动一个挂载数据卷的容器" tabindex="-1">2.5 启动一个挂载数据卷的容器 <a class="header-anchor" href="#_2-5-启动一个挂载数据卷的容器" aria-label="Permalink to &quot;2.5 启动一个挂载数据卷的容器&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker run -itd --name volume_v1 -v my_volume:/usr/share/nginx/html:ro -p 8089:80 nginx</span></span>
<span class="line"><span style="color:#B392F0;">c9cff2a314fef930aa570680068e40c280a53d0921613b60d926c9ffd185200b</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker run -itd --name volume_v1 -v my_volume:/usr/share/nginx/html:ro -p 8089:80 nginx</span></span>
<span class="line"><span style="color:#6F42C1;">c9cff2a314fef930aa570680068e40c280a53d0921613b60d926c9ffd185200b</span></span></code></pre></div><h2 id="_2-6-启动两个客户端容器" tabindex="-1">2.6 启动两个客户端容器 <a class="header-anchor" href="#_2-6-启动两个客户端容器" aria-label="Permalink to &quot;2.6 启动两个客户端容器&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker run -itd --name web1 -p 8090:80 --volumes-from volume_v1 nginx</span></span>
<span class="line"><span style="color:#B392F0;">c036bb587750c2232e7e1efe11b4b421e2c0be275a0aec6da953e670ba6d47b0</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker run -itd --name web2 -p 8091:80 --volumes-from volume_v1 nginx</span></span>
<span class="line"><span style="color:#B392F0;">9bff8f66a04d701b46f6e94d39664758e22fa4ab6140dd48a1ce0212bb59b941</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker run -itd --name web1 -p 8090:80 --volumes-from volume_v1 nginx</span></span>
<span class="line"><span style="color:#6F42C1;">c036bb587750c2232e7e1efe11b4b421e2c0be275a0aec6da953e670ba6d47b0</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker run -itd --name web2 -p 8091:80 --volumes-from volume_v1 nginx</span></span>
<span class="line"><span style="color:#6F42C1;">9bff8f66a04d701b46f6e94d39664758e22fa4ab6140dd48a1ce0212bb59b941</span></span></code></pre></div><h2 id="_2-7-访问测试" tabindex="-1">2.7 访问测试 <a class="header-anchor" href="#_2-7-访问测试" aria-label="Permalink to &quot;2.7 访问测试&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# curl -s 192.168.112.60:8089</span></span>
<span class="line"><span style="color:#B392F0;">my_volume_test</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# curl -s 192.168.112.60:8090</span></span>
<span class="line"><span style="color:#B392F0;">my_volume_test</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# curl -s 192.168.112.60:8091</span></span>
<span class="line"><span style="color:#B392F0;">my_volume_test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# curl -s 192.168.112.60:8089</span></span>
<span class="line"><span style="color:#6F42C1;">my_volume_test</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# curl -s 192.168.112.60:8090</span></span>
<span class="line"><span style="color:#6F42C1;">my_volume_test</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# curl -s 192.168.112.60:8091</span></span>
<span class="line"><span style="color:#6F42C1;">my_volume_test</span></span></code></pre></div><h2 id="_2-8-停止了卷容器创建新容器也可以引用他" tabindex="-1">2.8 停止了卷容器创建新容器也可以引用他 <a class="header-anchor" href="#_2-8-停止了卷容器创建新容器也可以引用他" aria-label="Permalink to &quot;2.8 停止了卷容器创建新容器也可以引用他&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker stop volume_v1</span></span>
<span class="line"><span style="color:#B392F0;">volume_v1</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker ps -a</span></span>
<span class="line"><span style="color:#B392F0;">CONTAINER</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ID</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">IMAGE</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">COMMAND</span><span style="color:#E1E4E8;">                   </span><span style="color:#9ECBFF;">CREATED</span><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">PORTS</span><span style="color:#E1E4E8;">                                   </span><span style="color:#9ECBFF;">NAMES</span></span>
<span class="line"><span style="color:#B392F0;">9bff8f66a04d</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">nginx</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;/docker-entrypoint.…&quot;</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">minutes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ago</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Up</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">minutes</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">0.0</span><span style="color:#9ECBFF;">.0.0:8091</span><span style="color:#E1E4E8;">-</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">80/tcp,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:::8091</span><span style="color:#E1E4E8;">-</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">80/tcp</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">web2</span></span>
<span class="line"><span style="color:#B392F0;">c036bb587750</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">nginx</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;/docker-entrypoint.…&quot;</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">minutes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ago</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Up</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">minutes</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">0.0</span><span style="color:#9ECBFF;">.0.0:8090</span><span style="color:#E1E4E8;">-</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">80/tcp,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:::8090</span><span style="color:#E1E4E8;">-</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">80/tcp</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">web1</span></span>
<span class="line"><span style="color:#B392F0;">c9cff2a314fe</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">nginx</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;/docker-entrypoint.…&quot;</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">minutes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ago</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Exited</span><span style="color:#E1E4E8;"> (0) 4 seconds ago                                           volume_v1</span></span>
<span class="line"><span style="color:#6A737D;">#停止卷容器volume_v1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker run -itd --name web3 -p 8092:80 --volumes-from volume_v1 nginx</span></span>
<span class="line"><span style="color:#B392F0;">7e8a3e82e6aacf32e5194d4a47d827f718685e0811ffc478b09a6e1748fd997f</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# curl -s 192.168.112.60:8092</span></span>
<span class="line"><span style="color:#B392F0;">my_volume_test</span></span>
<span class="line"><span style="color:#6A737D;">#可以获取my_volume数据卷的内容</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker stop volume_v1</span></span>
<span class="line"><span style="color:#6F42C1;">volume_v1</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker ps -a</span></span>
<span class="line"><span style="color:#6F42C1;">CONTAINER</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ID</span><span style="color:#24292E;">   </span><span style="color:#032F62;">IMAGE</span><span style="color:#24292E;">     </span><span style="color:#032F62;">COMMAND</span><span style="color:#24292E;">                   </span><span style="color:#032F62;">CREATED</span><span style="color:#24292E;">         </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">PORTS</span><span style="color:#24292E;">                                   </span><span style="color:#032F62;">NAMES</span></span>
<span class="line"><span style="color:#6F42C1;">9bff8f66a04d</span><span style="color:#24292E;">   </span><span style="color:#032F62;">nginx</span><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;/docker-entrypoint.…&quot;</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#032F62;">minutes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ago</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Up</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#032F62;">minutes</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">0.0</span><span style="color:#032F62;">.0.0:8091</span><span style="color:#24292E;">-</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">80/tcp,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:::8091</span><span style="color:#24292E;">-</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">80/tcp</span><span style="color:#24292E;">   </span><span style="color:#032F62;">web2</span></span>
<span class="line"><span style="color:#6F42C1;">c036bb587750</span><span style="color:#24292E;">   </span><span style="color:#032F62;">nginx</span><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;/docker-entrypoint.…&quot;</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#032F62;">minutes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ago</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Up</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#032F62;">minutes</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">0.0</span><span style="color:#032F62;">.0.0:8090</span><span style="color:#24292E;">-</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">80/tcp,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:::8090</span><span style="color:#24292E;">-</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">80/tcp</span><span style="color:#24292E;">   </span><span style="color:#032F62;">web1</span></span>
<span class="line"><span style="color:#6F42C1;">c9cff2a314fe</span><span style="color:#24292E;">   </span><span style="color:#032F62;">nginx</span><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;/docker-entrypoint.…&quot;</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#032F62;">minutes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ago</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Exited</span><span style="color:#24292E;"> (0) 4 seconds ago                                           volume_v1</span></span>
<span class="line"><span style="color:#6A737D;">#停止卷容器volume_v1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker run -itd --name web3 -p 8092:80 --volumes-from volume_v1 nginx</span></span>
<span class="line"><span style="color:#6F42C1;">7e8a3e82e6aacf32e5194d4a47d827f718685e0811ffc478b09a6e1748fd997f</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# curl -s 192.168.112.60:8092</span></span>
<span class="line"><span style="color:#6F42C1;">my_volume_test</span></span>
<span class="line"><span style="color:#6A737D;">#可以获取my_volume数据卷的内容</span></span></code></pre></div><h2 id="_2-9-删除卷容器后无法依据卷容器创建新容器" tabindex="-1">2.9 删除卷容器后无法依据卷容器创建新容器 <a class="header-anchor" href="#_2-9-删除卷容器后无法依据卷容器创建新容器" aria-label="Permalink to &quot;2.9 删除卷容器后无法依据卷容器创建新容器&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker rm -f volume_v1</span></span>
<span class="line"><span style="color:#B392F0;">volume_v1</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker run -itd --name web4 -p 8093:80 --volumes-from volume_v1 nginx</span></span>
<span class="line"><span style="color:#B392F0;">docker:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Error</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">daemon:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">No</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">such</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">container:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volume_v1.</span></span>
<span class="line"><span style="color:#B392F0;">See</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;docker run --help&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# curl 192.168.112.60:8089</span></span>
<span class="line"><span style="color:#B392F0;">curl:</span><span style="color:#E1E4E8;"> (7) Failed connect to 192.168.112.60:8089; </span><span style="color:#B392F0;">拒绝连接</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# curl 192.168.112.60:8090</span></span>
<span class="line"><span style="color:#B392F0;">my_volume_test</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# curl 192.168.112.60:8091</span></span>
<span class="line"><span style="color:#B392F0;">my_volume_test</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# curl 192.168.112.60:8092</span></span>
<span class="line"><span style="color:#B392F0;">my_volume_test</span></span>
<span class="line"><span style="color:#6A737D;">#之前创建好的容器不会有任何影响</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker rm -f volume_v1</span></span>
<span class="line"><span style="color:#6F42C1;">volume_v1</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker run -itd --name web4 -p 8093:80 --volumes-from volume_v1 nginx</span></span>
<span class="line"><span style="color:#6F42C1;">docker:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Error</span><span style="color:#24292E;"> </span><span style="color:#032F62;">response</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">daemon:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">No</span><span style="color:#24292E;"> </span><span style="color:#032F62;">such</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume_v1.</span></span>
<span class="line"><span style="color:#6F42C1;">See</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;docker run --help&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# curl 192.168.112.60:8089</span></span>
<span class="line"><span style="color:#6F42C1;">curl:</span><span style="color:#24292E;"> (7) Failed connect to 192.168.112.60:8089; </span><span style="color:#6F42C1;">拒绝连接</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# curl 192.168.112.60:8090</span></span>
<span class="line"><span style="color:#6F42C1;">my_volume_test</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# curl 192.168.112.60:8091</span></span>
<span class="line"><span style="color:#6F42C1;">my_volume_test</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# curl 192.168.112.60:8092</span></span>
<span class="line"><span style="color:#6F42C1;">my_volume_test</span></span>
<span class="line"><span style="color:#6A737D;">#之前创建好的容器不会有任何影响</span></span></code></pre></div><h1 id="_3-日志清理" tabindex="-1">3. 日志清理 <a class="header-anchor" href="#_3-日志清理" aria-label="Permalink to &quot;3. 日志清理&quot;">​</a></h1><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;input log file  size &#39;</span><span style="color:#FFAB70;">$1</span></span>
<span class="line"><span style="color:#E1E4E8;">default</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#F97583;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">$1</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">  default</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">$1</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">max</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">expr</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">\\*</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">$default</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;current set file size &#39;</span><span style="color:#E1E4E8;">$max</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> file </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\` </span><span style="color:#B392F0;">ls</span><span style="color:#9ECBFF;"> /data/docker/containers/</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">-json.log \`</span></span>
<span class="line"><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">#echo $file</span></span>
<span class="line"><span style="color:#E1E4E8;">  s</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">du</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-k</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">$file</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">awk</span><span style="color:#9ECBFF;"> &#39;{print $1}&#39;\`</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># echo $s</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ $s </span><span style="color:#F97583;">-gt</span><span style="color:#E1E4E8;"> $max ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;remove&#39;</span><span style="color:#E1E4E8;">$file</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">truncate</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> $file</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;removed&#39;</span><span style="color:#E1E4E8;">$file</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">fi</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;input log file  size &#39;</span><span style="color:#E36209;">$1</span></span>
<span class="line"><span style="color:#24292E;">default</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ </span><span style="color:#D73A49;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">$1</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">  default</span><span style="color:#D73A49;">=</span><span style="color:#E36209;">$1</span></span>
<span class="line"><span style="color:#D73A49;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">max</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">expr</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">1024</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">\\*</span><span style="color:#032F62;"> </span><span style="color:#24292E;">$default</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;current set file size &#39;</span><span style="color:#24292E;">$max</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> file </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\` </span><span style="color:#6F42C1;">ls</span><span style="color:#032F62;"> /data/docker/containers/</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">-json.log \`</span></span>
<span class="line"><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">#echo $file</span></span>
<span class="line"><span style="color:#24292E;">  s</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">du</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-k</span><span style="color:#032F62;"> </span><span style="color:#24292E;">$file</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">awk</span><span style="color:#032F62;"> &#39;{print $1}&#39;\`</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># echo $s</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ $s </span><span style="color:#D73A49;">-gt</span><span style="color:#24292E;"> $max ]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;remove&#39;</span><span style="color:#24292E;">$file</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">truncate</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> $file</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;removed&#39;</span><span style="color:#24292E;">$file</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">fi</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div>`,55),e=[p];function t(c,r,y,E,i,F){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{h as __pageData,u as default};
