import{_ as a,o as e,c as t,R as o}from"./chunks/framework.zUbWieqp.js";const g=JSON.parse('{"title":"1. 蓝绿发布、A/B 测试和金丝雀发布","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/资源对象/5-发布优缺点.md","filePath":"guide/container/k8s/资源对象/5-发布优缺点.md","lastUpdated":1726652211000}'),i={name:"guide/container/k8s/资源对象/5-发布优缺点.md"},n=o('<h1 id="_1-蓝绿发布、a-b-测试和金丝雀发布" tabindex="-1">1. 蓝绿发布、A/B 测试和金丝雀发布 <a class="header-anchor" href="#_1-蓝绿发布、a-b-测试和金丝雀发布" aria-label="Permalink to &quot;1. 蓝绿发布、A/B 测试和金丝雀发布&quot;">​</a></h1><h2 id="_1-1-蓝绿发布" tabindex="-1">1.1 蓝绿发布 <a class="header-anchor" href="#_1-1-蓝绿发布" aria-label="Permalink to &quot;1.1 蓝绿发布&quot;">​</a></h2><p>蓝绿发布需要对服务的新版本进行冗余部署，一般新版本的机器规格和数量与旧版本保持一致，相当于该服务有两套完全相同的部署环境，只不过此时只有旧版本在对外提供服务，新版本作为热备。当服务进行版本升级时，我们只需将流量全部切换到新版本即可，旧版本作为热备。由于冗余部署的缘故，所以不必担心新版本的资源不够。如果新版本上线后出现严重的程序 BUG，那么我们只需将流量全部切回至旧版本，大大缩短故障恢复的时间。待新版本完成 BUG 修复并重新部署之后，再将旧版本的流量切换到新版本。</p><p>蓝绿发布通过使用额外的机器资源来解决服务发布期间的不可用问题，当服务新版本出现故障时，也可以快速将流量切回旧版本。</p><p>如图，某服务旧版本为 v1，对新版本 v2 进行冗余部署。版本升级时，将现有流量全部切换为新版本 v2。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202409181455097.png" alt="image-20240918145526721"></p><p>当新版本 v2 存在程序 BUG 或者发生故障时，可以快速切回旧版本 v1</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202409181456992.png" alt="image-20240918145600848"></p><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><p>1、部署结构简单，运维方便；</p><p>2、服务升级过程操作简单，周期短。</p><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><p>1、资源冗余，需要部署两套生产环境；</p><p>2、新版本故障影响范围大。</p><h2 id="_1-2-a-b-测试" tabindex="-1">1.2 A/B 测试 <a class="header-anchor" href="#_1-2-a-b-测试" aria-label="Permalink to &quot;1.2 A/B 测试&quot;">​</a></h2><p>相比于蓝绿发布的流量切换方式，A/B 测试基于用户请求的元信息将流量路由到新版本，这是一种基于请求内容匹配的灰度发布策略。只有匹配特定规则的请求才会被引流到新版本，常见的做法包括基于 Http Header 和 Cookie。基于 Http Header 方式的例子，例如 User-Agent 的值为 Android 的请求 （来自安卓系统的请求）可以访问新版本，其他系统仍然访问旧版本。基于 Cookie 方式的例子，Cookie 中通常包含具有业务语义的用户信息，例如普通用户可以访问新版本，VIP 用户仍然访问旧版本。</p><p>如图，某服务当前版本为 v1，现在新版本 v2 要上线。希望安卓用户可以尝鲜新功能，其他系统用户保持不变</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202409181458971.png" alt="image-20240918145808650"></p><p>通过在监控平台观察旧版本与新版本的成功率、RT 对比，当新版本整体服务预期后，即可将所有请求切换到新版本 v2，最后为了节省资源，可以逐步下线到旧版本 v1。</p><h3 id="优点-1" tabindex="-1">优点: <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点:&quot;">​</a></h3><p>1、可以对特定的请求或者用户提供服务新版本，新版本故障影响范围小；</p><p>2、需要构建完备的监控平台，用于对比不同版本之间请求状态的差异。</p><h3 id="缺点-1" tabindex="-1">缺点: <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点:&quot;">​</a></h3><p>1、仍然存在资源冗余，因为无法准确评估请求容量；</p><p>2、发布周期长</p><h2 id="_3-金丝雀发布-灰度发布" tabindex="-1">3. 金丝雀发布(灰度发布) <a class="header-anchor" href="#_3-金丝雀发布-灰度发布" aria-label="Permalink to &quot;3. 金丝雀发布(灰度发布)&quot;">​</a></h2><p>在蓝绿发布中，由于存在流量整体切换，所以需要按照原服务占用的机器规模为新版本克隆一套环境，相当于要求原来1倍的机器资源。在 A/B 测试中，只要能够预估中匹配特定规则的请求规模，我们可以按需为新版本分配额外的机器资源。相比于前两种发布策略，金丝雀发布的思想则是将少量的请求引流到新版本上，因此部署新版本服务只需极小数的机器。验证新版本符合预期后，逐步调整流量权重比例，使得流量慢慢从老版本迁移至新版本，期间可以根据设置的流量比例，对新版本服务进行扩容，同时对老版本服务进行缩容，使得底层资源得到最大化利用。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202409181507489.png" alt="image-20240918150726968"></p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202409181508804.png" alt="image-20240918150800351"></p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202409181508158.png" alt="image-20240918150842921"></p><h3 id="优点-2" tabindex="-1">优点: <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点:&quot;">​</a></h3><p>1、按比例将流量无差别地导向新版本，新版本故障影响范围小；</p><p>2、发布期间逐步对新版本扩容，同时对老版本缩容，资源利用率高。</p><h3 id="缺点-2" tabindex="-1">缺点: <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点:&quot;">​</a></h3><p>1、流量无差别地导向新版本，可能会影响重要用户的体验；</p><p>2、发布周期长。</p>',36),s=[n];function r(p,h,c,l,d,m){return e(),t("div",null,s)}const u=a(i,[["render",r]]);export{g as __pageData,u as default};
