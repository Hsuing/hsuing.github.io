import{_ as t,o as e,c as s,R as a}from"./chunks/framework.zUbWieqp.js";const E=JSON.parse('{"title":"1.etcd内存问题","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Database/etcd/6-config.md","filePath":"guide/Database/etcd/6-config.md","lastUpdated":1703141608000}'),n={name:"guide/Database/etcd/6-config.md"},l=a(`<p>python -m http.server 8686</p><h1 id="_1-etcd内存问题" tabindex="-1">1.etcd内存问题 <a class="header-anchor" href="#_1-etcd内存问题" aria-label="Permalink to &quot;1.etcd内存问题&quot;">​</a></h1><ol><li>内存尽量最够大</li><li>etcd 内存使用是使用内存的两倍。一份是内存，一份是cache。比如1G的数据会使用1G的内存，1G的cache</li><li>etcd 数据删除，只会缓慢的删除数据，不会立马删除，尤其是cache</li><li>etcd所在的操作系统的内存使用完，etcd直接不可用，不管在怎么压缩处理，一直不可用</li></ol><ul><li>etcd 内存与磁盘自动整理 在配置文件里面加入这两个配置参数</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 每小时整理一次</span></span>
<span class="line"><span style="color:#e1e4e8;">auto-compaction-retention: &quot;1&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"># 整理的类型</span></span>
<span class="line"><span style="color:#e1e4e8;">auto-compaction-mode: periodic</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 每小时整理一次</span></span>
<span class="line"><span style="color:#24292e;">auto-compaction-retention: &quot;1&quot;</span></span>
<span class="line"><span style="color:#24292e;"># 整理的类型</span></span>
<span class="line"><span style="color:#24292e;">auto-compaction-mode: periodic</span></span></code></pre></div><ul><li>内存报警，建议是使用内存达到50%就报警，防止异常情况造成内存暴增</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">quota-backend-bytes: 15032385536</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">quota-backend-bytes: 15032385536</span></span></code></pre></div><ul><li>etcd 快照配置 在配置文件里面加入这两个配置参数</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 配置snapshots保留份数</span></span>
<span class="line"><span style="color:#e1e4e8;">max-snapshots: 5</span></span>
<span class="line"><span style="color:#e1e4e8;"># 配置 wals 保留份数</span></span>
<span class="line"><span style="color:#e1e4e8;">max-wals: 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 配置snapshots保留份数</span></span>
<span class="line"><span style="color:#24292e;">max-snapshots: 5</span></span>
<span class="line"><span style="color:#24292e;"># 配置 wals 保留份数</span></span>
<span class="line"><span style="color:#24292e;">max-wals: 5</span></span></code></pre></div><h1 id="配置文件参数介绍" tabindex="-1"><strong>配置文件参数介绍</strong> <a class="header-anchor" href="#配置文件参数介绍" aria-label="Permalink to &quot;**配置文件参数介绍**&quot;">​</a></h1><table><thead><tr><th>参数</th><th>说明</th><th>配置</th></tr></thead><tbody><tr><td>ETCD_NAME</td><td>名字</td><td>ETCD_NAME=node-1</td></tr><tr><td>ETCD_DATA_DIR</td><td>数据位置</td><td>ETCD_DATA_DIR=/var/lib/etcd</td></tr><tr><td>ETCD_LISTEN_CLIENT_URLS</td><td>监听客户端地址</td><td>ETCD_LISTEN_CLIENT_URLS=<a href="http://0.0.0.0:2379" target="_blank" rel="noreferrer">http://0.0.0.0:2379</a></td></tr><tr><td>ETCD_ADVERTISE_CLIENT_URLS</td><td>通知 客户端地址</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="集群配置" tabindex="-1">集群配置 <a class="header-anchor" href="#集群配置" aria-label="Permalink to &quot;集群配置&quot;">​</a></h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>--name</td><td>etcd集群中的节点名，这里可以随意，可区分且不重复就行</td></tr><tr><td>--listen-peer-urls</td><td>监听的用于节点之间通信的url，可监听多个，集群内部将通过这些url进行数据交互(如选举，数据同步等)</td></tr><tr><td>--initial-advertise-peer-urls</td><td>建议用于节点之间通信的url，节点间将以该值进行通信</td></tr><tr><td>--listen-client-urls</td><td>监听的用于客户端通信的url,同样可以监听多个</td></tr><tr><td>--advertise-client-urls</td><td>建议使用的客户端通信url,该值用于etcd代理或etcd成员与etcd节点通信</td></tr><tr><td>--initial-cluster-token etcd-cluster-1</td><td>节点的token值，设置该值后集群将生成唯一id,并为每个节点也生成唯一id,当使用相同配置文件再启动一个集群时，只要该token值不一样</td></tr><tr><td>--initial-cluster</td><td>也就是集群中所有的initial-advertise-peer-urls 的合集</td></tr><tr><td>--initial-cluster-state new</td><td>新建集群的标志，初始化状态使用 new，建立之后改此值为 existing</td></tr><tr><td></td><td></td></tr><tr><td>--snapshot-count</td><td>指定有多少事务（transaction）被提交时，触发截取快照保存到磁盘</td></tr><tr><td>--heartbeat-interval</td><td>leader 多久发送一次心跳到 followers。默认值是 100ms</td></tr><tr><td>--eletion-timeout</td><td>重新投票的超时时间，如果 follow 在该时间间隔没有收到心跳包，会触发重新投票，默认为 1000 ms</td></tr></tbody></table><p>--name：方便理解的节点名称，默认为 default，在集群中应该保持唯一，可以使用 hostname</p><p>--data-dir：服务运行数据保存的路径，默认为 \${name}.etcd</p><p>--snapshot-count：指定有多少事务（transaction）被提交时，触发截取快照保存到磁盘</p><p>--heartbeat-interval：leader 多久发送一次心跳到 followers。默认值是 100ms</p><p>--eletion-timeout：重新投票的超时时间，如果 follow 在该时间间隔没有收到心跳包，会触发重新投票，默认为 1000 ms</p><p>--listen-peer-urls：和集群内其他节点通信的地址， <a href="http://ip:2380" target="_blank" rel="noreferrer">http://ip:2380</a>，如果有多个，使用逗号分隔。需要所有节点都能够访问，所以不要使用 localhost！</p><p>--listen-client-urls：节点与客户端通信的地址，比如 <a href="http://ip:2379" target="_blank" rel="noreferrer">http://ip:2379</a>,<a href="http://127.0.0.1:2379" target="_blank" rel="noreferrer">http://127.0.0.1:2379</a>，客户端会连接到这里和 etcd 交互</p><p>--advertise-client-urls：对外通告的该节点客户端监听地址，<a href="http://ip:2379" target="_blank" rel="noreferrer">http://ip:2379</a>，这个值会通知集群中其他节点</p><p>--initial-advertise-peer-urls：节点与其他节点通信的地址，会通告给集群的其他成员。这个地址用来传输集群数据。因此这个地址必须是可以被集群中所有的成员访问<a href="http://ip:2380" target="_blank" rel="noreferrer">http://ip:2380</a></p><p>--initial-cluster：集群中所有节点的信息，格式为 node1=<a href="http://ip1:2380" target="_blank" rel="noreferrer">http://ip1:2380</a>,node2=<a href="http://ip2:2380" target="_blank" rel="noreferrer">http://ip2:2380</a>,…。注意：这里的 node1 是节点的 --name 指定的名字；后面的 ip1:2380 是 --initial-advertise-peer-urls 指定的值</p><p>--initial-cluster-state：新建集群的时候，这个值为 new；假如已经存在的集群，这个值为 existing</p><p>--initial-cluster-token：创建集群的 token，这个值每个集群保持唯一。这样的话，如果你要重新创建集群，即使配置和之前一样，也会再次生成新的集群和节点 uuid；否则会导致多个集群之间的冲突，造成未知的错误</p><p>所有以--initial 开头的配置都是在 bootstrap（引导） 集群的时候才会用到，后续节点重启时会被忽略。</p><h2 id="ssl配置" tabindex="-1">ssl配置 <a class="header-anchor" href="#ssl配置" aria-label="Permalink to &quot;ssl配置&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#[security]</span></span>
<span class="line"><span style="color:#e1e4e8;">#如果要求SSL连接etcd的话，把下面的配置启用，并修改文件路径</span></span>
<span class="line"><span style="color:#e1e4e8;">ETCD_CERT_FILE=&quot;/etc/ssl/client.pem&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">ETCD_KEY_FILE=&quot;/etc/ssl/client-key.pem&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">ETCD_CLIENT_CERT_AUTH=&quot;true&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">ETCD_TRUSTED_CA_FILE=&quot;/etc/ssl/ca.pem&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">ETCD_AUTO_TLS=&quot;true&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">ETCD_PEER_CERT_FILE=&quot;/etc/ssl/member.pem&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">ETCD_PEER_KEY_FILE=&quot;/etc/ssl/member-key.pem&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">ETCD_PEER_CLIENT_CERT_AUTH=&quot;false&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">ETCD_PEER_TRUSTED_CA_FILE=&quot;/etc/ssl/ca.pem&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">ETCD_PEER_AUTO_TLS=&quot;true&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#[security]</span></span>
<span class="line"><span style="color:#24292e;">#如果要求SSL连接etcd的话，把下面的配置启用，并修改文件路径</span></span>
<span class="line"><span style="color:#24292e;">ETCD_CERT_FILE=&quot;/etc/ssl/client.pem&quot;</span></span>
<span class="line"><span style="color:#24292e;">ETCD_KEY_FILE=&quot;/etc/ssl/client-key.pem&quot;</span></span>
<span class="line"><span style="color:#24292e;">ETCD_CLIENT_CERT_AUTH=&quot;true&quot;</span></span>
<span class="line"><span style="color:#24292e;">ETCD_TRUSTED_CA_FILE=&quot;/etc/ssl/ca.pem&quot;</span></span>
<span class="line"><span style="color:#24292e;">ETCD_AUTO_TLS=&quot;true&quot;</span></span>
<span class="line"><span style="color:#24292e;">ETCD_PEER_CERT_FILE=&quot;/etc/ssl/member.pem&quot;</span></span>
<span class="line"><span style="color:#24292e;">ETCD_PEER_KEY_FILE=&quot;/etc/ssl/member-key.pem&quot;</span></span>
<span class="line"><span style="color:#24292e;">ETCD_PEER_CLIENT_CERT_AUTH=&quot;false&quot;</span></span>
<span class="line"><span style="color:#24292e;">ETCD_PEER_TRUSTED_CA_FILE=&quot;/etc/ssl/ca.pem&quot;</span></span>
<span class="line"><span style="color:#24292e;">ETCD_PEER_AUTO_TLS=&quot;true&quot;</span></span></code></pre></div><p>默认配置运行etcd，监听本地的2379端口，用于与client端交互，监听2380用于etcd内部交互</p>`,29),p=[l];function o(r,c,i,d,u,_){return e(),s("div",null,p)}const T=t(n,[["render",o]]);export{E as __pageData,T as default};
