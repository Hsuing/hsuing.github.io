import{_ as s,o as a,c as e,R as n,k as t}from"./chunks/framework.zUbWieqp.js";const A=JSON.parse('{"title":"Jenkins发布成功后自动创建Tag","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Linux/Jenkins/plus/7-tag.md","filePath":"guide/Linux/Jenkins/plus/7-tag.md","lastUpdated":1720533756000}'),p={name:"guide/Linux/Jenkins/plus/7-tag.md"},i=n('<p>因公司《程序包版本管理规范》文件中规定，每一次提测前需创建Tag 作为测试版本留痕，即现在提测单中的测试版本号，Tag名称（测试版本号）名称如下：</p><p>SIT-20191028-01</p><p>UAT-20191028-01</p><p>可以看出，Tag 名称分为3部分：</p><p>第一部分：SIT/UAT 代表测试类型</p><p>第二部分：代表提交测试日期</p><p>第三部分：当日提交测试次数</p><p>现在将如何在Jenkins上每一次构建类似的构建编号，与测试版本一致</p><h4 id="_02-jenkins-配置步骤" tabindex="-1">02 Jenkins 配置步骤 <a class="header-anchor" href="#_02-jenkins-配置步骤" aria-label="Permalink to &quot;02 Jenkins 配置步骤&quot;">​</a></h4><p><strong>第一步：安装Version Number Plugin插件</strong>，<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fplugins.jenkins.io%2Fversionnumber" target="_blank" rel="noreferrer">Version Number Plugin 插件下载地址</a></p><p><strong>第二步：点击构建环境配置</strong></p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406242125001.png" alt=""></p><p>这里的配置说明如下：</p><p>1、勾选Create a formatted version number</p><p>2、Environment Variable name：填写为BUILD_VERSION</p><p>3、Version Number Format String：这里指的是构建版本号的格式，这里设置如下：</p>',16),o=t("p",{BUILDS_TODAY:""},"如果是SIT提测分支：SIT-${BUILD_DATE_FORMATTED,''yyyyMMdd''}-0$",-1),r=t("p",{BUILDS_TODAY:""},"如果是UAT提测分支：UAT-${BUILD_DATE_FORMATTED,''yyyyMMdd'}-0$",-1),g=n('<p>第一部分：SIT/UAT为固定格式，代表测试类型</p><p>第二部分：BUILD_DATE_FORMATTED,&#39;&#39;yyyyMMdd&#39;&#39; ，取构建时间的前置部分，如20191029 17:25:01构建，${BUILD_DATE_FORMATTED,&#39;&#39;yyyyMMdd&#39;&#39;} 会计算显示成</p><p>20191029</p><p>第三部分：{BUILDS_TODAY}代表当日构建此时</p><p>4、勾选Use the formatted version number for build display name</p><p><strong>第三步：应用保存后，点击构建查看效果</strong></p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406242125592.jpg" alt=""></p><h1 id="jenkins发布成功后自动创建tag" tabindex="-1">Jenkins发布成功后自动创建Tag <a class="header-anchor" href="#jenkins发布成功后自动创建tag" aria-label="Permalink to &quot;Jenkins发布成功后自动创建Tag&quot;">​</a></h1><p><strong>1 准备原材料</strong></p><p>可工作的Jenkins环境</p><p>可读取的Gitlab项目仓库</p><p><strong>2 创建一个新的构建任务，这里我以build_on_tag为例</strong></p><p><strong>3 配置源码管理</strong></p><p>这里需要说明的是Name这个字段，需要填git仓库名的字段，如：</p><p><a href="http://180.2.1.1/java/mixapp.git" target="_blank" rel="noreferrer">http://180.2.1.1/java/mixapp.git</a> 中 mixapp就是仓库名</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406242125665.jpg" alt=""></p><p><strong>4 配置构建后操作</strong></p><p>操作中选择&quot;Git Publisher&quot;，来配置发布后执行的任务。</p><p>注意：</p><p>配置Git Publisher 时，需要我们勾选&quot;Push Only If Build Succeeds&quot;，要不然每次发布无论成功或者失败都去创建tag这样给我们的仓库里面会产生很多垃圾版本。</p><p>此外，TAG 通 PUSH 就是tag名称</p><p>Target remote name 就是之前源码管理里配置的仓库名称</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406242125351.jpg" alt=""></p><p><strong>5 查看构建日志</strong></p><p><strong>6 Gitlab 确认分支已创建成功</strong></p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406242126595.jpg" alt=""></p><h4 id="_03-总结" tabindex="-1"><strong>03 总结</strong> <a class="header-anchor" href="#_03-总结" aria-label="Permalink to &quot;**03 总结**&quot;">​</a></h4><p>如果安装了<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwiki.jenkins.io%2Fdisplay%2FJENKINS%2FBuild%2BTimestamp%2BPlugin" target="_blank" rel="noreferrer">Build+Timestamp+Plugin</a>插件，可以在git tag 的message填入。&quot;$BUILD_TIMESTAMP $BUILD_DISPLAY_NAME&quot;, 那么tag就会带有Jenkins构建事件</p>',28),_=[i,o,r,g];function l(u,h,c,m,T,d){return a(),e("div",null,_)}const D=s(p,[["render",l]]);export{A as __pageData,D as default};
