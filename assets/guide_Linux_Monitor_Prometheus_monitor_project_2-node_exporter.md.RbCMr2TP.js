import{_ as s,o as a,c as n,R as e}from"./chunks/framework.zUbWieqp.js";const F=JSON.parse('{"title":"1. 容器方式","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Linux/Monitor/Prometheus/monitor_project/2-node_exporter.md","filePath":"guide/Linux/Monitor/Prometheus/monitor_project/2-node_exporter.md","lastUpdated":1739441864000}'),o={name:"guide/Linux/Monitor/Prometheus/monitor_project/2-node_exporter.md"},p=e(`<h1 id="_1-容器方式" tabindex="-1">1. 容器方式 <a class="header-anchor" href="#_1-容器方式" aria-label="Permalink to &quot;1. 容器方式&quot;">​</a></h1><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--restart=always</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9100</span><span style="color:#9ECBFF;">:9100</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">prom/node-exporter</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--restart=always</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9100</span><span style="color:#032F62;">:9100</span><span style="color:#24292E;"> </span><span style="color:#032F62;">prom/node-exporter</span></span></code></pre></div><h2 id="_1-1-docker-compose" tabindex="-1">1.1 docker-compose <a class="header-anchor" href="#_1-1-docker-compose" aria-label="Permalink to &quot;1.1 docker-compose&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;3&#39;</span></span>
<span class="line"><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">node-exporter</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">prom/node-exporter</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">container_name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">node-exporter</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">restart</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">always</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&quot;9100:9100&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">/proc:/host/proc:ro</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">/sys:/host/sys:ro</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">/:/rootfs:ro</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">/var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&#39;--collector.processes&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&#39;--no-collector.hwmon&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&#39;--no-collector.dmi&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&#39;--no-collector.arp&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&#39;--no-collector.infiniband&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&#39;--collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/containerd/.+|/var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&#39;--collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&#39;--collector.systemd&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;3&#39;</span></span>
<span class="line"><span style="color:#22863A;">services</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">node-exporter</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">prom/node-exporter</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">container_name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">node-exporter</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">restart</span><span style="color:#24292E;">: </span><span style="color:#032F62;">always</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;9100:9100&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">/proc:/host/proc:ro</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">/sys:/host/sys:ro</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">/:/rootfs:ro</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">/var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&#39;--collector.processes&#39;</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&#39;--no-collector.hwmon&#39;</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&#39;--no-collector.dmi&#39;</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&#39;--no-collector.arp&#39;</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&#39;--no-collector.infiniband&#39;</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&#39;--collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/containerd/.+|/var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)&#39;</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&#39;--collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$&#39;</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&#39;--collector.systemd&#39;</span></span></code></pre></div><h1 id="_2-二进制方式" tabindex="-1">2. 二进制方式 <a class="header-anchor" href="#_2-二进制方式" aria-label="Permalink to &quot;2. 二进制方式&quot;">​</a></h1><h2 id="_2-1-下载" tabindex="-1">2.1 下载 <a class="header-anchor" href="#_2-1-下载" aria-label="Permalink to &quot;2.1 下载&quot;">​</a></h2><p><a href="https://prometheus.io/download/#node_exporter" target="_blank" rel="noreferrer">官当</a></p><p><a href="https://github.com/prometheus/node_exporter/releases" target="_blank" rel="noreferrer">https://github.com/prometheus/node_exporter/releases</a></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">wget</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#或者</span></span>
<span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-LO</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">wget</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#或者</span></span>
<span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-LO</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz</span></span></code></pre></div><h2 id="_2-2-部署" tabindex="-1">2.2 部署 <a class="header-anchor" href="#_2-2-部署" aria-label="Permalink to &quot;2.2 部署&quot;">​</a></h2><ul><li>创建目录</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/opt/node_exporter</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/opt/node_exporter</span></span></code></pre></div><ul><li>创建用户</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">useradd -rs /bin/false node_exporter</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">useradd -rs /bin/false node_exporter</span></span></code></pre></div><ul><li>解压</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tar</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xvfz</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_exporter-</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">-amd64.tar.gz</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_exporter-</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">-amd64</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">mv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_exporter</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/opt/node_exporter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">chown</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-R</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_exporter.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/opt/node_exporter</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tar</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xvfz</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_exporter-</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">-amd64.tar.gz</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_exporter-</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">-amd64</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">mv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_exporter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/opt/node_exporter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">chown</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-R</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_exporter.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/opt/node_exporter</span></span></code></pre></div><ul><li>创建systemd</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">cat &gt; /etc/systemd/system/node_exporter.service &lt;&lt;EOF</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">Unit</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#9ECBFF;">Description=Node Exporter</span></span>
<span class="line"><span style="color:#9ECBFF;">Documentation=https://prometheus.io/docs/guides/node-exporter/</span></span>
<span class="line"><span style="color:#9ECBFF;">Wants=network-online.target</span></span>
<span class="line"><span style="color:#9ECBFF;">After=network-online.target</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">Service</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#9ECBFF;">Type=simple</span></span>
<span class="line"><span style="color:#9ECBFF;">User=node_exporter</span></span>
<span class="line"><span style="color:#9ECBFF;">Group=node_exporter</span></span>
<span class="line"><span style="color:#9ECBFF;">ExecStart=/opt/node_exporter/node_exporter \\</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">--web.listen-address=:9100 \\</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">--collector.processes \\</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">--no-collector.hwmon \\</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">--no-collector.dmi \\</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">--no-collector.arp \\</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">--collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/containerd/.+|/var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/) \\</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">--collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">Restart=on-failure</span></span>
<span class="line"><span style="color:#9ECBFF;">ExecReload=/bin/kill -HUP $MAINPID</span></span>
<span class="line"><span style="color:#9ECBFF;">KillMode=process</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">Install</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#9ECBFF;">WantedBy=multi-user.target</span></span>
<span class="line"><span style="color:#9ECBFF;">EOF</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">cat &gt; /etc/systemd/system/node_exporter.service &lt;&lt;EOF</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">Unit</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#032F62;">Description=Node Exporter</span></span>
<span class="line"><span style="color:#032F62;">Documentation=https://prometheus.io/docs/guides/node-exporter/</span></span>
<span class="line"><span style="color:#032F62;">Wants=network-online.target</span></span>
<span class="line"><span style="color:#032F62;">After=network-online.target</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">Service</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#032F62;">Type=simple</span></span>
<span class="line"><span style="color:#032F62;">User=node_exporter</span></span>
<span class="line"><span style="color:#032F62;">Group=node_exporter</span></span>
<span class="line"><span style="color:#032F62;">ExecStart=/opt/node_exporter/node_exporter \\</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">--web.listen-address=:9100 \\</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">--collector.processes \\</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">--no-collector.hwmon \\</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">--no-collector.dmi \\</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">--no-collector.arp \\</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">--collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/containerd/.+|/var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/) \\</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">--collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">Restart=on-failure</span></span>
<span class="line"><span style="color:#032F62;">ExecReload=/bin/kill -HUP $MAINPID</span></span>
<span class="line"><span style="color:#032F62;">KillMode=process</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">Install</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#032F62;">WantedBy=multi-user.target</span></span>
<span class="line"><span style="color:#032F62;">EOF</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">chmod</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">644</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/systemd/system/node_exporter.service</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">chmod</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">644</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/systemd/system/node_exporter.service</span></span></code></pre></div><ul><li>启动</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">systemctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">daemon-reload</span></span>
<span class="line"><span style="color:#B392F0;">systemctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">enable</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--now</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_exporter</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">systemctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">daemon-reload</span></span>
<span class="line"><span style="color:#6F42C1;">systemctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">enable</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--now</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_exporter</span></span></code></pre></div><h1 id="_3-指标" tabindex="-1">3. 指标 <a class="header-anchor" href="#_3-指标" aria-label="Permalink to &quot;3. 指标&quot;">​</a></h1><h2 id="_3-1-cpu" tabindex="-1">3.1 cpu <a class="header-anchor" href="#_3-1-cpu" aria-label="Permalink to &quot;3.1 cpu&quot;">​</a></h2><h3 id="_1-cpu负载" tabindex="-1">1.CPU负载 <a class="header-anchor" href="#_1-cpu负载" aria-label="Permalink to &quot;1.CPU负载&quot;">​</a></h3><p>CPU负载是指某段时间内占用CPU时间的进程和等待CPU时间的进程数之和</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">node_load1</span></span>
<span class="line"><span style="color:#e1e4e8;">node_load5</span></span>
<span class="line"><span style="color:#e1e4e8;">node_load15</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">node_load1 &gt; on (instance) 4 * count by (instance)(node_cpu_seconds_total{mode=&quot;idle&quot;})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">node_load1</span></span>
<span class="line"><span style="color:#24292e;">node_load5</span></span>
<span class="line"><span style="color:#24292e;">node_load15</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">node_load1 &gt; on (instance) 4 * count by (instance)(node_cpu_seconds_total{mode=&quot;idle&quot;})</span></span></code></pre></div><h3 id="_2-cpu使用率" tabindex="-1">2.CPU使用率 <a class="header-anchor" href="#_2-cpu使用率" aria-label="Permalink to &quot;2.CPU使用率&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">node_cpu_seconds_total</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">node_cpu_seconds_total</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-avg(</span><span style="color:#B392F0;">irate(node_cpu_seconds_total</span><span style="color:#79B8FF;">{mode=</span><span style="color:#B392F0;">&quot;idle&quot;}[5m]</span><span style="color:#79B8FF;">)</span><span style="color:#E1E4E8;">) by (</span><span style="color:#B392F0;">instance</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> 100</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">100</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-avg(</span><span style="color:#6F42C1;">irate(node_cpu_seconds_total</span><span style="color:#005CC5;">{mode=</span><span style="color:#6F42C1;">&quot;idle&quot;}[5m]</span><span style="color:#005CC5;">)</span><span style="color:#24292E;">) by (</span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> 100</span></span></code></pre></div><h2 id="_3-2-mem" tabindex="-1">3.2 mem <a class="header-anchor" href="#_3-2-mem" aria-label="Permalink to &quot;3.2 mem&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">node_memory_MemTotal_bytes    #总内存大小</span></span>
<span class="line"><span style="color:#e1e4e8;">node_memory_MemFree_bytes     #空闲内存大小</span></span>
<span class="line"><span style="color:#e1e4e8;">node_memory_Buffers_bytes     #缓冲缓存大小</span></span>
<span class="line"><span style="color:#e1e4e8;">node_memory_Cached_bytes      #页面缓存大小</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">node_memory_MemTotal_bytes    #总内存大小</span></span>
<span class="line"><span style="color:#24292e;">node_memory_MemFree_bytes     #空闲内存大小</span></span>
<span class="line"><span style="color:#24292e;">node_memory_Buffers_bytes     #缓冲缓存大小</span></span>
<span class="line"><span style="color:#24292e;">node_memory_Cached_bytes      #页面缓存大小</span></span></code></pre></div><p>计算的公式为：（总内存 -（空闲内存 + 缓冲缓存 + 页面缓存））/ 总内存 * 100</p><p><code>(node_memory_MemTotal_bytes - (node_memory_MemFree_bytes + node_memory_Buffers_bytes+node_memory_Cached_bytes ))/node_memory_MemTotal_bytes * 100</code></p><h3 id="swap内存使用率" tabindex="-1">swap内存使用率 <a class="header-anchor" href="#swap内存使用率" aria-label="Permalink to &quot;swap内存使用率&quot;">​</a></h3><p>Swap为交换内存分区，它使用磁盘上的部分空间来充当服务器内存，当系统物理内存吃紧时，Linux 会将内存中不常访问的数据保存到 swap 上，这样系统就有更多的物理内存为各个进程服务。而当系统需要访问 swap 上存储的内容时，再将 swap 上的数据加载到内存中，这就是常说的换出和换入。交换空间可以在一定程度上缓解内存不足的情况，但是它需要读写磁盘数据，所以性能不是很高。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">node_memory_SwapTotal_bytes  #swap内存总大小</span></span>
<span class="line"><span style="color:#e1e4e8;">node_memory_SwapFree_bytes   #swap空闲内存大小</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">node_memory_SwapTotal_bytes  #swap内存总大小</span></span>
<span class="line"><span style="color:#24292e;">node_memory_SwapFree_bytes   #swap空闲内存大小</span></span></code></pre></div><p>计算的公式如下：<code>(node_memory_SwapTotal_bytes - node_memory_SwapFree_bytes)/node_memory_SwapTotal_bytes * 100</code></p><h3 id="内存饱和度" tabindex="-1">内存饱和度 <a class="header-anchor" href="#内存饱和度" aria-label="Permalink to &quot;内存饱和度&quot;">​</a></h3><p>node_vmstat_pswpin：系统每秒从磁盘读到内存的字节数</p><p>node_vmstat_pswpout:系统每秒从内存写到磁盘的字节数</p><p>两者都是自上次启动以来的字节数，以KB为单位</p><p>为了获得饱合度指标，对每个指标计算每一分钟的速率，将两个速率相加，然后乘以1024获得字节数</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">1024 * sum by (instance) ((rate(node_vmstat_pgpgin[1m]) + rate(node_vmstat_pgpgout[1m])))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1024 * sum by (instance) ((rate(node_vmstat_pgpgin[1m]) + rate(node_vmstat_pgpgout[1m])))</span></span></code></pre></div><h2 id="_3-3-disk" tabindex="-1">3.3 disk <a class="header-anchor" href="#_3-3-disk" aria-label="Permalink to &quot;3.3 disk&quot;">​</a></h2><h3 id="_1-分区使用率" tabindex="-1">1.分区使用率 <a class="header-anchor" href="#_1-分区使用率" aria-label="Permalink to &quot;1.分区使用率&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">node_filesystem_size_bytes  # 分区空间总容量</span></span>
<span class="line"><span style="color:#e1e4e8;">node_filesystem_free_bytes  # 分区空闲容量</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">node_filesystem_size_bytes  # 分区空间总容量</span></span>
<span class="line"><span style="color:#24292e;">node_filesystem_free_bytes  # 分区空闲容量</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">node_filesystem_size_bytes</span><span style="color:#E1E4E8;">{mountpoint=</span><span style="color:#B392F0;">&quot;/&quot;</span><span style="color:#B392F0;">}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_filesystem_free_bytes{mountpoint=&quot;/&quot;}</span><span style="color:#E1E4E8;">)/node_filesystem_size_bytes{mountpoint</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/&quot;}</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">node_filesystem_size_bytes</span><span style="color:#24292E;">{mountpoint=</span><span style="color:#6F42C1;">&quot;/&quot;</span><span style="color:#6F42C1;">}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_filesystem_free_bytes{mountpoint=&quot;/&quot;}</span><span style="color:#24292E;">)/node_filesystem_size_bytes{mountpoint</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/&quot;}</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span></span></code></pre></div><h3 id="_2-磁盘吞吐量" tabindex="-1">2.磁盘吞吐量 <a class="header-anchor" href="#_2-磁盘吞吐量" aria-label="Permalink to &quot;2.磁盘吞吐量&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">node_disk_read_bytes_total  #分区读总字节数</span></span>
<span class="line"><span style="color:#e1e4e8;">node_disk_written_bytes_total #分区写总字节数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">node_disk_read_bytes_total  #分区读总字节数</span></span>
<span class="line"><span style="color:#24292e;">node_disk_written_bytes_total #分区写总字节数</span></span></code></pre></div><p>上面两个指标分别对应了分区读写的总字节数，指标为counter类型。前面文章讲过，counter类型会不断的累加，该指标直接使用对于监控没有意义，但可通过下面公式转化为磁盘的每秒读写速率。device代表对应的磁盘分区。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">irate(node_disk_read_bytes_total</span><span style="color:#E1E4E8;">{device=</span><span style="color:#B392F0;">&quot;vda&quot;</span><span style="color:#B392F0;">}[5m]</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#B392F0;">irate(node_disk_written_bytes_total</span><span style="color:#E1E4E8;">{device=</span><span style="color:#B392F0;">&quot;vda&quot;</span><span style="color:#B392F0;">}[5m]</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">irate(node_disk_read_bytes_total</span><span style="color:#24292E;">{device=</span><span style="color:#6F42C1;">&quot;vda&quot;</span><span style="color:#6F42C1;">}[5m]</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#6F42C1;">irate(node_disk_written_bytes_total</span><span style="color:#24292E;">{device=</span><span style="color:#6F42C1;">&quot;vda&quot;</span><span style="color:#6F42C1;">}[5m]</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="_3-磁盘iops" tabindex="-1">3.磁盘IOPS <a class="header-anchor" href="#_3-磁盘iops" aria-label="Permalink to &quot;3.磁盘IOPS&quot;">​</a></h3><p>IOPS表示每秒对磁盘的读写次数，它与吞吐量都是衡量磁盘的重要指标</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">node_disk_reads_completed_total  #分区读总次数</span></span>
<span class="line"><span style="color:#e1e4e8;">node_disk_writes_completed_total  #分区写总次数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">node_disk_reads_completed_total  #分区读总次数</span></span>
<span class="line"><span style="color:#24292e;">node_disk_writes_completed_total  #分区写总次数</span></span></code></pre></div><p>计算公式与上面相似，使用我们熟悉的irate或rate函数来处理</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">irate(node_disk_reads_completed_total{device=&quot;vda&quot;}[5m])</span></span>
<span class="line"><span style="color:#e1e4e8;">irate(node_disk_writes_completed_total{device=&quot;vda&quot;}[5m])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">irate(node_disk_reads_completed_total{device=&quot;vda&quot;}[5m])</span></span>
<span class="line"><span style="color:#24292e;">irate(node_disk_writes_completed_total{device=&quot;vda&quot;}[5m])</span></span></code></pre></div><h3 id="_4-磁盘未来耗尽" tabindex="-1">4.磁盘未来耗尽 <a class="header-anchor" href="#_4-磁盘未来耗尽" aria-label="Permalink to &quot;4.磁盘未来耗尽&quot;">​</a></h3><p>可以使用predict_linear函数来构建在未来什么时间会耗尽磁盘空间</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">predict_linear(node_filesystem_free_bytes</span><span style="color:#E1E4E8;">{mountgoint=</span><span style="color:#B392F0;">&quot;/&quot;</span><span style="color:#B392F0;">}[1h],4*3600</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">predict_linear(node_filesystem_free_bytes</span><span style="color:#24292E;">{mountgoint=</span><span style="color:#6F42C1;">&quot;/&quot;</span><span style="color:#6F42C1;">}[1h],4*3600</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">0</span></span></code></pre></div><p>上面是指定根文件系统，还可以通过指定作业名称或使用正则表达式来选择所有文件系统</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">predict_linear(node_filesystem_free_bytes</span><span style="color:#E1E4E8;">{job=</span><span style="color:#B392F0;">&quot;node&quot;</span><span style="color:#B392F0;">}[1h],</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4*</span><span style="color:#9ECBFF;">3600</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">predict_linear(node_filesystem_free_bytes</span><span style="color:#24292E;">{job=</span><span style="color:#6F42C1;">&quot;node&quot;</span><span style="color:#6F42C1;">}[1h],</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4*</span><span style="color:#032F62;">3600</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> 0</span></span></code></pre></div><p>在上面中，我们选择一小时的时间窗口，并将此时间序列快照放在predict_linear函数中。该函数使用简单的线性回归，根 据以前的增长情况来确定文件系统何时会耗尽空间。该函数参数包括一个范围向量，即一小时窗口，以及未来需要预测的 时间点。这些都是以秒为单位的，因此这里使用4*3600秒，即四小时。最后&lt;0，即文件系统空间不足</p><h2 id="_3-4-network" tabindex="-1">3.4 network <a class="header-anchor" href="#_3-4-network" aria-label="Permalink to &quot;3.4 network&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">node_network_receive_bytes_total  #下载流量总字节数</span></span>
<span class="line"><span style="color:#e1e4e8;">node_network_transmit_bytes_total  #上传流量总字节数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">node_network_receive_bytes_total  #下载流量总字节数</span></span>
<span class="line"><span style="color:#24292e;">node_network_transmit_bytes_total  #上传流量总字节数</span></span></code></pre></div><p>计算公式如下，此处排除Loopback 网卡</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">irate(node_network_receive_bytes_total{device != &quot;lo&quot;}[1m]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">irate(node_network_receive_bytes_total{device != &quot;lo&quot;}[1m]</span></span></code></pre></div><h1 id="_4-收集器" tabindex="-1">4. 收集器 <a class="header-anchor" href="#_4-收集器" aria-label="Permalink to &quot;4. 收集器&quot;">​</a></h1><h2 id="_4-1-textfile" tabindex="-1">4.1 textfile <a class="header-anchor" href="#_4-1-textfile" aria-label="Permalink to &quot;4.1 textfile&quot;">​</a></h2><p>暴露自定义指标时特别有用。这些自定义指标可能是批处理或cron作业等无法抓取的，可能是没有exporter的源，甚至可能是为主机提供上下文的静态指标。收集器通过扫描指定目录中的文件，提取所有格式为</p><p>Prometheus指标的字符串，然后暴露它们以便抓取</p><p><code>该参数自动加载，不用配置参数，但是需要指定textfile的目录</code></p><h3 id="_1-创建" tabindex="-1">1 创建 <a class="header-anchor" href="#_1-创建" aria-label="Permalink to &quot;1 创建&quot;">​</a></h3><ul><li>创建目录</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/data/monitor/prometheus/textfile_collector</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/data/monitor/prometheus/textfile_collector</span></span></code></pre></div><ul><li>创建文件</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;metadata{role=&quot;docker_server&quot;,datacenter=&quot;NJ&quot;} 1&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">/data/monitor/prometheus/textfile_collector/metadata.prom</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;metadata{role=&quot;docker_server&quot;,datacenter=&quot;NJ&quot;} 1&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;">  </span><span style="color:#032F62;">/data/monitor/prometheus/textfile_collector/metadata.prom</span></span></code></pre></div><h3 id="_2-启动" tabindex="-1">2 启动 <a class="header-anchor" href="#_2-启动" aria-label="Permalink to &quot;2 启动&quot;">​</a></h3><p>需要指定--collector.textfile.directory=&quot;/etc/prometheus/textfile_collector&quot;</p><h3 id="_3-配置" tabindex="-1">3.配置 <a class="header-anchor" href="#_3-配置" aria-label="Permalink to &quot;3.配置&quot;">​</a></h3><p>Text-based格式<code>*.prom</code>文件文件书写规范</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">每行必须使用换行符\\n结束，空行会被忽略。</span></span>
<span class="line"><span style="color:#e1e4e8;">#符号开头，后面不接HELP或TYPE的行，视为注释。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"># HELP开头，后面第一个字段是metric名，再后面的字段或字符被视为对metric的描述。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"># TYPE开头，后面第一个字段是metric名，第二个字段是metric类型，metric类型有counter, gauge, histogram, summary, or untyped。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">每行必须使用换行符\\n结束，空行会被忽略。</span></span>
<span class="line"><span style="color:#24292e;">#符号开头，后面不接HELP或TYPE的行，视为注释。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"># HELP开头，后面第一个字段是metric名，再后面的字段或字符被视为对metric的描述。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"># TYPE开头，后面第一个字段是metric名，第二个字段是metric类型，metric类型有counter, gauge, histogram, summary, or untyped。</span></span></code></pre></div><p>相同的metric名只能有一个TYPE，并且TYPE这行要放在metric取样之前，如果没有为metric设置TYPE，metric类型被设置为untyped</p><p>比如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># cat  /data/monitor/prometheus/textfile_collector/worker_num.prom </span></span>
<span class="line"><span style="color:#6A737D;"># HELP worker_num airflow worker number</span></span>
<span class="line"><span style="color:#6A737D;"># TYPE worker_num gauge</span></span>
<span class="line"><span style="color:#B392F0;">worker_num</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2001</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># cat  /data/monitor/prometheus/textfile_collector/worker_num.prom </span></span>
<span class="line"><span style="color:#6A737D;"># HELP worker_num airflow worker number</span></span>
<span class="line"><span style="color:#6A737D;"># TYPE worker_num gauge</span></span>
<span class="line"><span style="color:#6F42C1;">worker_num</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2001</span></span></code></pre></div><ul><li>采集脚本</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># cat /data/monitor/prometheus/textfile_collector/scripts/worker_exporter.sh</span></span>
<span class="line"><span style="color:#E1E4E8;">worker_num</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">ps</span><span style="color:#9ECBFF;"> uax </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">grep</span><span style="color:#9ECBFF;"> celery </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">grep</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#9ECBFF;"> grep </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">wc</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-l</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;# HELP worker_num airflow worker number&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/data/monitor/prometheus/textfile_collector/worker_num</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;# TYPE worker_num gauge&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/data/monitor/prometheus/textfile_collector/worker_num</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">worker_num</span><span style="color:#E1E4E8;"> $worker_num </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/data/monitor/prometheus/textfile_collector/worker_num</span></span>
<span class="line"><span style="color:#B392F0;">mv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/hadoop/airflow/logs/node_exporter/worker_num</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/data/monitor/prometheus/textfile_collector/worker_num.prom</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># cat /data/monitor/prometheus/textfile_collector/scripts/worker_exporter.sh</span></span>
<span class="line"><span style="color:#24292E;">worker_num</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">ps</span><span style="color:#032F62;"> uax </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#032F62;"> celery </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-v</span><span style="color:#032F62;"> grep </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">wc</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-l</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;# HELP worker_num airflow worker number&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/data/monitor/prometheus/textfile_collector/worker_num</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;# TYPE worker_num gauge&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/data/monitor/prometheus/textfile_collector/worker_num</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">worker_num</span><span style="color:#24292E;"> $worker_num </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/data/monitor/prometheus/textfile_collector/worker_num</span></span>
<span class="line"><span style="color:#6F42C1;">mv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/hadoop/airflow/logs/node_exporter/worker_num</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/data/monitor/prometheus/textfile_collector/worker_num.prom</span></span></code></pre></div><ul><li>计划任务</li></ul><p>...</p><h4 id="监控端口案例" tabindex="-1">监控端口案例 <a class="header-anchor" href="#监控端口案例" aria-label="Permalink to &quot;监控端口案例&quot;">​</a></h4><p>1.创建文件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/opt/prometheus/monitor_open_ports.sh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#9ECBFF;">EOF</span></span>
<span class="line"><span style="color:#9ECBFF;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">MONITOR_DADA_OUTPUT_FILE=&#39;/opt/prometheus/data/open_ports.prom&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;"># Define the ports to monitor. Add or remove ports as needed.</span></span>
<span class="line"><span style="color:#9ECBFF;">MONITORED_PORTS=(7380 7381 7382 17380 17381 17382)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;"># Function to extract open ports from netstat output</span></span>
<span class="line"><span style="color:#9ECBFF;">get_open_ports() {</span></span>
<span class="line"><span style="color:#9ECBFF;">  for port in &quot;\${</span><span style="color:#E1E4E8;">MONITORED_PORTS</span><span style="color:#9ECBFF;">[@]}&quot;; do</span></span>
<span class="line"><span style="color:#9ECBFF;">    open_port_count=$(</span><span style="color:#B392F0;">netstat</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-an</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">grep</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-c</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-E</span><span style="color:#9ECBFF;"> &quot;:\${</span><span style="color:#E1E4E8;">port</span><span style="color:#9ECBFF;">}.*LISTEN&quot;)</span></span>
<span class="line"><span style="color:#9ECBFF;">    if [[ </span><span style="color:#E1E4E8;">$open_port_count</span><span style="color:#9ECBFF;"> -gt 0 ]]; then</span></span>
<span class="line"><span style="color:#9ECBFF;">      echo &quot;node_exporter_open_ports{port=</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#E1E4E8;">$port</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">} </span><span style="color:#E1E4E8;">$open_port_count</span><span style="color:#9ECBFF;">&quot; &gt;&gt; \${</span><span style="color:#E1E4E8;">MONITOR_DADA_OUTPUT_FILE</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">    else</span></span>
<span class="line"><span style="color:#9ECBFF;">      echo &quot;node_exporter_open_ports{port=</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#E1E4E8;">$port</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">} 0&quot; &gt;&gt; \${</span><span style="color:#E1E4E8;">MONITOR_DADA_OUTPUT_FILE</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">    fi</span></span>
<span class="line"><span style="color:#9ECBFF;">  done</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;"># Define Metrics Type and clear OLD DATA.</span></span>
<span class="line"><span style="color:#9ECBFF;">echo &quot;# TYPE node_exporter_open_ports gauge&quot; &gt; \${</span><span style="color:#E1E4E8;">MONITOR_DADA_OUTPUT_FILE</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">get_open_ports</span></span>
<span class="line"><span style="color:#9ECBFF;">EOF</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/opt/prometheus/monitor_open_ports.sh</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">EOF</span></span>
<span class="line"><span style="color:#032F62;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">MONITOR_DADA_OUTPUT_FILE=&#39;/opt/prometheus/data/open_ports.prom&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;"># Define the ports to monitor. Add or remove ports as needed.</span></span>
<span class="line"><span style="color:#032F62;">MONITORED_PORTS=(7380 7381 7382 17380 17381 17382)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;"># Function to extract open ports from netstat output</span></span>
<span class="line"><span style="color:#032F62;">get_open_ports() {</span></span>
<span class="line"><span style="color:#032F62;">  for port in &quot;\${</span><span style="color:#24292E;">MONITORED_PORTS</span><span style="color:#032F62;">[@]}&quot;; do</span></span>
<span class="line"><span style="color:#032F62;">    open_port_count=$(</span><span style="color:#6F42C1;">netstat</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-an</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-c</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-E</span><span style="color:#032F62;"> &quot;:\${</span><span style="color:#24292E;">port</span><span style="color:#032F62;">}.*LISTEN&quot;)</span></span>
<span class="line"><span style="color:#032F62;">    if [[ </span><span style="color:#24292E;">$open_port_count</span><span style="color:#032F62;"> -gt 0 ]]; then</span></span>
<span class="line"><span style="color:#032F62;">      echo &quot;node_exporter_open_ports{port=</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#24292E;">$port</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">} </span><span style="color:#24292E;">$open_port_count</span><span style="color:#032F62;">&quot; &gt;&gt; \${</span><span style="color:#24292E;">MONITOR_DADA_OUTPUT_FILE</span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">    else</span></span>
<span class="line"><span style="color:#032F62;">      echo &quot;node_exporter_open_ports{port=</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#24292E;">$port</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">} 0&quot; &gt;&gt; \${</span><span style="color:#24292E;">MONITOR_DADA_OUTPUT_FILE</span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">    fi</span></span>
<span class="line"><span style="color:#032F62;">  done</span></span>
<span class="line"><span style="color:#032F62;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;"># Define Metrics Type and clear OLD DATA.</span></span>
<span class="line"><span style="color:#032F62;">echo &quot;# TYPE node_exporter_open_ports gauge&quot; &gt; \${</span><span style="color:#24292E;">MONITOR_DADA_OUTPUT_FILE</span><span style="color:#032F62;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">get_open_ports</span></span>
<span class="line"><span style="color:#032F62;">EOF</span></span></code></pre></div><blockquote><p><strong>指标记录中的字符串格式的值要用 <code>&quot;&quot;</code>，不能使用 <code>&#39;&#39;</code></strong> 。否则会报错</p></blockquote><p>2.启动配置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ExecStart=/usr/bin/node_exporter --collector.textfile.directory=/opt/prometheus/data/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ExecStart=/usr/bin/node_exporter --collector.textfile.directory=/opt/prometheus/data/</span></span></code></pre></div><p>3.监控*prom文件是否变化</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">- </span><span style="color:#85E89D;">alert</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">TextFileNotUpdated</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">expr</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">(time() - node_textfile_mtime_seconds{file=&quot;your_file.prom&quot;}) &gt; 600</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">for</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">1m</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">severity</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">warning</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">annotations</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">summary</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Textfile not updated within expected timeframe&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">description</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;The file your_file.prom has not been updated in the last 10 minutes.&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">- </span><span style="color:#22863A;">alert</span><span style="color:#24292E;">: </span><span style="color:#032F62;">TextFileNotUpdated</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">expr</span><span style="color:#24292E;">: </span><span style="color:#032F62;">(time() - node_textfile_mtime_seconds{file=&quot;your_file.prom&quot;}) &gt; 600</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">for</span><span style="color:#24292E;">: </span><span style="color:#032F62;">1m</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">severity</span><span style="color:#24292E;">: </span><span style="color:#032F62;">warning</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">annotations</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">summary</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Textfile not updated within expected timeframe&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">description</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;The file your_file.prom has not been updated in the last 10 minutes.&quot;</span></span></code></pre></div><h2 id="_4-2-sytemd收集器" tabindex="-1">4.2 sytemd收集器 <a class="header-anchor" href="#_4-2-sytemd收集器" aria-label="Permalink to &quot;4.2 sytemd收集器&quot;">​</a></h2><h3 id="_1-启动" tabindex="-1">1.启动 <a class="header-anchor" href="#_1-启动" aria-label="Permalink to &quot;1.启动&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">/opt/apps/node_exporter/bin/node_exporter --collector.systemd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/opt/apps/node_exporter/bin/node_exporter --collector.systemd</span></span></code></pre></div><p>添加白名单</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">--collector.systemd.unit-whitelist &quot;(docker|ssh|kube-apiserver|kube-controller-manager|kube-scheduler|kubelet|kube-proxy).service&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">--collector.systemd.unit-whitelist &quot;(docker|ssh|kube-apiserver|kube-controller-manager|kube-scheduler|kubelet|kube-proxy).service&quot;</span></span></code></pre></div><ul><li>PromQL查询</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">node_systemd_unit_state{name=&quot;kube-apiserver.service&quot;,state=&quot;active&quot;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">node_systemd_unit_state{name=&quot;kube-apiserver.service&quot;,state=&quot;active&quot;}</span></span></code></pre></div><p>或者在node_exporter上执行</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-X</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">GET</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10.103</span><span style="color:#9ECBFF;">.236.199:9100/metrics?collect[]=systemd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-X</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GET</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10.103</span><span style="color:#032F62;">.236.199:9100/metrics?collect[]=systemd</span></span></code></pre></div><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202502131401809.png" alt="image-20250213135852624"></p>`,106),l=[p];function t(c,r,i,y,d,E){return a(),n("div",null,l)}const h=s(o,[["render",t]]);export{F as __pageData,h as default};
