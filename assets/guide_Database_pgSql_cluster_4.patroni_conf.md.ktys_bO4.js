import{_ as s,o as a,c as e,R as t}from"./chunks/framework.zUbWieqp.js";const m=JSON.parse('{"title":"1.scope,namespace和name","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Database/pgSql/cluster/4.patroni_conf.md","filePath":"guide/Database/pgSql/cluster/4.patroni_conf.md","lastUpdated":1703063387000}'),n={name:"guide/Database/pgSql/cluster/4.patroni_conf.md"},o=t(`<h1 id="_1-scope-namespace和name" tabindex="-1">1.scope,namespace和name <a class="header-anchor" href="#_1-scope-namespace和name" aria-label="Permalink to &quot;1.scope,namespace和name&quot;">​</a></h1><p><strong>scope</strong> 集群的名称</p><p><strong>namespace</strong> 是在DCS（服务发现）组件中创建集群和节点标识的位置。简单来说就是etcd中存储的位置，不配置的话默认就存储在/service目录下。我们可以为每一个集群定义一个命名空间，也可以在同一个命名空间中存储多个集群</p><p><strong>name</strong> 运行Patroni当前实例的节点的名称</p><h1 id="_2-restapi" tabindex="-1">2.restapi <a class="header-anchor" href="#_2-restapi" aria-label="Permalink to &quot;2.restapi&quot;">​</a></h1><p><strong>listen</strong> 定义了REST API服务侦听的地址和端口。这个监听地址</p><p><strong>connect_address</strong> 定义了patroni用于查询REST API的地址和端口</p><p><strong>certfile</strong>和<strong>keyfile</strong>定义证书文件和密钥的路径</p><h1 id="_3-etcd" tabindex="-1">3.etcd <a class="header-anchor" href="#_3-etcd" aria-label="Permalink to &quot;3.etcd&quot;">​</a></h1><p><strong>host</strong>指定一个地址</p><p><strong>hosts</strong>可以指定多个地址,多个地址用逗号隔开</p><h1 id="_4-bootstrap" tabindex="-1">4.bootstrap <a class="header-anchor" href="#_4-bootstrap" aria-label="Permalink to &quot;4.bootstrap&quot;">​</a></h1><p>是Patroni的引导程序，patroni集群初始化的时候，就会把信息写入到etcd中的/namespace/scope/config下面</p><p><strong>loop_wait</strong> 循环更新领导者密钥过程中的休眠时间，也是写了一个循环程序更新领导者密钥，然后在中间sleep(loop_wait )</p><p><strong>retry_timeout</strong> etcd和PostgreSQL操作重试的超时时间（以秒为单位）。任何小于此值的超时都不会导致领导者降级</p><p><strong>maximum_lag_on_failover</strong> 如果Master和Replicate之间的字节数延迟大于此值，那么Replicate将不参与新的领导者选举</p><p><strong>synchronous_mode</strong> 是否打开同步复制模式。在打开模式下，将选择一个副本作为同步副本，并且只有最新的领导者和同步副本才能参与领导者选举。同步模式确保成功提交的事务不会在故障转移时丢失。它的代价是当用户无法确保事务的持久性时，将失去写操作的可用性</p><p><strong>postgresql</strong> 这里定义了引导过程中PostgreSQL的配置，是否使用pg_rewind，是否使用复制插槽，还有PostgreSQL参数等信息</p><pre><code>postgresql:      
	use_pg_rewind: true      
	use_slots: true      
	parameters:        
		listen_addresses: &quot;0.0.0.0&quot;        
		port: 5432        
		wal_level: logical        
		hot_standby: &quot;on&quot;        
		wal_keep_segments: 100        
		max_wal_senders: 10        
		max_replication_slots: 10        
		wal_log_hints: &quot;on&quot;
</code></pre><p><strong>initdb</strong> 定义了在引导过程中要传递给initdb</p><p><strong>pg_hba</strong> 定义了集群初始化后，pg_hba.conf</p><h1 id="_5-postgresql" tabindex="-1">5.postgresql <a class="header-anchor" href="#_5-postgresql" aria-label="Permalink to &quot;5.postgresql&quot;">​</a></h1><p>上面的postgresql是引导（<strong>bootstrap</strong>）中的配置，下面这个postgresql是针对每个节点数据库的设置</p><p><strong>listen</strong>用来设置postgresql.conf参数listen_addresses和port。</p><p>而<strong>connect_address</strong>定义了可从其他节点和应用程序访问Postgres的地址和端口。</p><p><strong>data_dir</strong> 指定集群的数据目录的存放路径。</p><p><strong>bin_dir</strong> PostgreSQL二进制文件存放路径。</p><p><strong>authentication</strong> 定义用于复制的用户，超级用户</p><h1 id="_6-tag" tabindex="-1">6.tag <a class="header-anchor" href="#_6-tag" aria-label="Permalink to &quot;6.tag&quot;">​</a></h1><p>最后一段就是标签的设置，如果集群包含异地的数据中心，可以根据需要配置该节点为不参与选主，不参与负载均衡，也不作为同步备库</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">tags:    </span></span>
<span class="line"><span style="color:#e1e4e8;">  nofailover: false   </span></span>
<span class="line"><span style="color:#e1e4e8;">  noloadbalance: false    </span></span>
<span class="line"><span style="color:#e1e4e8;">  clonefrom: false    </span></span>
<span class="line"><span style="color:#e1e4e8;">  nosync: false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">tags:    </span></span>
<span class="line"><span style="color:#24292e;">  nofailover: false   </span></span>
<span class="line"><span style="color:#24292e;">  noloadbalance: false    </span></span>
<span class="line"><span style="color:#24292e;">  clonefrom: false    </span></span>
<span class="line"><span style="color:#24292e;">  nosync: false</span></span></code></pre></div><p>官方文档：</p><p><a href="https://github.com/zalando/patroni/blob/master/docs/SETTINGS.rst" target="_blank" rel="noreferrer">https://github.com/zalando/patroni/blob/master/docs/SETTINGS.rst</a></p>`,33),r=[o];function p(l,c,i,g,d,_){return a(),e("div",null,r)}const u=s(n,[["render",p]]);export{m as __pageData,u as default};
