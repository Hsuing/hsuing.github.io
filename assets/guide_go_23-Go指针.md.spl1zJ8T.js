import{_ as s,o as n,c as a,R as p}from"./chunks/framework.zUbWieqp.js";const d=JSON.parse('{"title":"1.golang指针","description":"","frontmatter":{},"headers":[],"relativePath":"guide/go/23-Go指针.md","filePath":"guide/go/23-Go指针.md","lastUpdated":1725357249000}'),l={name:"guide/go/23-Go指针.md"},o=p(`<h1 id="_1-golang指针" tabindex="-1">1.golang指针 <a class="header-anchor" href="#_1-golang指针" aria-label="Permalink to &quot;1.golang指针&quot;">​</a></h1><p>Go语言中的函数传参都是值拷贝，当我们想要修改某个变量的时候，我们可以创建一个指向该变量地址的指针变量。传递数据使用指针，而无需拷贝数据。</p><p>类型指针不能进行偏移和运算</p><p>Go语言中的指针操作非常简单，只需要记住两个符号：<code>&amp;(取地址)</code>和<code>*(根据地址取值)</code></p><p>Go 语言虽然保留了指针，但与其他编程语言不同的是：</p><ul><li>默认值 nil，没有 NULL 常量。</li><li>操作符&quot;&amp;&quot;取变量地址，&quot;*&quot;通过指针访问目标对象。</li><li>不支持指针运算，不支持&quot;-&gt;&quot;运算符，直接用&quot;.&quot;访问目标成员。</li></ul><h2 id="_1-0-内存地址" tabindex="-1">1.0 内存地址 <a class="header-anchor" href="#_1-0-内存地址" aria-label="Permalink to &quot;1.0 内存地址&quot;">​</a></h2><p>内存地址：在声明变量时，会在计算机内存中申请一个位置，用于存储、修改和获取变量的值，这个位置被称为内存地址内存地址使用十六进制表示。</p><h2 id="_1-1-指针地址和指针类型" tabindex="-1">1.1 指针地址和指针类型 <a class="header-anchor" href="#_1-1-指针地址和指针类型" aria-label="Permalink to &quot;1.1 指针地址和指针类型&quot;">​</a></h2><p>每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go语言中使用<code>&amp;</code>字符放在变量前面对变量进行<code>取地址</code>操作。Go语言中的值类型<code>(int、float、bool、string、array、struct)</code>都有对应的指针类型。如：<code>*int、*int64、*string</code>等。</p><h2 id="_1-2-指针语法" tabindex="-1">1.2 指针语法 <a class="header-anchor" href="#_1-2-指针语法" aria-label="Permalink to &quot;1.2 指针语法&quot;">​</a></h2><p>一个指针变量指向了一个值的内存地址。（也就是我们声明了一个指针之后，可以像变量赋值一样，把一个值的内存地址放入到指针当中）</p><p>类似于变量和常量，在使用指针前你需要声明指针。格式如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> var_name </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">type</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">-type</span><span style="color:#E1E4E8;"> -</span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;">为指针类型</span></span>
<span class="line"><span style="color:#E1E4E8;">var_name </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> 指针变量</span></span>
<span class="line"><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> 用于指定变量是作为一个指针</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> var_name </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">type</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">var</span><span style="color:#D73A49;">-type</span><span style="color:#24292E;"> -</span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;">为指针类型</span></span>
<span class="line"><span style="color:#24292E;">var_name </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> 指针变量</span></span>
<span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> 用于指定变量是作为一个指针</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sp </span><span style="color:#F97583;">*</span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//把s赋值给sp</span></span>
<span class="line"><span style="color:#E1E4E8;">	sp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">s</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sp: </span><span style="color:#79B8FF;">%v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, sp)</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sp: </span><span style="color:#79B8FF;">%v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">sp) </span><span style="color:#6A737D;">//取值</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sp </span><span style="color:#D73A49;">*</span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//把s赋值给sp</span></span>
<span class="line"><span style="color:#24292E;">	sp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">s</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sp: </span><span style="color:#005CC5;">%v\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, sp)</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sp: </span><span style="color:#005CC5;">%v\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">sp) </span><span style="color:#6A737D;">//取值</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h1 id="_2-golang指向数组的指针" tabindex="-1">2.golang指向数组的指针 <a class="header-anchor" href="#_2-golang指向数组的指针" aria-label="Permalink to &quot;2.golang指向数组的指针&quot;">​</a></h1><ul><li>语法，----&gt;指向的是数组中的元素</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ptr [MAX]</span><span style="color:#F97583;">*int</span><span style="color:#E1E4E8;">; 表示数组里面的元素的类型是指针类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">MAX</span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;">变量</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ptr [MAX]</span><span style="color:#D73A49;">*int</span><span style="color:#24292E;">; 表示数组里面的元素的类型是指针类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">MAX</span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;">变量</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> MAX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	a </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ptr [MAX]</span><span style="color:#F97583;">*int</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(ptr)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> MAX; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		ptr[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">a[i]</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> MAX; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a[</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">]= </span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, i, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ptr[i])</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> MAX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	a </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ptr [MAX]</span><span style="color:#D73A49;">*int</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(ptr)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> MAX; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		ptr[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a[i]</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> MAX; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a[</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">]= </span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, i, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ptr[i])</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h1 id="_3-指针函数传参" tabindex="-1">3. 指针函数传参 <a class="header-anchor" href="#_3-指针函数传参" aria-label="Permalink to &quot;3. 指针函数传参&quot;">​</a></h1><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateInt</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateIntByPointer</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">*int</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	a </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 每个变量有2层含义，变量的内存和变量的地址</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a的值:&quot;</span><span style="color:#E1E4E8;">, a)     </span><span style="color:#6A737D;">// a,变量的内存，也就是存在内存当中的内容</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a的内存地址:&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">a) </span><span style="color:#6A737D;">//&amp;a,变量的地址，也就是内存所在内存当中的位置，也叫指针</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 语法糖声明</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// sp 是一个指针变量，存储的是a的内存地址</span></span>
<span class="line"><span style="color:#E1E4E8;">	sp </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">a</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sp的值:&quot;</span><span style="color:#E1E4E8;">, sp)</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sp的内存地址:&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">sp)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// // 声明整数指针</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// var p *int</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// fmt.Println(&quot;p的值:&quot;, p) // 没有初始化,默认值是nil</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// p = &amp;a</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// fmt.Println(&quot;p的值:&quot;, p)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// fmt.Println(&quot;p的内存地址:&quot;, &amp;p)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// *p = 666 //*p操作的不是p的内存，是p所指向的内存(就是a)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// fmt.Println(&quot;p的值:&quot;, *p)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">updateInt</span><span style="color:#E1E4E8;">(a)</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;updateInt后a的值:&quot;</span><span style="color:#E1E4E8;">, a)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">updateIntByPointer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">a)</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;真正修改后a的值:&quot;</span><span style="color:#E1E4E8;">, a)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateInt</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateIntByPointer</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">*int</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	a </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 每个变量有2层含义，变量的内存和变量的地址</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a的值:&quot;</span><span style="color:#24292E;">, a)     </span><span style="color:#6A737D;">// a,变量的内存，也就是存在内存当中的内容</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a的内存地址:&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a) </span><span style="color:#6A737D;">//&amp;a,变量的地址，也就是内存所在内存当中的位置，也叫指针</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 语法糖声明</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// sp 是一个指针变量，存储的是a的内存地址</span></span>
<span class="line"><span style="color:#24292E;">	sp </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sp的值:&quot;</span><span style="color:#24292E;">, sp)</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sp的内存地址:&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">sp)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// // 声明整数指针</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// var p *int</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// fmt.Println(&quot;p的值:&quot;, p) // 没有初始化,默认值是nil</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// p = &amp;a</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// fmt.Println(&quot;p的值:&quot;, p)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// fmt.Println(&quot;p的内存地址:&quot;, &amp;p)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// *p = 666 //*p操作的不是p的内存，是p所指向的内存(就是a)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// fmt.Println(&quot;p的值:&quot;, *p)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">updateInt</span><span style="color:#24292E;">(a)</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;updateInt后a的值:&quot;</span><span style="color:#24292E;">, a)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">updateIntByPointer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a)</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;真正修改后a的值:&quot;</span><span style="color:#24292E;">, a)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,21),t=[o];function e(c,r,E,y,i,F){return n(),a("div",null,t)}const A=s(l,[["render",e]]);export{d as __pageData,A as default};
