import{_ as s,o as a,c as n,R as p}from"./chunks/framework.zUbWieqp.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/go/pprof.md","filePath":"guide/go/pprof.md","lastUpdated":1701928035000}'),l={name:"guide/go/pprof.md"},o=p(`<h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>Go 语言自带的 pprof 是一种性能分析工具，用于帮助开发者分析和优化程序的性能，它可以提供关于 CPU 耗时、内存分配、网络 IO、系统调用、阻塞等待等方面的详细信息。</p><h2 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h2><p>我们来通过一个小例子直观的感受下 pprof 的使用方法，本文所有示例代码运行环境是 go1.20 darwin/arm64。</p><h3 id="示例程序" tabindex="-1">示例程序 <a class="header-anchor" href="#示例程序" aria-label="Permalink to &quot;示例程序&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">bytes</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">math/rand</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">net/http</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">net/http/pprof</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 开启 pprof</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">time</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 换成一个随机字符串并返回对应的缓冲区</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genRandomBytes</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">bytes.Buffer {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> buff bytes.Buffer</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		buff.</span><span style="color:#79B8FF;">Write</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(rand.</span><span style="color:#79B8FF;">Intn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">))})</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">buff</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 循环调用生成字符串方法，模拟 CPU 负载</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">genRandomBytes</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			time.</span><span style="color:#79B8FF;">Sleep</span><span style="color:#E1E4E8;">(time.Second)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 程序绑定到 6060 端口</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// pprof 结果也必须通过该接口获取</span></span>
<span class="line"><span style="color:#E1E4E8;">	log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(http.</span><span style="color:#79B8FF;">ListenAndServe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;127.0.0.1:6060&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">bytes</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">math/rand</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">net/http</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">net/http/pprof</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 开启 pprof</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">time</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 换成一个随机字符串并返回对应的缓冲区</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genRandomBytes</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">bytes.Buffer {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> buff bytes.Buffer</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		buff.</span><span style="color:#005CC5;">Write</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">0</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(rand.</span><span style="color:#005CC5;">Intn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">))})</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">buff</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 循环调用生成字符串方法，模拟 CPU 负载</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">genRandomBytes</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			time.</span><span style="color:#005CC5;">Sleep</span><span style="color:#24292E;">(time.Second)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 程序绑定到 6060 端口</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// pprof 结果也必须通过该接口获取</span></span>
<span class="line"><span style="color:#24292E;">	log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(http.</span><span style="color:#005CC5;">ListenAndServe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1:6060&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="查看程序-pprof-结果" tabindex="-1">查看程序 pprof 结果 <a class="header-anchor" href="#查看程序-pprof-结果" aria-label="Permalink to &quot;查看程序 pprof 结果&quot;">​</a></h3><h4 id="_1-启动程序" tabindex="-1">1. 启动程序 <a class="header-anchor" href="#_1-启动程序" aria-label="Permalink to &quot;1. 启动程序&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.go</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#B392F0;">./main</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.go</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#6F42C1;">./main</span></span></code></pre></div><h4 id="_2-浏览器访问" tabindex="-1">2. 浏览器访问 <a class="header-anchor" href="#_2-浏览器访问" aria-label="Permalink to &quot;2. 浏览器访问&quot;">​</a></h4><p>通过浏览器打开下面的链接，可以看到 pprof 的实时采样数据。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">http://127.0.0.1:6060/debug/pprof/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">http://127.0.0.1:6060/debug/pprof/</span></span></code></pre></div><p>正常情况下，我们可以看到如下页面:</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051657479.png" alt="pprof 默认主页面"></p><h4 id="_3-获取某个指标的采样数据" tabindex="-1">3. 获取某个指标的采样数据 <a class="header-anchor" href="#_3-获取某个指标的采样数据" aria-label="Permalink to &quot;3. 获取某个指标的采样数据&quot;">​</a></h4><p>例如我们想要拿到 CPU 的采样数据，可以点击图中的 profile 链接，此时会进入默认的 30 秒采样阶段 (浏览器表现为不停转圈)，30 秒之后，浏览器会弹出下载窗口， 提示你是否要保存名称为 profile 的采样文件。</p><p>这里我们通过 CURL 的方式来直接下载，读者可以利用等待 CURL 的时间大致了解一下页面上的几个采样类型。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 下载 CPU 样本数据，并保存到 cpu.pprof 文件中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-sS</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://127.0.0.1:6060/debug/pprof/profile?seconds=30&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpu.pprof</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 下载 CPU 样本数据，并保存到 cpu.pprof 文件中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-sS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://127.0.0.1:6060/debug/pprof/profile?seconds=30&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cpu.pprof</span></span></code></pre></div><h4 id="_4-分析采样数据" tabindex="-1">4. 分析采样数据 <a class="header-anchor" href="#_4-分析采样数据" aria-label="Permalink to &quot;4. 分析采样数据&quot;">​</a></h4><p>Go 语言自带的命令行工具集中的 <code>go tool pprof</code> 可以对样本数据进行分析。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 对 cpu.pprof 文件进行分析</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tool</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pprof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpu.pprof</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 对 cpu.pprof 文件进行分析</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tool</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pprof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cpu.pprof</span></span></code></pre></div><p>输入上述命令后，进入 pprof 的专用命令行中:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">Entering</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">interactive</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mode</span><span style="color:#E1E4E8;"> (type </span><span style="color:#9ECBFF;">&quot;help&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commands,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;o&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">options</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">pprof</span><span style="color:#E1E4E8;">) 等待用户输入</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">Entering</span><span style="color:#24292E;"> </span><span style="color:#032F62;">interactive</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mode</span><span style="color:#24292E;"> (type </span><span style="color:#032F62;">&quot;help&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commands,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;o&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">options</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">pprof</span><span style="color:#24292E;">) 等待用户输入</span></span></code></pre></div><h4 id="_5-命令行工具操作方法" tabindex="-1">5. 命令行工具操作方法 <a class="header-anchor" href="#_5-命令行工具操作方法" aria-label="Permalink to &quot;5. 命令行工具操作方法&quot;">​</a></h4><p>此时我们可以输入 help, 看一下相关的操作提示 (Tips: 我们无需死记硬背命令行参数，使用 pprof 的时候输入 help 寻找对应的参数即可):</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 输入 top 后，命令行输出结果如下</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Commands:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">top</span><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">Outputs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">top</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">entries</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">form</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">topproto</span><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">Outputs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">top</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">entries</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">compressed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">protobuf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">format</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">traces</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">Outputs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">all</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">profile</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">samples</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">form</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">tree</span><span style="color:#E1E4E8;">             </span><span style="color:#9ECBFF;">Outputs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rendering</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">graph</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">web</span><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">Visualize</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">through</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">web</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">browser</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Options:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 输入 top 后，命令行输出结果如下</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Commands:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">              </span><span style="color:#032F62;">Outputs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">top</span><span style="color:#24292E;"> </span><span style="color:#032F62;">entries</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">text</span><span style="color:#24292E;"> </span><span style="color:#032F62;">form</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">topproto</span><span style="color:#24292E;">         </span><span style="color:#032F62;">Outputs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">top</span><span style="color:#24292E;"> </span><span style="color:#032F62;">entries</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">compressed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">protobuf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">format</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">traces</span><span style="color:#24292E;">           </span><span style="color:#032F62;">Outputs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">all</span><span style="color:#24292E;"> </span><span style="color:#032F62;">profile</span><span style="color:#24292E;"> </span><span style="color:#032F62;">samples</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">text</span><span style="color:#24292E;"> </span><span style="color:#032F62;">form</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">tree</span><span style="color:#24292E;">             </span><span style="color:#032F62;">Outputs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">text</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rendering</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> </span><span style="color:#032F62;">graph</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">web</span><span style="color:#24292E;">              </span><span style="color:#032F62;">Visualize</span><span style="color:#24292E;"> </span><span style="color:#032F62;">graph</span><span style="color:#24292E;"> </span><span style="color:#032F62;">through</span><span style="color:#24292E;"> </span><span style="color:#032F62;">web</span><span style="color:#24292E;"> </span><span style="color:#032F62;">browser</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Options:</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#005CC5;">...</span></span></code></pre></div><p>这里以 top 参数为例，输出采样数据 CPU 使用 top 5 的调用:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">pprof</span><span style="color:#E1E4E8;">) top 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输出结果如下</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Showing</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nodes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">accounting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4090</span><span style="color:#9ECBFF;">ms,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">75.74</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5400</span><span style="color:#9ECBFF;">ms</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">total</span></span>
<span class="line"><span style="color:#B392F0;">Dropped</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">56</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nodes</span><span style="color:#E1E4E8;"> (cum </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">27</span><span style="color:#9ECBFF;">ms</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">Showing</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">top</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nodes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">out</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">53</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">flat</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">flat%</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">sum%</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">cum</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">cum%</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">1290ms</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23.89</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23.89</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">2920</span><span style="color:#9ECBFF;">ms</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">54.07</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">math/rand.</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">lockedSource)</span><span style="color:#9ECBFF;">.Int63</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">1260ms</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23.33</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">47.22</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">1260</span><span style="color:#9ECBFF;">ms</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23.33</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">sync.</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Mutex)</span><span style="color:#9ECBFF;">.Unlock</span><span style="color:#E1E4E8;"> (inline)</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">740ms</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13.70</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60.93</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">3710</span><span style="color:#9ECBFF;">ms</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">68.70</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">math/rand.</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Rand)</span><span style="color:#9ECBFF;">.Int31n</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">490ms</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">9.07</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">70.00</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">870</span><span style="color:#9ECBFF;">ms</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16.11</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">bytes.</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Buffer)</span><span style="color:#9ECBFF;">.Write</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">310ms</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">5.74</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">75.74</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">310</span><span style="color:#9ECBFF;">ms</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">5.74</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">math/rand.</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">rngSource)</span><span style="color:#9ECBFF;">.Uint64</span><span style="color:#E1E4E8;"> (inline)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">pprof</span><span style="color:#24292E;">) top 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输出结果如下</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Showing</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nodes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">accounting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4090</span><span style="color:#032F62;">ms,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">75.74</span><span style="color:#032F62;">%</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5400</span><span style="color:#032F62;">ms</span><span style="color:#24292E;"> </span><span style="color:#032F62;">total</span></span>
<span class="line"><span style="color:#6F42C1;">Dropped</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">56</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nodes</span><span style="color:#24292E;"> (cum </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">27</span><span style="color:#032F62;">ms</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">Showing</span><span style="color:#24292E;"> </span><span style="color:#032F62;">top</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nodes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">out</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">53</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">flat</span><span style="color:#24292E;">  </span><span style="color:#032F62;">flat%</span><span style="color:#24292E;">   </span><span style="color:#032F62;">sum%</span><span style="color:#24292E;">        </span><span style="color:#032F62;">cum</span><span style="color:#24292E;">   </span><span style="color:#032F62;">cum%</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">1290ms</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23.89</span><span style="color:#032F62;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23.89</span><span style="color:#032F62;">%</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">2920</span><span style="color:#032F62;">ms</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">54.07</span><span style="color:#032F62;">%</span><span style="color:#24292E;">  </span><span style="color:#032F62;">math/rand.</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">lockedSource)</span><span style="color:#032F62;">.Int63</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">1260ms</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23.33</span><span style="color:#032F62;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">47.22</span><span style="color:#032F62;">%</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">1260</span><span style="color:#032F62;">ms</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23.33</span><span style="color:#032F62;">%</span><span style="color:#24292E;">  </span><span style="color:#032F62;">sync.</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Mutex)</span><span style="color:#032F62;">.Unlock</span><span style="color:#24292E;"> (inline)</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">740ms</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13.70</span><span style="color:#032F62;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60.93</span><span style="color:#032F62;">%</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">3710</span><span style="color:#032F62;">ms</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">68.70</span><span style="color:#032F62;">%</span><span style="color:#24292E;">  </span><span style="color:#032F62;">math/rand.</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Rand)</span><span style="color:#032F62;">.Int31n</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">490ms</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">9.07</span><span style="color:#032F62;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">70.00</span><span style="color:#032F62;">%</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">870</span><span style="color:#032F62;">ms</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16.11</span><span style="color:#032F62;">%</span><span style="color:#24292E;">  </span><span style="color:#032F62;">bytes.</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Buffer)</span><span style="color:#032F62;">.Write</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">310ms</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">5.74</span><span style="color:#032F62;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">75.74</span><span style="color:#032F62;">%</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">310</span><span style="color:#032F62;">ms</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">5.74</span><span style="color:#032F62;">%</span><span style="color:#24292E;">  </span><span style="color:#032F62;">math/rand.</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">rngSource)</span><span style="color:#032F62;">.Uint64</span><span style="color:#24292E;"> (inline)</span></span></code></pre></div><p>通过上面的输出结果，可以很清晰地看到消耗最多 CPU 资源的 5 个调用方法。</p><p>这里需要注意的是第三列的 sum% 的字段，表示的是前 N 行的 flat% 列的数值总和，例如第三行的的 60.93% 就表示:</p><blockquote><p>第一行 + 第二行 + 第三行 = 23.89% + 23.33% + 13.70% = 60.93%</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 通过 cum 列排序</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">pprof</span><span style="color:#E1E4E8;">) top 5 -cum</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 通过 cum 列排序</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">pprof</span><span style="color:#24292E;">) top 5 -cum</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">...</span></span></code></pre></div><h3 id="列属性" tabindex="-1">列属性 <a class="header-anchor" href="#列属性" aria-label="Permalink to &quot;列属性&quot;">​</a></h3><p>下面对每列表示的数据做一个简单的概述:</p><ul><li>flat： 表示函数自身的 CPU 使用时间，单位为纳秒</li><li>flat%：表示函数自身的 CPU 使用时间占总时间的百分比</li><li>sum%： 表示函数及其内部调用的其他函数的 CPU 使用时间占总时间的百分比</li><li>cum： 表示函数及其内部调用的其他函数的 CPU 使用时间之和，单位为纳秒</li><li>cum%： 表示函数及其内部调用的其他函数的 CPU 使用时间之和占总时间的百分比</li></ul><p><strong>flat 和 cum 的区别在于</strong>: flat 只统计函数自身的 CPU 使用时间，不包括调用其他函数的时间，而 cum 则包括了函数自身的时间和调用其他函数的时间。</p><h3 id="其他用法" tabindex="-1">其他用法 <a class="header-anchor" href="#其他用法" aria-label="Permalink to &quot;其他用法&quot;">​</a></h3><p>刚才的示例过程是先使用 CURL 下载采样数据，然后使用 pprof 命令工具进行分析，可以将这两个步骤合并到一个步骤中。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tool</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pprof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://127.0.0.1:6060/debug/pprof/profile?seconds=30&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tool</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pprof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://127.0.0.1:6060/debug/pprof/profile?seconds=30&quot;</span></span></code></pre></div><p>上述命令会在采样结果保存完成后，自动进入 pprof 的专用命令行中。</p><h2 id="采样数据列表" tabindex="-1">采样数据列表 <a class="header-anchor" href="#采样数据列表" aria-label="Permalink to &quot;采样数据列表&quot;">​</a></h2><table><thead><tr><th>采样类型</th><th>描述</th></tr></thead><tbody><tr><td>allocs</td><td>内存总分配</td></tr><tr><td>block</td><td>同步原语导致的阻塞</td></tr><tr><td>cmdline</td><td>进程启动命令行</td></tr><tr><td>goroutine</td><td>当前所有的 goroutine</td></tr><tr><td>heap</td><td>内存分析</td></tr><tr><td>mutex</td><td>互斥锁</td></tr><tr><td>profile</td><td>CPU</td></tr><tr><td>threadcreate</td><td>操作系统中的线程创建</td></tr><tr><td>trace</td><td>程序执行 trace, 和其他样本数据不同的是，这个需要使用 go tool trace 来分析</td></tr><tr><td>full goroutine stack dump</td><td>打印所有 goroutine 的堆栈</td></tr></tbody></table><h3 id="主要参数" tabindex="-1">主要参数 <a class="header-anchor" href="#主要参数" aria-label="Permalink to &quot;主要参数&quot;">​</a></h3><ul><li>seconds: 设置采样时间，单位秒</li><li>debug: <ul><li>0: 采样函数地址列表，需要利用 pprof 才能还原</li><li>1: 将函数地址转换为函数名，可以在浏览器中直接查看</li><li>2: 除了函数地址外，还有对应的调用堆栈，同样可以在浏览器中直接查看</li></ul></li></ul><h3 id="内存分析字段说明" tabindex="-1">内存分析字段说明 <a class="header-anchor" href="#内存分析字段说明" aria-label="Permalink to &quot;内存分析字段说明&quot;">​</a></h3><p>通过浏览器直接访问 <a href="http://127.0.0.1:6060/debug/pprof/heap?debug=1" target="_blank" rel="noreferrer">http://127.0.0.1:6060/debug/pprof/heap?debug=1</a>, 然后加载页面底部，可以看到内存相关的数据，我们选择一些常用的指标进行说明。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 示例内存分析数据</span></span>
<span class="line"><span style="color:#6A737D;"># 对应的标准库中的对象为 runtime.MemStats{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># runtime.MemStats</span></span>
<span class="line"><span style="color:#6A737D;"># Alloc = 1382056</span></span>
<span class="line"><span style="color:#6A737D;"># TotalAlloc = 2855089694704</span></span>
<span class="line"><span style="color:#6A737D;"># Sys = 19334408</span></span>
<span class="line"><span style="color:#6A737D;"># Lookups = 0</span></span>
<span class="line"><span style="color:#6A737D;"># Mallocs = 871957108</span></span>
<span class="line"><span style="color:#6A737D;"># Frees = 871955873</span></span>
<span class="line"><span style="color:#6A737D;"># HeapAlloc = 1382056</span></span>
<span class="line"><span style="color:#6A737D;"># HeapSys = 11993088</span></span>
<span class="line"><span style="color:#6A737D;"># HeapIdle = 9977856</span></span>
<span class="line"><span style="color:#6A737D;"># HeapInuse = 2015232</span></span>
<span class="line"><span style="color:#6A737D;"># HeapReleased = 7012352</span></span>
<span class="line"><span style="color:#6A737D;"># HeapObjects = 1235</span></span>
<span class="line"><span style="color:#6A737D;"># Stack = 589824 / 589824</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 示例内存分析数据</span></span>
<span class="line"><span style="color:#6A737D;"># 对应的标准库中的对象为 runtime.MemStats{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># runtime.MemStats</span></span>
<span class="line"><span style="color:#6A737D;"># Alloc = 1382056</span></span>
<span class="line"><span style="color:#6A737D;"># TotalAlloc = 2855089694704</span></span>
<span class="line"><span style="color:#6A737D;"># Sys = 19334408</span></span>
<span class="line"><span style="color:#6A737D;"># Lookups = 0</span></span>
<span class="line"><span style="color:#6A737D;"># Mallocs = 871957108</span></span>
<span class="line"><span style="color:#6A737D;"># Frees = 871955873</span></span>
<span class="line"><span style="color:#6A737D;"># HeapAlloc = 1382056</span></span>
<span class="line"><span style="color:#6A737D;"># HeapSys = 11993088</span></span>
<span class="line"><span style="color:#6A737D;"># HeapIdle = 9977856</span></span>
<span class="line"><span style="color:#6A737D;"># HeapInuse = 2015232</span></span>
<span class="line"><span style="color:#6A737D;"># HeapReleased = 7012352</span></span>
<span class="line"><span style="color:#6A737D;"># HeapObjects = 1235</span></span>
<span class="line"><span style="color:#6A737D;"># Stack = 589824 / 589824</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span></code></pre></div><table><thead><tr><th>字段名称</th><th>描述</th></tr></thead><tbody><tr><td>TotalAlloc</td><td>进程启动后累计分配总内存</td></tr><tr><td>Sys</td><td>从操作系统申请的总内存</td></tr><tr><td>Frees</td><td>累计释放的堆内存</td></tr><tr><td>HeapAlloc</td><td>当前正在使用的内存 + 未被 GC 释放的内存</td></tr><tr><td>HeapSys</td><td>从操作系统申请的堆内存</td></tr><tr><td>HeapIdle</td><td>空闲内存，可以被申请甚至作为栈使用</td></tr><tr><td>HeapInuse</td><td>当前正在使用的堆内存</td></tr><tr><td>HeapReleased</td><td>已经归还给操作系统的堆内存</td></tr><tr><td>Sys</td><td>从操作系统申请的总内存</td></tr><tr><td>StackSys</td><td>StackInuse + 直接从操作系统申请的内存</td></tr><tr><td>StackInuse</td><td>当前正在使用的栈内存</td></tr></tbody></table><h3 id="内存关键指标" tabindex="-1">内存关键指标 <a class="header-anchor" href="#内存关键指标" aria-label="Permalink to &quot;内存关键指标&quot;">​</a></h3><ul><li><strong>inuse_objects</strong>: 内存中留存的对象数量</li><li><strong>inuse_space</strong>: 程序实际占用内存</li><li><strong>alloc_objects</strong>: 内存中分配的对象数量 (如果该指标明显大于 inuse_objects 指标，说明存在内存分配尖峰)</li><li><strong>alloc_space</strong>: 程序分配内存 (如果该指标明显大于 inuse_space 指标，说明存在内存分配尖峰)</li></ul><blockquote><p>排查内存相关问题时，除了关注内存使用和闲置相关参数外，还要关注 GC 频率、GC 时间等参数。</p></blockquote><p>读者可以在 pprof 页面上点击不同的链接来查看不同的采样数据，需要注意的是: profile 和 trace 两个指标默认的采样时间是 30 秒，其他指标都是即时的 (每次刷新显示不同的数据)。</p><h2 id="graphiv" tabindex="-1">graphiv <a class="header-anchor" href="#graphiv" aria-label="Permalink to &quot;graphiv&quot;">​</a></h2><p>pprof 可以生成样本数据分析图 (如 CPU 火焰图) 达到更好的可观测性，但是生成的图需要使用 graphiv 进行渲染，如果要运行 pprof 的机器还未安装 graphviz, 可以参考 <a href="https://graphviz.org/download/" target="_blank" rel="noreferrer">官网的安装教程</a> 进行安装。</p><h2 id="启动-web-ui" tabindex="-1">启动 Web UI <a class="header-anchor" href="#启动-web-ui" aria-label="Permalink to &quot;启动 Web UI&quot;">​</a></h2><p>虽然 pprof 提供的命令行操作方式已经非常方便，但是如果我们希望使用更加直观的 UI 方式来展现采样分析结果，可以使用 Web UI 功能。 <strong>Web UI 提供了和 pprof 命令行同样的功能，但是可观测性更强</strong>。</p><h3 id="_1-通过-http-参数" tabindex="-1">1. 通过 -http 参数 <a class="header-anchor" href="#_1-通过-http-参数" aria-label="Permalink to &quot;1. 通过 -http 参数&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tool</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pprof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-http=127.0.0.1:6061</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://127.0.0.1:6060/debug/pprof/profile?seconds=30&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输出如下</span></span>
<span class="line"><span style="color:#B392F0;">Fetching</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">profile</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">over</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HTTP</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http://127.0.0.1:6060/debug/pprof/profile?seconds=</span><span style="color:#79B8FF;">30</span></span>
<span class="line"><span style="color:#B392F0;">Saved</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">profile</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/stars/pprof/pprof.main.samples.cpu.004.pb.gz</span></span>
<span class="line"><span style="color:#B392F0;">Serving</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">web</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">UI</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http://127.0.0.1:6061</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tool</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pprof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-http=127.0.0.1:6061</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://127.0.0.1:6060/debug/pprof/profile?seconds=30&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输出如下</span></span>
<span class="line"><span style="color:#6F42C1;">Fetching</span><span style="color:#24292E;"> </span><span style="color:#032F62;">profile</span><span style="color:#24292E;"> </span><span style="color:#032F62;">over</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HTTP</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http://127.0.0.1:6060/debug/pprof/profile?seconds=</span><span style="color:#005CC5;">30</span></span>
<span class="line"><span style="color:#6F42C1;">Saved</span><span style="color:#24292E;"> </span><span style="color:#032F62;">profile</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/stars/pprof/pprof.main.samples.cpu.004.pb.gz</span></span>
<span class="line"><span style="color:#6F42C1;">Serving</span><span style="color:#24292E;"> </span><span style="color:#032F62;">web</span><span style="color:#24292E;"> </span><span style="color:#032F62;">UI</span><span style="color:#24292E;"> </span><span style="color:#032F62;">on</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http://127.0.0.1:6061</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span></code></pre></div><p>上述命令会在采样结果保存完成后，新启动一个 Web Server (端口为 6061)，自动打开浏览器并跳转到 <a href="http://127.0.0.1:6061/ui/%E3%80%82" target="_blank" rel="noreferrer">http://127.0.0.1:6061/ui/。</a></p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051657517.png" alt="pprof 火焰图主页面"></p><h3 id="_2-通过-web-参数" tabindex="-1">2. 通过 web 参数 <a class="header-anchor" href="#_2-通过-web-参数" aria-label="Permalink to &quot;2. 通过 web 参数&quot;">​</a></h3><p>输入 go tool pprof main cpu.pprof 进入到 pprof 的专用命令行中，然后输入参数 web。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Entering</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">interactive</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mode</span><span style="color:#E1E4E8;"> (type </span><span style="color:#9ECBFF;">&quot;help&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commands,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;o&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">options</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">pprof</span><span style="color:#E1E4E8;">) web</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输出如下</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Start</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/tmp/pprof001.svg&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Entering</span><span style="color:#24292E;"> </span><span style="color:#032F62;">interactive</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mode</span><span style="color:#24292E;"> (type </span><span style="color:#032F62;">&quot;help&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commands,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;o&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">options</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">pprof</span><span style="color:#24292E;">) web</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输出如下</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/tmp/pprof001.svg&quot;</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span></code></pre></div><p>上述命令会生成一个 SVG 文件，然后自动在浏览器打开，但是打开的页面中只有一个图片，没有其他功能 (所以后文中都采用刚才的第一种方法作为 Web UI 打开方式)。</p><h2 id="web-ui-功能概览" tabindex="-1">Web UI 功能概览 <a class="header-anchor" href="#web-ui-功能概览" aria-label="Permalink to &quot;Web UI 功能概览&quot;">​</a></h2><p>针对单个采样结果的分析，Web UI 提供了非常强大的功能，下面通过示例图来演示。</p><p>所有的功能菜单都在导航栏，直接选择对应的数据即可。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051657765.png" alt="Web UI top 函数"></p><h3 id="top-函数" tabindex="-1">top 函数 <a class="header-anchor" href="#top-函数" aria-label="Permalink to &quot;top 函数&quot;">​</a></h3><p>功能和 pprof 命令行中的 top 一样，显示采样 top N 的数据:</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051657644.png" alt="Web UI top 函数"></p><h3 id="火焰图" tabindex="-1">火焰图 <a class="header-anchor" href="#火焰图" aria-label="Permalink to &quot;火焰图&quot;">​</a></h3><p>基于 Brendan Gregg 大佬发明的火焰图，根据图中的颜色深浅，调用链形状的长短，几乎可以瞬间定位到出现问题的方法。</p><p>功能和 pprof 命令行中的 top 一样，显示采样 top N 的数据:</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051657191.png" alt="Web UI flamegraph"></p><h3 id="peek" tabindex="-1">peek <a class="header-anchor" href="#peek" aria-label="Permalink to &quot;peek&quot;">​</a></h3><p>可以看到采样分析数据和对应的代码。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051657976.png" alt="Web UI peek"></p><h3 id="source" tabindex="-1">source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;source&quot;">​</a></h3><p>可以看到采样分析数据和对应的代码函数相关信息。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051656476.png" alt="Web UI source"></p><h3 id="其他菜单" tabindex="-1">其他菜单 <a class="header-anchor" href="#其他菜单" aria-label="Permalink to &quot;其他菜单&quot;">​</a></h3><p>限于篇幅，其他菜单功能这里就不一一展示了，读者可以在 Web UI 页面自行研究。</p><h2 id="trace-采样" tabindex="-1">trace 采样 <a class="header-anchor" href="#trace-采样" aria-label="Permalink to &quot;trace 采样&quot;">​</a></h2><p>写到这里，pprof 数据采样分析差不多就介绍完了，然后这里再简单介绍一下 trace 数据采样分析，两者的区别在于:</p><ul><li><strong>pprof</strong> : 是一种基于时间的采样方法，周期性地暂停程序并记录当前函数调用堆栈信息，以及每个函数调用的执行时间，这种采样方法可以提供关于函数调用频率和执行时间的统计信息，从而帮助分析程序的性能瓶颈</li><li><strong>trace</strong> : 是一种基于事件的采样方法，在程序运行过程中，trace 会记录特定事件（如函数调用、系统调用等）发生的详细信息，包括事件发生的时间戳、相关的上下文信息等。通过分析这些事件信息，可以了解程序的执行路径、并发情况、阻塞等待等问题</li></ul><p>和基于毫秒频率的 pprof 定时数据采样相比，基于事件的 trace 精确到了纳秒，因此对系统的性能影响还是非常大的。 一般情况下不需要使用 trace 来定位性能问题，除非是需要获取运行时的程序数据，例如 goroutine 调度、阻塞、GC 等。</p><h3 id="采样命令参数" tabindex="-1">采样命令参数 <a class="header-anchor" href="#采样命令参数" aria-label="Permalink to &quot;采样命令参数&quot;">​</a></h3><p>可以直接将路径中的 path 参数指定为 trace, 即可开始 trace 采样。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># trace 采样数据，时间 30 秒</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-sS</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://127.0.0.1:6060/debug/pprof/trace?seconds=30&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">trace.out</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># trace 采样数据，时间 30 秒</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-sS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://127.0.0.1:6060/debug/pprof/trace?seconds=30&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">trace.out</span></span></code></pre></div><p>采样数据完成后，可以通过 go tool trace 命令打开采样文件:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tool</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">trace</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">trace.out</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输入如下:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">2023/07/29</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">11</span><span style="color:#9ECBFF;">:44:53</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Parsing</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">trace...</span></span>
<span class="line"><span style="color:#B392F0;">2023/07/29</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">11</span><span style="color:#9ECBFF;">:44:53</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Splitting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">trace...</span></span>
<span class="line"><span style="color:#B392F0;">2023/07/29</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">11</span><span style="color:#9ECBFF;">:44:53</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Opening</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">browser.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Trace</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">viewer</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">listening</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http://127.0.0.1:64552</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tool</span><span style="color:#24292E;"> </span><span style="color:#032F62;">trace</span><span style="color:#24292E;"> </span><span style="color:#032F62;">trace.out</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输入如下:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">2023/07/29</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">11</span><span style="color:#032F62;">:44:53</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Parsing</span><span style="color:#24292E;"> </span><span style="color:#032F62;">trace...</span></span>
<span class="line"><span style="color:#6F42C1;">2023/07/29</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">11</span><span style="color:#032F62;">:44:53</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Splitting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">trace...</span></span>
<span class="line"><span style="color:#6F42C1;">2023/07/29</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">11</span><span style="color:#032F62;">:44:53</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Opening</span><span style="color:#24292E;"> </span><span style="color:#032F62;">browser.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Trace</span><span style="color:#24292E;"> </span><span style="color:#032F62;">viewer</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">listening</span><span style="color:#24292E;"> </span><span style="color:#032F62;">on</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http://127.0.0.1:64552</span></span></code></pre></div><p>输入上述命令之后，会启动一个 Web Server (端口号随机), 并且自动在浏览器中打开页面:</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051656081.png" alt="trace 主页面"></p><h3 id="trace-web-ui" tabindex="-1">trace Web UI <a class="header-anchor" href="#trace-web-ui" aria-label="Permalink to &quot;trace Web UI&quot;">​</a></h3><p>trace Web UI 和 pprof Web UI 提供的功能类似，只不过各功能点的链接分散在了页面中，而不是集中到顶部的导航区域。</p><p>点击页面的 View trace 链接，可以显示 goroutine、内存分析、操作系统线程调用的相关信息。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051656152.png" alt="View trace"></p><p>输入 shift + / 组合键，可以弹出 “使用帮助” 窗口:</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051656910.png" alt="View trace"></p><p>例如我们可以按 w 键缩小时间单位粒度，按 s 键放大时间单位粒度。</p><p>点击页面的 Goroutine analysis 链接，可以显示每个 goroutine 的编号、调用时长、GMP 调度、网络 IO、阻塞、GC 等方面的数据。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051656772.png" alt="Goroutine analysis"></p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051656733.png" alt="Goroutine analysis"></p><p>点击 Profiles 区域的链接，可以查看程序的网络 IO、同步、系统调用、GMP 调度等方面的数据。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051656575.png" alt="Profiles"></p><p>限于篇幅，页面中其他链接功能这里就不一一展示了，读者可以在 Web UI 页面自行研究。</p><hr><h2 id="比较优化前和优化后" tabindex="-1">比较优化前和优化后 <a class="header-anchor" href="#比较优化前和优化后" aria-label="Permalink to &quot;比较优化前和优化后&quot;">​</a></h2><p>我们可以在优化代码之前先生成一个 pprof 采样文件，在完成代码优化之后再生成一个 pprof 采样文件，通过比较两者的差异结果来证明我们的优化工作是否有效。 需要注意的是，优化前后必须使用相同的运行环境，保证采样数据的可比性。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 优化前采样</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-sS</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://127.0.0.1:6060/debug/pprof/profile?seconds=30&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpu_before.pprof</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 优化后采样</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-sS</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://127.0.0.1:6060/debug/pprof/profile?seconds=30&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpu_after.pprof</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 比较差异 (Web UI)</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tool</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pprof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-http=127.0.0.1:6062</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--base</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpu_before.pprof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpu_after.pprof</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 优化前采样</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-sS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://127.0.0.1:6060/debug/pprof/profile?seconds=30&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cpu_before.pprof</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 优化后采样</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-sS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://127.0.0.1:6060/debug/pprof/profile?seconds=30&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cpu_after.pprof</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 比较差异 (Web UI)</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tool</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pprof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-http=127.0.0.1:6062</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--base</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cpu_before.pprof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cpu_after.pprof</span></span></code></pre></div><p>上述命令会新启动一个 Web Server (端口为 6062)，自动打开浏览器并跳转到 <a href="http://127.0.0.1:6062/ui/" target="_blank" rel="noreferrer">http://127.0.0.1:6062/ui/</a>, 通过 UI 我们可以很直观地看到两个采样数据的差异。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051656132.png" alt="pprof 优化前后差异"></p><h2 id="非-web-服务使用-pprof" tabindex="-1">非 Web 服务使用 pprof <a class="header-anchor" href="#非-web-服务使用-pprof" aria-label="Permalink to &quot;非 Web 服务使用 pprof&quot;">​</a></h2><p>在非 Web 服务中 (如后台服务) 使用 pprof 时，可以使用标准库中的 runtime/pprof 包, 前文示例中的 net/http/pprof 包本质也是对 runtime/pprof 包的一层 Web 封装。</p><h3 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">math/rand</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">os</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">runtime/pprof</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">sort</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 设置采样数据保存文件</span></span>
<span class="line"><span style="color:#E1E4E8;">	file </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/tmp/runtime_cpu.pprof&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	f, _ </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">OpenFile</span><span style="color:#E1E4E8;">(file, os.O_CREATE</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">os.O_RDWR, </span><span style="color:#79B8FF;">0644</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> f.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			log.</span><span style="color:#79B8FF;">Fatalln</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 开始 CPU 采样</span></span>
<span class="line"><span style="color:#E1E4E8;">	err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> pprof.</span><span style="color:#79B8FF;">StartCPUProfile</span><span style="color:#E1E4E8;">(f)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> pprof.</span><span style="color:#79B8FF;">StopCPUProfile</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 每次生成 10000 个随机数字进行排序</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		nums </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">genRandomNumbers</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		sort.</span><span style="color:#79B8FF;">Slice</span><span style="color:#E1E4E8;">(nums, </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(i, j </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nums[i] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> nums[j]</span></span>
<span class="line"><span style="color:#E1E4E8;">		})</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 生成随机数切片</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genRandomNumbers</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) []</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	nums </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, n)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		nums[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rand.</span><span style="color:#79B8FF;">Int</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nums</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">math/rand</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">os</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">runtime/pprof</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">sort</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 设置采样数据保存文件</span></span>
<span class="line"><span style="color:#24292E;">	file </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/tmp/runtime_cpu.pprof&quot;</span></span>
<span class="line"><span style="color:#24292E;">	f, _ </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">OpenFile</span><span style="color:#24292E;">(file, os.O_CREATE</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">os.O_RDWR, </span><span style="color:#005CC5;">0644</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> f.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			log.</span><span style="color:#005CC5;">Fatalln</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 开始 CPU 采样</span></span>
<span class="line"><span style="color:#24292E;">	err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> pprof.</span><span style="color:#005CC5;">StartCPUProfile</span><span style="color:#24292E;">(f)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">panic</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> pprof.</span><span style="color:#005CC5;">StopCPUProfile</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 每次生成 10000 个随机数字进行排序</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		nums </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">genRandomNumbers</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		sort.</span><span style="color:#005CC5;">Slice</span><span style="color:#24292E;">(nums, </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(i, j </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nums[i] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> nums[j]</span></span>
<span class="line"><span style="color:#24292E;">		})</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 生成随机数切片</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genRandomNumbers</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) []</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	nums </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, n)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		nums[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rand.</span><span style="color:#005CC5;">Int</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nums</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>直接运行:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.go</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.go</span></span></code></pre></div><p>程序执行结束后，会生成一个 CPU 的采样文件: /tmp/runtime_cpu.pprof, 我们继续使用 Web UI 打开:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tool</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pprof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-http=:6062</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/tmp/runtime_cpu.pprof</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tool</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pprof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-http=:6062</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/tmp/runtime_cpu.pprof</span></span></code></pre></div><p>打开后的页面如图所示，功能点在前文 Web UI 小节已经讲过了，这里不再赘述。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051656056.png" alt="pprof CPU 采样"></p><h3 id="采样其他指标数据" tabindex="-1">采样其他指标数据 <a class="header-anchor" href="#采样其他指标数据" aria-label="Permalink to &quot;采样其他指标数据&quot;">​</a></h3><p>除了采样 CPU 的数据，也可以通过指定参数来采样其他数据，因为标准库的采样方法使用起来有些繁琐，我们这里使用开源的 <a href="https://github.com/pkg/profile" target="_blank" rel="noreferrer">profile</a> 作为演示。</p><p>在刚才的例子代码基础上稍作修改，将 CPU 采样改为内存采样，代码如下:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/pkg/profile</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">math/rand</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">sort</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 开始内存采样</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> profile.</span><span style="color:#79B8FF;">Start</span><span style="color:#E1E4E8;">(profile.MemProfile, profile.</span><span style="color:#79B8FF;">MemProfileRate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)).</span><span style="color:#79B8FF;">Stop</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 每次生成 10000 个随机数字进行排序</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		nums </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">genRandomNumbers</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		sort.</span><span style="color:#79B8FF;">Slice</span><span style="color:#E1E4E8;">(nums, </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(i, j </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nums[i] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> nums[j]</span></span>
<span class="line"><span style="color:#E1E4E8;">		})</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 生成随机数切片</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genRandomNumbers</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) []</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	nums </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, n)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		nums[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rand.</span><span style="color:#79B8FF;">Int</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nums</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/pkg/profile</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">math/rand</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">sort</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 开始内存采样</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> profile.</span><span style="color:#005CC5;">Start</span><span style="color:#24292E;">(profile.MemProfile, profile.</span><span style="color:#005CC5;">MemProfileRate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)).</span><span style="color:#005CC5;">Stop</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 每次生成 10000 个随机数字进行排序</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		nums </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">genRandomNumbers</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		sort.</span><span style="color:#005CC5;">Slice</span><span style="color:#24292E;">(nums, </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(i, j </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nums[i] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> nums[j]</span></span>
<span class="line"><span style="color:#24292E;">		})</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 生成随机数切片</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genRandomNumbers</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) []</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	nums </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, n)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		nums[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rand.</span><span style="color:#005CC5;">Int</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nums</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>直接运行:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.go</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.go</span></span></code></pre></div><p>输出结果如下 (具体路径取决于操作系统):</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">2023/07/29</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">11</span><span style="color:#9ECBFF;">:54:55</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">profile:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">memory</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">profiling</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">enabled</span><span style="color:#E1E4E8;"> (rate </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">), /tmp/profile3144997289/mem.pprof</span></span>
<span class="line"><span style="color:#B392F0;">2023/07/29</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">11</span><span style="color:#9ECBFF;">:54:56</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">profile:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">memory</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">profiling</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">disabled,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/tmp/profile3144997289/mem.pprof</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">2023/07/29</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">11</span><span style="color:#032F62;">:54:55</span><span style="color:#24292E;"> </span><span style="color:#032F62;">profile:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">memory</span><span style="color:#24292E;"> </span><span style="color:#032F62;">profiling</span><span style="color:#24292E;"> </span><span style="color:#032F62;">enabled</span><span style="color:#24292E;"> (rate </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), /tmp/profile3144997289/mem.pprof</span></span>
<span class="line"><span style="color:#6F42C1;">2023/07/29</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">11</span><span style="color:#032F62;">:54:56</span><span style="color:#24292E;"> </span><span style="color:#032F62;">profile:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">memory</span><span style="color:#24292E;"> </span><span style="color:#032F62;">profiling</span><span style="color:#24292E;"> </span><span style="color:#032F62;">disabled,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/tmp/profile3144997289/mem.pprof</span></span></code></pre></div><p>使用 Web UI 打开内存采样文件，数据页面展示如下，读者可以对比一下和 CPU 采样数据页面的差异。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tool</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pprof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-http=:6062</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/tmp/profile3144997289/mem.pprof</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tool</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pprof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-http=:6062</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/tmp/profile3144997289/mem.pprof</span></span></code></pre></div><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051655918.png" alt="pprof 内存采样"></p><h3 id="采样其他指标数据-1" tabindex="-1">采样其他指标数据 <a class="header-anchor" href="#采样其他指标数据-1" aria-label="Permalink to &quot;采样其他指标数据&quot;">​</a></h3><p>参考官方的示例代码。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">flag</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/pkg/profile</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// use the flags package to selectively enable profiling.</span></span>
<span class="line"><span style="color:#E1E4E8;">	mode </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> flag.</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;profile.mode&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;enable profiling mode, one of [cpu, mem, mutex, block]&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	flag.</span><span style="color:#79B8FF;">Parse</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">mode {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;cpu&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> profile.</span><span style="color:#79B8FF;">Start</span><span style="color:#E1E4E8;">(profile.CPUProfile).</span><span style="color:#79B8FF;">Stop</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mem&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> profile.</span><span style="color:#79B8FF;">Start</span><span style="color:#E1E4E8;">(profile.MemProfile).</span><span style="color:#79B8FF;">Stop</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mutex&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> profile.</span><span style="color:#79B8FF;">Start</span><span style="color:#E1E4E8;">(profile.MutexProfile).</span><span style="color:#79B8FF;">Stop</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;block&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> profile.</span><span style="color:#79B8FF;">Start</span><span style="color:#E1E4E8;">(profile.BlockProfile).</span><span style="color:#79B8FF;">Stop</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// do nothing</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">flag</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/pkg/profile</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// use the flags package to selectively enable profiling.</span></span>
<span class="line"><span style="color:#24292E;">	mode </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> flag.</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;profile.mode&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;enable profiling mode, one of [cpu, mem, mutex, block]&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	flag.</span><span style="color:#005CC5;">Parse</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">mode {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;cpu&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> profile.</span><span style="color:#005CC5;">Start</span><span style="color:#24292E;">(profile.CPUProfile).</span><span style="color:#005CC5;">Stop</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mem&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> profile.</span><span style="color:#005CC5;">Start</span><span style="color:#24292E;">(profile.MemProfile).</span><span style="color:#005CC5;">Stop</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mutex&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> profile.</span><span style="color:#005CC5;">Start</span><span style="color:#24292E;">(profile.MutexProfile).</span><span style="color:#005CC5;">Stop</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;block&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> profile.</span><span style="color:#005CC5;">Start</span><span style="color:#24292E;">(profile.BlockProfile).</span><span style="color:#005CC5;">Stop</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// do nothing</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="通过单元测试采样" tabindex="-1">通过单元测试采样 <a class="header-anchor" href="#通过单元测试采样" aria-label="Permalink to &quot;通过单元测试采样&quot;">​</a></h2><p>除了 Web 和后台服务中可以采样，在单元测试中也可以采样:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># CPU 采样</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-bench=</span><span style="color:#9ECBFF;">&quot;XXX$&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-run=</span><span style="color:#9ECBFF;">&#39;XXX$&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-cpuprofile=cpu.pprof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 内存 采样</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-bench=</span><span style="color:#9ECBFF;">&quot;XXX$&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-run=</span><span style="color:#9ECBFF;">&#39;XXX$&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-cpuprofile=cpu.pprof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># trace 采样</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-bench=</span><span style="color:#9ECBFF;">&quot;XXX$&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-run=</span><span style="color:#9ECBFF;">&#39;XXX$&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-trace=trace.out</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># CPU 采样</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-bench=</span><span style="color:#032F62;">&quot;XXX$&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-run=</span><span style="color:#032F62;">&#39;XXX$&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-cpuprofile=cpu.pprof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 内存 采样</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-bench=</span><span style="color:#032F62;">&quot;XXX$&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-run=</span><span style="color:#032F62;">&#39;XXX$&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-cpuprofile=cpu.pprof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># trace 采样</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-bench=</span><span style="color:#032F62;">&quot;XXX$&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-run=</span><span style="color:#032F62;">&#39;XXX$&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-trace=trace.out</span></span></code></pre></div><p>限于篇幅，数据采样过程和分析过程这里不再演示，感兴趣的读者直接参照前文的示例进行试验。</p><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><ul><li>优化工作在大部分情况下，内存分析 (例如 go tool pprof –alloc_objects app mem.pprof) 通常比 CPU 耗时分析 (例如 go tool pprof app cpu.pprof) 更容易分析性能瓶颈</li><li>通过 goroutine 采样来分析 goroutine 泄漏问题 (例如访问 <a href="http://127.0.0.1:6060/debug/pprof/goroutine?debug=1%EF%BC%8C%E6%9F%A5%E7%9C%8B" target="_blank" rel="noreferrer">http://127.0.0.1:6060/debug/pprof/goroutine?debug=1，查看</a> goroutine profile 数量)，原理类似 <a href="https://dbwu.tech/posts/golang_goroutine_leak/" target="_blank" rel="noreferrer">这篇文章中提到的</a></li><li>指定代码块进行采样 (例如使用 pprof.StartCPUProfile() 和 pprof.StopCPUProfile() 指定要采样的代码块)</li><li>对于 hot path 上面的代码，在单元测试期间就要进行性能采样分析</li><li><strong>生产环境</strong> 不要将 pprof HTTP 服务直接暴露给外部或公共网络，以防止未经授权的访问，只有在需要进行性能分析时启动该服务</li><li><strong>生产环境</strong> 中设置专门用于采样的服务容器 (例如和灰度类似的采样服务)，设置负载均衡自动分配一定百分比的生产流量到采样服务，线上遇到问题时就可以第一时间进行处理</li><li><strong>生产环境</strong> 中设置自定义的 pprof PATH，例如 <a href="https://github.com/gin-contrib/pprof" target="_blank" rel="noreferrer">Gin pprof</a> 中提供的 API, 或者 <a href="https://stackoverflow.com/a/19591389/12203967" target="_blank" rel="noreferrer">这个示例程序</a></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文主要讲述了 Go 语言自带的性能分析套件 pprof 和 trace, 再加上以前的这两篇文章 <a href="https://dbwu.tech/posts/golang_godebug/" target="_blank" rel="noreferrer">GODEBUG 环境变量详解</a>, <a href="https://dbwu.tech/posts/golang_delve/" target="_blank" rel="noreferrer">Go Delve 调试必知必会</a>, 可以将这几项工具组合成一把 Go 语言程序调试的 “瑞士军刀”。</p><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ul><li><a href="https://go.dev/blog/pprof" target="_blank" rel="noreferrer">pprof</a></li><li><a href="https://github.com/google/pprof/blob/main/doc/README.md" target="_blank" rel="noreferrer">google/pprof</a></li><li><a href="https://github.com/pkg/profile" target="_blank" rel="noreferrer">profile</a></li></ul><h2 id="扩展阅读" tabindex="-1">扩展阅读 <a class="header-anchor" href="#扩展阅读" aria-label="Permalink to &quot;扩展阅读&quot;">​</a></h2><ul><li><a href="https://dbwu.tech/posts/golang_performance_tips/" target="_blank" rel="noreferrer">Go 语言高性能 Tips</a></li><li><a href="https://github.com/felixge/fgprof" target="_blank" rel="noreferrer">fgprof</a></li><li><a href="https://www.brendangregg.com/offcpuanalysis.html" target="_blank" rel="noreferrer">off cpu analysis</a></li><li><a href="https://www.uber.com/en-HK/blog/pprof-go-profiler/" target="_blank" rel="noreferrer">pprof++: A Go Profiler with Hardware Performance Monitoring</a></li><li><a href="https://about.sourcegraph.com/blog/go/gophercon-2018-allocator-wrestling" target="_blank" rel="noreferrer">GopherCon 2018 - Allocator Wrestling</a></li><li><a href="https://www.practical-go-lessons.com/chap-36-program-profiling" target="_blank" rel="noreferrer">Program Profiling</a></li><li><a href="https://segmentfault.com/a/1190000041602269" target="_blank" rel="noreferrer">Go 语言-计算密集型服务 性能优化</a></li><li><a href="https://segmentfault.com/a/1190000041637173" target="_blank" rel="noreferrer">Go 语言-IO密集型服务 性能优化</a></li><li><a href="https://mp.weixin.qq.com/s/0X4lasAf5Sbt_tromlqwIQ" target="_blank" rel="noreferrer">字节大规模微服务语言发展之路</a></li><li><a href="https://zhuanlan.zhihu.com/p/60042567" target="_blank" rel="noreferrer">Go系统性能绕坑工具与方法 - 基于实例的带逛</a></li><li><a href="https://blog.gopheracademy.com/advent-2017/go-execution-tracer/" target="_blank" rel="noreferrer">go-execution-tracer</a></li><li><a href="https://github.com/dgryski/go-perfbook" target="_blank" rel="noreferrer">go-perfbook</a></li><li><a href="https://www.yuque.com/aceld/golang/ga6pb1#d6b3f4b1" target="_blank" rel="noreferrer">最常用的调试 golang 的 bug 以及性能问题的实践方法</a></li><li><a href="https://www.infoq.cn/article/eqazvi015lokje9ejmlk" target="_blank" rel="noreferrer">快速定位线上性能问题：Profiling 在微服务应用下的落地实践</a></li><li><a href="https://github.com/zjc17/pprof-web/" target="_blank" rel="noreferrer">pprof-web</a></li><li><a href="https://github.com/felixge/fgprof" target="_blank" rel="noreferrer">fgprof</a></li><li><a href="https://github.com/samonzeweb/profilinggo" target="_blank" rel="noreferrer">profilinggo</a></li><li><a href="https://cloud.google.com/profiler" target="_blank" rel="noreferrer">Cloud Profiler</a></li><li><a href="https://mp.weixin.qq.com/s/-3X0c4P0WdZdjtkTsX16Rw" target="_blank" rel="noreferrer">pprof 统计的内存总是偏小？</a></li><li><a href="https://changkun.de/research/talks/gobench.pdf" target="_blank" rel="noreferrer">对 Go 程序进行可靠的性能测试</a></li><li><a href="https://xargin.com/go-perf-optimization/#%E5%AF%BB%E6%89%BE%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88" target="_blank" rel="noreferrer">寻找性能瓶颈</a></li><li><a href="https://xargin.com/autodumper-for-go-ii/" target="_blank" rel="noreferrer">无人值守的自动 dump(二)</a></li><li><a href="https://github.com/mosn/holmes" target="_blank" rel="noreferrer">self-aware Golang profile dumper</a></li></ul>`,149),e=[o];function t(r,c,E,y,i,F){return a(),n("div",null,e)}const h=s(l,[["render",t]]);export{d as __pageData,h as default};
