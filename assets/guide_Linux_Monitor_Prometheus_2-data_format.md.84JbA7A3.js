import{_ as e,o as s,c as a,R as t}from"./chunks/framework.zUbWieqp.js";const m=JSON.parse('{"title":"1. Metric介绍","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Linux/Monitor/Prometheus/2-data_format.md","filePath":"guide/Linux/Monitor/Prometheus/2-data_format.md","lastUpdated":1739873505000}'),n={name:"guide/Linux/Monitor/Prometheus/2-data_format.md"},o=t(`<p><a href="https://prometheus.io/docs/concepts/metric_types/" target="_blank" rel="noreferrer">Upstream documentation</a></p><h1 id="_1-metric介绍" tabindex="-1">1. Metric介绍 <a class="header-anchor" href="#_1-metric介绍" aria-label="Permalink to &quot;1. Metric介绍&quot;">​</a></h1><p>指标监控是不同的，因为它不假设情况可以用固定状态来解释。相反，它将您带入您的系统并提供数十个指标，然后您可以分析和理解这些指标</p><p><code>metrics是一种对采样数据的总称（metrics并不代表某一种具体的数据格式是一种对于度量计算单位的抽象）</code></p><p>每个metrics数据都包含几个部分：<code>指标名称</code>、<code>标签</code>和<code>采样数据</code></p><h3 id="指标名称" tabindex="-1">指标名称 <a class="header-anchor" href="#指标名称" aria-label="Permalink to &quot;指标名称&quot;">​</a></h3><p>用于描述收集指标的性质，其名称应该具有语义化，可以较直观的表示一个度量的指标。名称格式可包括ASCII字符、数字、下划线和冒号</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">node_cpu_seconds_total</span></span>
<span class="line"><span style="color:#e1e4e8;">node_network_receive_bytes_total</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">node_cpu_seconds_total</span></span>
<span class="line"><span style="color:#24292e;">node_network_receive_bytes_total</span></span></code></pre></div><h3 id="标签" tabindex="-1">标签 <a class="header-anchor" href="#标签" aria-label="Permalink to &quot;标签&quot;">​</a></h3><p>时间序列标签为key/value格式，它们给Prometheus数据模型提供了维度，通过标签可以区分不同的实例</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">node_network_receive_bytes_total{device=&quot;eth0&quot;} #表示eth0网卡的数据</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">node_network_receive_bytes_total{device=&quot;eth0&quot;} #表示eth0网卡的数据</span></span></code></pre></div><blockquote><p>通过标签Prometheus可以在不同维度上对一个或一组数据进行查询处理。标签名称由 ASCII 字符，数字，以及下划线组成， 其中<code>__</code>开头属于 Prometheus 保留，标签的值可以是任何 Unicode 字符，支持中文。标签可来自被监控的资源，也可由Prometheus通过relabel在抓取<code>期间</code>和<code>之后</code>添加。</p></blockquote><h3 id="采样数据" tabindex="-1">采样数据 <a class="header-anchor" href="#采样数据" aria-label="Permalink to &quot;采样数据&quot;">​</a></h3><p>按照某个时序以时间维度采集的数据，其值包含：</p><p>一个float64值</p><p>一个毫秒级的unix时间戳</p><p>除了实际<code>采样数据/读数</code>（reading）之外，每个指标都有一个<code>HELP</code>和一个<code>TYPE</code>部分。在<code>TYPE</code>中，您可以看到度量的类型）</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202502181024891.png" alt="prom_metric_sample"></p><h2 id="_1-1-metric包含哪些" tabindex="-1">1.1 Metric包含哪些 <a class="header-anchor" href="#_1-1-metric包含哪些" aria-label="Permalink to &quot;1.1 Metric包含哪些&quot;">​</a></h2><p><strong>Name</strong> ，Timestamp ，Labels ，<strong>Value</strong> ，Type</p><p>Prometheus的时间序列统一使用以下格式来表示</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">metric name</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">label name</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">=</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">label value</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">, ...}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">metric name</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">label name</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">=</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">label value</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">, ...}</span></span></code></pre></div><h3 id="_1-labels" tabindex="-1">1.Labels <a class="header-anchor" href="#_1-labels" aria-label="Permalink to &quot;1.Labels&quot;">​</a></h3><p>标签用于将元数据添加到量度。这可以用来进行区分，例如，通过添加状态代码、URI 处理程序、函数名称......</p><h3 id="_2-type" tabindex="-1">2.Type <a class="header-anchor" href="#_2-type" aria-label="Permalink to &quot;2.Type&quot;">​</a></h3><ul><li><a href="https://prometheus.io/docs/concepts/metric_types/#counter" target="_blank" rel="noreferrer">Counter</a>-计数器</li><li><a href="https://prometheus.io/docs/concepts/metric_types/#gauge" target="_blank" rel="noreferrer">Gauge</a>-仪表盘</li><li><a href="https://prometheus.io/docs/concepts/metric_types/#histogram" target="_blank" rel="noreferrer">Histogram</a>-直方图</li><li><a href="https://prometheus.io/docs/concepts/metric_types/#summary" target="_blank" rel="noreferrer">Summary</a>-摘要</li></ul><h4 id="counter类型" tabindex="-1">Counter类型 <a class="header-anchor" href="#counter类型" aria-label="Permalink to &quot;Counter类型&quot;">​</a></h4><p>counter类型的指标与计数器一样，会按照某个趋势一直变化（一般是增加），我们往往用它记录服务请求总量、错误总数等</p><p>如下图展示就是一个counter类型的metrics数据采集，采集的是Prometheus的接口访问量，可看到数值一直在向上增加</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202502131539735.png" alt="image-20250213153918059"></p><p>基于counter类型的数据，我们可以清楚某些事件发生的次数，由于数据是以时序的方式进行存储，我们也可以轻松了解该事件产生的速率变化。</p><p>例如，通过rate()函数，获取api请求量每分钟的增长率：<code>rate(apiserver_request_total[1m])</code></p><h4 id="gauge类型" tabindex="-1">Gauge类型 <a class="header-anchor" href="#gauge类型" aria-label="Permalink to &quot;Gauge类型&quot;">​</a></h4><p>与Counter不同，Gauge类型的指标用于展示瞬时的值，与时间没有关系，可增可减。该类型值可用来记录CPU使用率、内存使用率等参数，用来反映目标在某个时间点的状态。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202502131542792.png" alt="image-20250213154204200"></p><p>Gauge指标简单且易于理解，对于该类型的指标，我们可以直观的查看目标在当前的状态。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">node_memory_MemFree_bytes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">node_memory_MemFree_bytes</span></span></code></pre></div><h4 id="histogram类型" tabindex="-1">Histogram类型 <a class="header-anchor" href="#histogram类型" aria-label="Permalink to &quot;Histogram类型&quot;">​</a></h4><p>尽管能够通过 gauge 监控可增可减的值，并可以在查询时求出其一段时间内的平均值，但是对于一些典型的场景是请求时延、响应数据量大小等，平均值可能并不能很好地反映问题（此类场景，对于开发者更关注的或许是 P90/P95/P99 等）。Histogram 可以解决这个问题，它并不是记录一个值的变化情况，而是将被观测到的值划分进某一个区间中，称为桶（Bucket）。</p><p>Histogram 会在一段时间范围内对数据进行采样（通常是请求持续时间或响应大小等），并将其计入可配置的存储桶（Bucket）中。可以观察到指标在各个不同的区间范围的分布情况，可以观察到请求耗时在各个桶的分布</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202502131548462.png" alt="image-20250213154806098"></p><p>Histogram可用于请求耗时、响应时间等数据的统计，例如，指标<code>prometheus_http_request_duration_seconds_bucket</code>即为Histogram类型。</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 样例计算1:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">sum(rate(http_request_duration_seconds_bucket{le=&quot;0.3&quot;}[5m])) by (job)</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">sum(rate(http_request_duration_seconds_count[5m])) by (job)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 样例计算2:</span></span>
<span class="line"><span style="color:#9ECBFF;">histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 样本数据</span></span>
<span class="line"><span style="color:#6A737D;"># HELP prometheus_http_request_duration_seconds Histogram of latencies for HTTP requests.</span></span>
<span class="line"><span style="color:#6A737D;"># TYPE prometheus_http_request_duration_seconds histogram</span></span>
<span class="line"><span style="color:#9ECBFF;">prometheus_http_request_duration_seconds_bucket{handler=&quot;/&quot;,le=&quot;0.1&quot;} 1</span></span>
<span class="line"><span style="color:#9ECBFF;">prometheus_http_request_duration_seconds_bucket{handler=&quot;/&quot;,le=&quot;0.2&quot;} 1</span></span>
<span class="line"><span style="color:#9ECBFF;">prometheus_http_request_duration_seconds_bucket{handler=&quot;/&quot;,le=&quot;0.4&quot;} 1</span></span>
<span class="line"><span style="color:#9ECBFF;">prometheus_http_request_duration_seconds_bucket{handler=&quot;/&quot;,le=&quot;1&quot;} 1</span></span>
<span class="line"><span style="color:#9ECBFF;">prometheus_http_request_duration_seconds_bucket{handler=&quot;/&quot;,le=&quot;3&quot;} 1</span></span>
<span class="line"><span style="color:#9ECBFF;">prometheus_http_request_duration_seconds_bucket{handler=&quot;/&quot;,le=&quot;8&quot;} 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 样例计算1:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">sum(rate(http_request_duration_seconds_bucket{le=&quot;0.3&quot;}[5m])) by (job)</span></span>
<span class="line"><span style="color:#032F62;">/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">sum(rate(http_request_duration_seconds_count[5m])) by (job)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 样例计算2:</span></span>
<span class="line"><span style="color:#032F62;">histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 样本数据</span></span>
<span class="line"><span style="color:#6A737D;"># HELP prometheus_http_request_duration_seconds Histogram of latencies for HTTP requests.</span></span>
<span class="line"><span style="color:#6A737D;"># TYPE prometheus_http_request_duration_seconds histogram</span></span>
<span class="line"><span style="color:#032F62;">prometheus_http_request_duration_seconds_bucket{handler=&quot;/&quot;,le=&quot;0.1&quot;} 1</span></span>
<span class="line"><span style="color:#032F62;">prometheus_http_request_duration_seconds_bucket{handler=&quot;/&quot;,le=&quot;0.2&quot;} 1</span></span>
<span class="line"><span style="color:#032F62;">prometheus_http_request_duration_seconds_bucket{handler=&quot;/&quot;,le=&quot;0.4&quot;} 1</span></span>
<span class="line"><span style="color:#032F62;">prometheus_http_request_duration_seconds_bucket{handler=&quot;/&quot;,le=&quot;1&quot;} 1</span></span>
<span class="line"><span style="color:#032F62;">prometheus_http_request_duration_seconds_bucket{handler=&quot;/&quot;,le=&quot;3&quot;} 1</span></span>
<span class="line"><span style="color:#032F62;">prometheus_http_request_duration_seconds_bucket{handler=&quot;/&quot;,le=&quot;8&quot;} 1</span></span></code></pre></div><h4 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h4><p>Summary 也是用来做统计分析的,可用于统计一段时间内数据采样结果 ，如中位数(<code>quantile=0.5</code>）、9分位数（<code>quantile=0.9</code>）等，和 Histogram 区别在于，Summary 直接存储的就是百分位数，如下所示：可以直观的观察到样本的中位数，如 <code>P90</code> 和 <code>P99</code>：</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202502131549132.png" alt="image-20250213154921737"></p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># HELP prometheus_engine_query_duration_seconds Query timings</span></span>
<span class="line"><span style="color:#6A737D;"># TYPE prometheus_engine_query_duration_seconds summary</span></span>
<span class="line"><span style="color:#9ECBFF;">prometheus_engine_query_duration_seconds{slice=&quot;queue_time&quot;,quantile=&quot;0.5&quot;} 8.844e-06</span></span>
<span class="line"><span style="color:#9ECBFF;">prometheus_engine_query_duration_seconds{slice=&quot;queue_time&quot;,quantile=&quot;0.9&quot;} 2.8198e-05</span></span>
<span class="line"><span style="color:#9ECBFF;">prometheus_engine_query_duration_seconds{slice=&quot;queue_time&quot;,quantile=&quot;0.99&quot;} 0.000123539</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># HELP prometheus_engine_query_duration_seconds Query timings</span></span>
<span class="line"><span style="color:#6A737D;"># TYPE prometheus_engine_query_duration_seconds summary</span></span>
<span class="line"><span style="color:#032F62;">prometheus_engine_query_duration_seconds{slice=&quot;queue_time&quot;,quantile=&quot;0.5&quot;} 8.844e-06</span></span>
<span class="line"><span style="color:#032F62;">prometheus_engine_query_duration_seconds{slice=&quot;queue_time&quot;,quantile=&quot;0.9&quot;} 2.8198e-05</span></span>
<span class="line"><span style="color:#032F62;">prometheus_engine_query_duration_seconds{slice=&quot;queue_time&quot;,quantile=&quot;0.99&quot;} 0.000123539</span></span></code></pre></div><p><a href="https://prometheus.io/docs/practices/histograms/#quantiles" target="_blank" rel="noreferrer">官方给出的完整的比较区分</a></p><ul><li><code>Counter</code>（计数器）：表示一个单调递增的值，如请求总数、错误总数等。它只能增加，不能减少（除非系统重启）</li><li><code>Gauge</code>（仪表盘）：表示一个可以任意增减的值，如当前内存使用量、CPU 利用率等</li><li><code>Histogram</code>（直方图）：表示一组数据的分布情况，如请求延迟的分布。它包含多个 bucket（桶），每个 bucket 对应一个值范围，以及落入该范围的样本数量</li><li><code>Summary</code>（摘要）：与直方图类似，也表示一组数据的分布情况，但它提供了更精确的分位数（如中位数、95% 分位数等）计算</li></ul>`,49),l=[o];function p(r,c,i,u,d,_){return s(),a("div",null,l)}const q=e(n,[["render",p]]);export{m as __pageData,q as default};
