import{_ as s,o as n,c as a,R as l}from"./chunks/framework.zUbWieqp.js";const g=JSON.parse('{"title":"1. Pod定义","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/资源对象/2-pod定义.md","filePath":"guide/container/k8s/资源对象/2-pod定义.md","lastUpdated":1724149279000}'),p={name:"guide/container/k8s/资源对象/2-pod定义.md"},o=l(`<h1 id="_1-pod定义" tabindex="-1">1. Pod定义 <a class="header-anchor" href="#_1-pod定义" aria-label="Permalink to &quot;1. Pod定义&quot;">​</a></h1><h2 id="_1-1-apiversion" tabindex="-1">1.1 apiVersion <a class="header-anchor" href="#_1-1-apiversion" aria-label="Permalink to &quot;1.1 apiVersion&quot;">​</a></h2><p>除了deployment是v1的升级版，其他的基本都是v1。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">kubectl api-versions</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">kubectl api-versions</span></span></code></pre></div><h2 id="_1-2-kind" tabindex="-1">1.2 kind <a class="header-anchor" href="#_1-2-kind" aria-label="Permalink to &quot;1.2 kind&quot;">​</a></h2><p>指定这个API对象的资源类型: Pod、Deployment、Job、Ingress、Service等，资源类型的首字母需大写</p><h2 id="_1-3-metadata" tabindex="-1">1.3 metadata <a class="header-anchor" href="#_1-3-metadata" aria-label="Permalink to &quot;1.3 metadata&quot;">​</a></h2><p>描述创建资源的属性，比如Pod的名称，namspace、标签等信息</p><h2 id="_1-4-spec" tabindex="-1">1.4 spec <a class="header-anchor" href="#_1-4-spec" aria-label="Permalink to &quot;1.4 spec&quot;">​</a></h2><p>specification of the resource content: 指定该资源的内容，包括一些container,storage,volume以及其他k8s需要的参数,以及诸如是否在容器失败时重新启动容器的属性，可在特定Kubernetes API找到完整的Kubernetes Pod属性</p><h2 id="_1-5-pod的资源清单" tabindex="-1">1.5 Pod的资源清单 <a class="header-anchor" href="#_1-5-pod的资源清单" aria-label="Permalink to &quot;1.5 Pod的资源清单&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">#必选，版本号，例如v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span><span style="color:#E1E4E8;">       　 </span><span style="color:#6A737D;">#必选，资源类型，例如 Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:       　 </span><span style="color:#6A737D;">#必选，元数据</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">#必选，Pod名称</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">#Pod所属的命名空间,默认为&quot;default&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">:       　　  </span><span style="color:#6A737D;">#自定义标签列表</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">      　          </span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:  </span><span style="color:#6A737D;">#必选，Pod中容器的详细定义</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:  </span><span style="color:#6A737D;">#必选，Pod中容器列表</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">#必选，容器名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">#必选，容器的镜像名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">imagePullPolicy</span><span style="color:#E1E4E8;">: [ </span><span style="color:#9ECBFF;">Always|Never|IfNotPresent</span><span style="color:#E1E4E8;"> ]  </span><span style="color:#6A737D;">#获取镜像的策略 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">]   </span><span style="color:#6A737D;">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">args</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">]      </span><span style="color:#6A737D;">#容器的启动命令参数列表</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">workingDir</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">#容器的工作目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">volumeMounts</span><span style="color:#E1E4E8;">:       </span><span style="color:#6A737D;">#挂载到容器内部的存储卷配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">mountPath</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#存储卷在容器内mount的绝对路径，应少于512字符</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">readOnly</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#是否为只读模式</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#需要暴露的端口库号列表</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">#端口的名称</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">int</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">#容器需要监听的端口号</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">hostPort</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">int</span><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">#容器所在主机需要监听的端口号，默认与Container相同</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">protocol</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#端口协议，支持TCP和UDP，默认TCP</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">env</span><span style="color:#E1E4E8;">:   </span><span style="color:#6A737D;">#容器运行前需设置的环境变量列表</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">#环境变量名称</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#环境变量的值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">resources</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#资源限制和请求的设置</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">limits</span><span style="color:#E1E4E8;">:  </span><span style="color:#6A737D;">#资源限制的设置</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">requests</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#资源请求的设置</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#Cpu请求，容器启动的初始可用数量</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#内存请求,容器启动的初始可用数量</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">lifecycle</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#生命周期钩子</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">postStart</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#容器启动后立即执行此钩子,如果执行失败,会根据重启策略进行重启</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">preStop</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#容器终止前执行此钩子,无论结果如何,容器都会终止</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">livenessProbe</span><span style="color:#E1E4E8;">:  </span><span style="color:#6A737D;">#对Pod内各容器健康检查的设置，当探测无响应几次后将自动重启该容器</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">exec</span><span style="color:#E1E4E8;">:       　 </span><span style="color:#6A737D;">#对Pod容器内检查方式设置为exec方式</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">]  </span><span style="color:#6A737D;">#exec方式需要制定的命令或脚本</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">httpGet</span><span style="color:#E1E4E8;">:       </span><span style="color:#6A737D;">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">number</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">host</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">scheme</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">HttpHeaders</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">tcpSocket</span><span style="color:#E1E4E8;">:     </span><span style="color:#6A737D;">#对Pod内个容器健康检查方式设置为tcpSocket方式</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">number</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">initialDelaySeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">#容器启动完成后首次探测的时间，单位为秒，默认0</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">timeoutSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">    　　    </span><span style="color:#6A737D;">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">periodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">     　　    </span><span style="color:#6A737D;">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">successThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">#失败后连续多少次成功才被认为通过检测，默认1</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">failureThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">#成功后多少次连续失败才被仍为检测失败，默认3</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">securityContext</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#85E89D;">privileged</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">Always | Never | OnFailure</span><span style="color:#E1E4E8;">]  </span><span style="color:#6A737D;">#Pod的重启策略</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">nodeName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&lt;string&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#设置NodeName表示将该Pod调度到指定到名称的node节点上</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">nodeSelector</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">obeject</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#设置NodeSelector表示将该Pod调度到包含这个label的node上</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">imagePullSecrets</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">hostNetwork</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">:   </span><span style="color:#6A737D;">#在该pod上定义共享存储卷列表</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#共享存储卷名称 （volumes类型有很多种）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">emptyDir</span><span style="color:#E1E4E8;">: {}       </span><span style="color:#6A737D;">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">hostPath</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">      　　        </span><span style="color:#6A737D;">#Pod所在宿主机的目录，将被用于同期中mount的目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">secret</span><span style="color:#E1E4E8;">:       　　　#</span><span style="color:#9ECBFF;">类型为secret的存储卷，挂载集群与定义的secret对象到容器内部</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">scretname</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">items</span><span style="color:#E1E4E8;">:     </span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">configMap</span><span style="color:#E1E4E8;">:         </span><span style="color:#6A737D;">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">items</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">#必选，版本号，例如v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span><span style="color:#24292E;">       　 </span><span style="color:#6A737D;">#必选，资源类型，例如 Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:       　 </span><span style="color:#6A737D;">#必选，元数据</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">#必选，Pod名称</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#Pod所属的命名空间,默认为&quot;default&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">:       　　  </span><span style="color:#6A737D;">#自定义标签列表</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">      　          </span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:  </span><span style="color:#6A737D;">#必选，Pod中容器的详细定义</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:  </span><span style="color:#6A737D;">#必选，Pod中容器列表</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">#必选，容器名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#必选，容器的镜像名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">imagePullPolicy</span><span style="color:#24292E;">: [ </span><span style="color:#032F62;">Always|Never|IfNotPresent</span><span style="color:#24292E;"> ]  </span><span style="color:#6A737D;">#获取镜像的策略 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">string</span><span style="color:#24292E;">]   </span><span style="color:#6A737D;">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">args</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">string</span><span style="color:#24292E;">]      </span><span style="color:#6A737D;">#容器的启动命令参数列表</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">workingDir</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#容器的工作目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">volumeMounts</span><span style="color:#24292E;">:       </span><span style="color:#6A737D;">#挂载到容器内部的存储卷配置</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">      </span><span style="color:#6A737D;">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">mountPath</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#存储卷在容器内mount的绝对路径，应少于512字符</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">readOnly</span><span style="color:#24292E;">: </span><span style="color:#032F62;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#是否为只读模式</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#需要暴露的端口库号列表</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">        </span><span style="color:#6A737D;">#端口的名称</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#032F62;">int</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#容器需要监听的端口号</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">hostPort</span><span style="color:#24292E;">: </span><span style="color:#032F62;">int</span><span style="color:#24292E;">       </span><span style="color:#6A737D;">#容器所在主机需要监听的端口号，默认与Container相同</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">protocol</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">#端口协议，支持TCP和UDP，默认TCP</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">env</span><span style="color:#24292E;">:   </span><span style="color:#6A737D;">#容器运行前需设置的环境变量列表</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#环境变量名称</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">value</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#环境变量的值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">resources</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#资源限制和请求的设置</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">limits</span><span style="color:#24292E;">:  </span><span style="color:#6A737D;">#资源限制的设置</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">requests</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#资源请求的设置</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">#Cpu请求，容器启动的初始可用数量</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#内存请求,容器启动的初始可用数量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">lifecycle</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#生命周期钩子</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">postStart</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#容器启动后立即执行此钩子,如果执行失败,会根据重启策略进行重启</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">preStop</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#容器终止前执行此钩子,无论结果如何,容器都会终止</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">livenessProbe</span><span style="color:#24292E;">:  </span><span style="color:#6A737D;">#对Pod内各容器健康检查的设置，当探测无响应几次后将自动重启该容器</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">exec</span><span style="color:#24292E;">:       　 </span><span style="color:#6A737D;">#对Pod容器内检查方式设置为exec方式</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">string</span><span style="color:#24292E;">]  </span><span style="color:#6A737D;">#exec方式需要制定的命令或脚本</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">httpGet</span><span style="color:#24292E;">:       </span><span style="color:#6A737D;">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#032F62;">number</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">host</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">scheme</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">HttpHeaders</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">value</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">tcpSocket</span><span style="color:#24292E;">:     </span><span style="color:#6A737D;">#对Pod内个容器健康检查方式设置为tcpSocket方式</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#032F62;">number</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">initialDelaySeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">       </span><span style="color:#6A737D;">#容器启动完成后首次探测的时间，单位为秒，默认0</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">timeoutSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">    　　    </span><span style="color:#6A737D;">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">periodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">     　　    </span><span style="color:#6A737D;">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">successThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">			</span><span style="color:#6A737D;">#失败后连续多少次成功才被认为通过检测，默认1</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">failureThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">			</span><span style="color:#6A737D;">#成功后多少次连续失败才被仍为检测失败，默认3</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">securityContext</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#22863A;">privileged</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">Always | Never | OnFailure</span><span style="color:#24292E;">]  </span><span style="color:#6A737D;">#Pod的重启策略</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">nodeName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&lt;string&gt;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#设置NodeName表示将该Pod调度到指定到名称的node节点上</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">nodeSelector</span><span style="color:#24292E;">: </span><span style="color:#032F62;">obeject</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#设置NodeSelector表示将该Pod调度到包含这个label的node上</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">imagePullSecrets</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">hostNetwork</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:   </span><span style="color:#6A737D;">#在该pod上定义共享存储卷列表</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">#共享存储卷名称 （volumes类型有很多种）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">emptyDir</span><span style="color:#24292E;">: {}       </span><span style="color:#6A737D;">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">hostPath</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">      　　        </span><span style="color:#6A737D;">#Pod所在宿主机的目录，将被用于同期中mount的目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">secret</span><span style="color:#24292E;">:       　　　#</span><span style="color:#032F62;">类型为secret的存储卷，挂载集群与定义的secret对象到容器内部</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">scretname</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">items</span><span style="color:#24292E;">:     </span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">key</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">configMap</span><span style="color:#24292E;">:         </span><span style="color:#6A737D;">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">items</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">key</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span></code></pre></div><p>yaml</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#小提示：</span></span>
<span class="line"><span style="color:#6A737D;">#   在这里，可通过一个命令来查看每种资源的可配置项</span></span>
<span class="line"><span style="color:#6A737D;">#   kubectl explain 资源类型         查看某种资源可以配置的一级属性</span></span>
<span class="line"><span style="color:#6A737D;">#   kubectl explain 资源类型.属性     查看属性的子属性</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">root@kube-master ~</span><span style="color:#E1E4E8;">]# </span><span style="color:#9ECBFF;">kubectl explain pod</span></span>
<span class="line"><span style="color:#85E89D;">KIND</span><span style="color:#E1E4E8;">:     </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">VERSION</span><span style="color:#E1E4E8;">:  </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">FIELDS</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">apiVersion   &lt;string&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">kind &lt;string&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">metadata     &lt;Object&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">spec &lt;Object&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">status       &lt;Object&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">root@kube-master ~</span><span style="color:#E1E4E8;">]# </span><span style="color:#9ECBFF;">kubectl explain pod.metadata</span></span>
<span class="line"><span style="color:#85E89D;">KIND</span><span style="color:#E1E4E8;">:     </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">VERSION</span><span style="color:#E1E4E8;">:  </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">RESOURCE</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">metadata &lt;Object&gt;</span></span>
<span class="line"><span style="color:#85E89D;">FIELDS</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">annotations  &lt;map[string]string&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">clusterName  &lt;string&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">creationTimestamp    &lt;string&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">deletionGracePeriodSeconds   &lt;integer&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">deletionTimestamp    &lt;string&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">finalizers   &lt;[]string&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">generateName &lt;string&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">generation   &lt;integer&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">labels       &lt;map[string]string&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">managedFields        &lt;[]Object&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">name &lt;string&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">namespace    &lt;string&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">ownerReferences      &lt;[]Object&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">resourceVersion      &lt;string&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">selfLink     &lt;string&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">uid  &lt;string&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#小提示：</span></span>
<span class="line"><span style="color:#6A737D;">#   在这里，可通过一个命令来查看每种资源的可配置项</span></span>
<span class="line"><span style="color:#6A737D;">#   kubectl explain 资源类型         查看某种资源可以配置的一级属性</span></span>
<span class="line"><span style="color:#6A737D;">#   kubectl explain 资源类型.属性     查看属性的子属性</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">root@kube-master ~</span><span style="color:#24292E;">]# </span><span style="color:#032F62;">kubectl explain pod</span></span>
<span class="line"><span style="color:#22863A;">KIND</span><span style="color:#24292E;">:     </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">VERSION</span><span style="color:#24292E;">:  </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">FIELDS</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">apiVersion   &lt;string&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">kind &lt;string&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">metadata     &lt;Object&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">spec &lt;Object&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">status       &lt;Object&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">root@kube-master ~</span><span style="color:#24292E;">]# </span><span style="color:#032F62;">kubectl explain pod.metadata</span></span>
<span class="line"><span style="color:#22863A;">KIND</span><span style="color:#24292E;">:     </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">VERSION</span><span style="color:#24292E;">:  </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">RESOURCE</span><span style="color:#24292E;">: </span><span style="color:#032F62;">metadata &lt;Object&gt;</span></span>
<span class="line"><span style="color:#22863A;">FIELDS</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">annotations  &lt;map[string]string&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">clusterName  &lt;string&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">creationTimestamp    &lt;string&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">deletionGracePeriodSeconds   &lt;integer&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">deletionTimestamp    &lt;string&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">finalizers   &lt;[]string&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">generateName &lt;string&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">generation   &lt;integer&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">labels       &lt;map[string]string&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">managedFields        &lt;[]Object&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">name &lt;string&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">namespace    &lt;string&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">ownerReferences      &lt;[]Object&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">resourceVersion      &lt;string&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">selfLink     &lt;string&gt;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">uid  &lt;string&gt;</span></span></code></pre></div><p>在kubernetes中基本所有资源的一级属性都是一样的，主要包含5部分：</p><ul><li>apiVersion 版本，由kubernetes内部定义，版本号必须可以用 kubectl api-versions 查询到</li><li>kind 类型，由kubernetes内部定义，版本号必须可以用 kubectl api-resources 查询到</li><li>metadata 元数据，主要是资源标识和说明，常用的有name、namespace、labels等</li><li>spec 描述，这是配置中最重要的一部分，里面是对各种资源配置的详细描述</li><li>status 状态信息，里面的内容不需要定义，由kubernetes自动生成</li></ul><p>在上面的属性中，spec是接下来研究的重点，继续看下它的常见子属性:</p><ul><li>containers &lt;[]Object&gt; 容器列表，用于定义容器的详细信息</li><li>nodeName 根据nodeName的值将pod调度到指定的Node节点上</li><li>nodeSelector &lt;map[]&gt; 根据NodeSelector中定义的信息选择将该Pod调度到包含这些label的Node 上</li><li>hostNetwork 是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</li><li>volumes &lt;[]Object&gt; 存储卷，用于定义Pod上面挂在的存储信息</li><li>restartPolicy 重启策略，表示Pod在遇到故障的时候的处理策略</li></ul><h1 id="_2-pod配置" tabindex="-1">2. Pod配置 <a class="header-anchor" href="#_2-pod配置" aria-label="Permalink to &quot;2. Pod配置&quot;">​</a></h1><p><code>pod.spec.containers</code>属性</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">root@kube-master ~</span><span style="color:#E1E4E8;">]# </span><span style="color:#9ECBFF;">kubectl explain pod.spec.containers</span></span>
<span class="line"><span style="color:#85E89D;">KIND</span><span style="color:#E1E4E8;">:     </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">VERSION</span><span style="color:#E1E4E8;">:  </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">RESOURCE</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">containers &lt;[]Object&gt;</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;"># 数组，代表可以有多个容器</span></span>
<span class="line"><span style="color:#85E89D;">FIELDS</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">name  &lt;string&gt;</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;"># 容器名称</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">image &lt;string&gt;</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;"># 容器需要的镜像地址</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">imagePullPolicy  &lt;string&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 镜像拉取策略 </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">command  &lt;[]string&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 容器的启动命令列表，如不指定，使用打包时使用的启动命令</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">args     &lt;[]string&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 容器的启动命令需要的参数列表</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">env      &lt;[]Object&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 容器环境变量的配置</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">ports    &lt;[]Object&gt;</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;"># 容器需要暴露的端口号列表</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">resources &lt;Object&gt;</span><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># 资源限制和资源请求的设置</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">root@kube-master ~</span><span style="color:#24292E;">]# </span><span style="color:#032F62;">kubectl explain pod.spec.containers</span></span>
<span class="line"><span style="color:#22863A;">KIND</span><span style="color:#24292E;">:     </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">VERSION</span><span style="color:#24292E;">:  </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">RESOURCE</span><span style="color:#24292E;">: </span><span style="color:#032F62;">containers &lt;[]Object&gt;</span><span style="color:#24292E;">   </span><span style="color:#6A737D;"># 数组，代表可以有多个容器</span></span>
<span class="line"><span style="color:#22863A;">FIELDS</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">name  &lt;string&gt;</span><span style="color:#24292E;">     </span><span style="color:#6A737D;"># 容器名称</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">image &lt;string&gt;</span><span style="color:#24292E;">     </span><span style="color:#6A737D;"># 容器需要的镜像地址</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">imagePullPolicy  &lt;string&gt;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 镜像拉取策略 </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">command  &lt;[]string&gt;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 容器的启动命令列表，如不指定，使用打包时使用的启动命令</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">args     &lt;[]string&gt;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 容器的启动命令需要的参数列表</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">env      &lt;[]Object&gt;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 容器环境变量的配置</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">ports    &lt;[]Object&gt;</span><span style="color:#24292E;">     </span><span style="color:#6A737D;"># 容器需要暴露的端口号列表</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">resources &lt;Object&gt;</span><span style="color:#24292E;">      </span><span style="color:#6A737D;"># 资源限制和资源请求的设置</span></span></code></pre></div><p>创建pod-base.yaml文件，内容如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-base</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">dev</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">user</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">heima</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx:1.17.1</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">busybox</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">busybox:1.30</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-base</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">dev</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">user</span><span style="color:#24292E;">: </span><span style="color:#032F62;">heima</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx:1.17.1</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">busybox</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">busybox:1.30</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 创建Pod</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">root@kube-master pod</span><span style="color:#E1E4E8;">]# </span><span style="color:#9ECBFF;">kubectl apply -f pod-base.yaml</span></span>
<span class="line"><span style="color:#9ECBFF;">pod/pod-base created</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 查看Pod状况</span></span>
<span class="line"><span style="color:#6A737D;"># READY 1/2 : 表示当前Pod中有2个容器，其中1个准备就绪，1个未就绪</span></span>
<span class="line"><span style="color:#6A737D;"># RESTARTS  : 重启次数，因为有1个容器故障了，Pod一直在重启试图恢复它</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">root@kube-master pod</span><span style="color:#E1E4E8;">]# </span><span style="color:#9ECBFF;">kubectl get pod -n dev</span></span>
<span class="line"><span style="color:#9ECBFF;">NAME       READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span style="color:#9ECBFF;">pod-base   1/2     Running   4          95s</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 可以通过describe查看内部的详情</span></span>
<span class="line"><span style="color:#6A737D;"># 此时已经运行起来了一个基本的Pod，虽然它暂时有问题</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">root@kube-master pod</span><span style="color:#E1E4E8;">]# </span><span style="color:#9ECBFF;">kubectl describe pod pod-base -n dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 创建Pod</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">root@kube-master pod</span><span style="color:#24292E;">]# </span><span style="color:#032F62;">kubectl apply -f pod-base.yaml</span></span>
<span class="line"><span style="color:#032F62;">pod/pod-base created</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 查看Pod状况</span></span>
<span class="line"><span style="color:#6A737D;"># READY 1/2 : 表示当前Pod中有2个容器，其中1个准备就绪，1个未就绪</span></span>
<span class="line"><span style="color:#6A737D;"># RESTARTS  : 重启次数，因为有1个容器故障了，Pod一直在重启试图恢复它</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">root@kube-master pod</span><span style="color:#24292E;">]# </span><span style="color:#032F62;">kubectl get pod -n dev</span></span>
<span class="line"><span style="color:#032F62;">NAME       READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span style="color:#032F62;">pod-base   1/2     Running   4          95s</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 可以通过describe查看内部的详情</span></span>
<span class="line"><span style="color:#6A737D;"># 此时已经运行起来了一个基本的Pod，虽然它暂时有问题</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">root@kube-master pod</span><span style="color:#24292E;">]# </span><span style="color:#032F62;">kubectl describe pod pod-base -n dev</span></span></code></pre></div><h2 id="_2-2-镜像拉取" tabindex="-1">2.2 镜像拉取 <a class="header-anchor" href="#_2-2-镜像拉取" aria-label="Permalink to &quot;2.2 镜像拉取&quot;">​</a></h2><p>创建pod-imagepullpolicy.yaml文件，内容如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-imagepullpolicy</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">dev</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx:1.17.1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">imagePullPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Never</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 用于设置镜像拉取策略</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">busybox</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">busybox:1.30</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-imagepullpolicy</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">dev</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx:1.17.1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">imagePullPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Never</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 用于设置镜像拉取策略</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">busybox</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">busybox:1.30</span></span></code></pre></div><p>imagePullPolicy，用于设置镜像拉取策略，kubernetes支持配置三种拉取策略：</p><ul><li>Always：总是从远程仓库拉取镜像（一直远程下载）</li><li>IfNotPresent：本地有则使用本地镜像，本地没有则从远程仓库拉取镜像（本地有就本地 本地没远程下载）</li><li>Never：只使用本地镜像，从不去远程仓库拉取，本地没有就报错 （一直使用本地）</li></ul><div class="warning custom-block"><p class="custom-block-title">💡 说明</p><p>默认值说明：</p><p>如果镜像tag为具体版本号， 默认策略是：IfNotPresent</p><p>如果镜像tag为：latest（最终版本） ，默认策略是always</p></div><h2 id="_2-3-command" tabindex="-1">2.3 command <a class="header-anchor" href="#_2-3-command" aria-label="Permalink to &quot;2.3 command&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">特别说明：</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">通过上面发现command已经可以完成启动命令和传递参数的功能，为什么这里还要提供一个args选项，用于传递参数呢?这其实跟docker有点关系，kubernetes中的command、args两项其实是实现覆盖Dockerfile中ENTRYPOINT的功能。</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">1 如果command和args均没有写，那么用Dockerfile的配置。</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">2 如果command写了，但args没有写，那么Dockerfile默认的配置会被忽略，执行输入的command</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">3 如果command没写，但args写了，那么Dockerfile中配置的ENTRYPOINT的命令会被执行，使用当前args的参数</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">4 如果command和args都写了，那么Dockerfile的配置被忽略，执行command并追加上args参数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">特别说明：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">通过上面发现command已经可以完成启动命令和传递参数的功能，为什么这里还要提供一个args选项，用于传递参数呢?这其实跟docker有点关系，kubernetes中的command、args两项其实是实现覆盖Dockerfile中ENTRYPOINT的功能。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">1 如果command和args均没有写，那么用Dockerfile的配置。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">2 如果command写了，但args没有写，那么Dockerfile默认的配置会被忽略，执行输入的command</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">3 如果command没写，但args写了，那么Dockerfile中配置的ENTRYPOINT的命令会被执行，使用当前args的参数</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">4 如果command和args都写了，那么Dockerfile的配置被忽略，执行command并追加上args参数</span></span></code></pre></div><h1 id="_3-容器命名规则解析" tabindex="-1">3. 容器命名规则解析 <a class="header-anchor" href="#_3-容器命名规则解析" aria-label="Permalink to &quot;3. 容器命名规则解析&quot;">​</a></h1><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@kube-master </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# kubectl get pod app-prod-97dfb4bf-h59vq</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                      </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">RESTARTS</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">app-prod-97dfb4bf-h59vq</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">/1</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Running</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;"> (72m </span><span style="color:#9ECBFF;">ago</span><span style="color:#E1E4E8;">)   7d6h</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[root@kube-master </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# kubectl get deployments.apps</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">UP-TO-DATE</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">AVAILABLE</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">app-prod</span><span style="color:#E1E4E8;">                 </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">/1</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">           </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">d</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[root@kube-master </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# kubectl get replicasets.apps</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                                </span><span style="color:#9ECBFF;">DESIRED</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">CURRENT</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">app-prod-97dfb4bf</span><span style="color:#E1E4E8;">                   </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">d</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@kube-master </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# kubectl get pod app-prod-97dfb4bf-h59vq</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                      </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">    </span><span style="color:#032F62;">RESTARTS</span><span style="color:#24292E;">       </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">app-prod-97dfb4bf-h59vq</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">/1</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Running</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">11</span><span style="color:#24292E;"> (72m </span><span style="color:#032F62;">ago</span><span style="color:#24292E;">)   7d6h</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[root@kube-master </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# kubectl get deployments.apps</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">UP-TO-DATE</span><span style="color:#24292E;">   </span><span style="color:#032F62;">AVAILABLE</span><span style="color:#24292E;">   </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">app-prod</span><span style="color:#24292E;">                 </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">/1</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">            </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">           </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">d</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[root@kube-master </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# kubectl get replicasets.apps</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                                </span><span style="color:#032F62;">DESIRED</span><span style="color:#24292E;">   </span><span style="color:#032F62;">CURRENT</span><span style="color:#24292E;">   </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">app-prod-97dfb4bf</span><span style="color:#24292E;">                   </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">         </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">         </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">       </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">d</span></span></code></pre></div><p>app-prod ----&gt;dp</p><p>app-prod-97dfb4bf ---&gt;replicas</p><p>app-prod-97dfb4bf-h59vq ---&gt;podName</p><p>h59vq ---&gt;computeHash</p><h1 id="_4-静态pod" tabindex="-1">4. 静态Pod <a class="header-anchor" href="#_4-静态pod" aria-label="Permalink to &quot;4. 静态Pod&quot;">​</a></h1><ul><li><p>静态Pod特点：</p><ul><li>Pod由特定节点上的kubelet管理</li><li>不能使用控制器</li><li>Pod名称标识当前节点名称</li></ul></li><li><p>在kubelet配置文件启用静态Pod的参数：</p><div class="language-python-repl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python-repl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">vi /var/lib/kubelet/config.yaml</span></span>
<span class="line"><span style="color:#e1e4e8;">...</span></span>
<span class="line"><span style="color:#e1e4e8;">staticPodPath: /etc/kubernetes/manifests</span></span>
<span class="line"><span style="color:#e1e4e8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">vi /var/lib/kubelet/config.yaml</span></span>
<span class="line"><span style="color:#24292e;">...</span></span>
<span class="line"><span style="color:#24292e;">staticPodPath: /etc/kubernetes/manifests</span></span>
<span class="line"><span style="color:#24292e;">...</span></span></code></pre></div><p>注：将部署的pod yaml放到该目录会由kubelet自动创建。</p><p>使用<code>kubeadm</code>部署的集群中，<code>etcd</code>、<code>kube-apiserver</code>、<code>kube-controller-manager</code>、<code>kube-scheduler</code> 这些组件都是通过静态Pod来运行的</p></li></ul><h2 id="_4-1-静态、动态、自主式pod有何区别" tabindex="-1">4.1 静态、动态、自主式Pod有何区别 <a class="header-anchor" href="#_4-1-静态、动态、自主式pod有何区别" aria-label="Permalink to &quot;4.1 静态、动态、自主式Pod有何区别&quot;">​</a></h2><ol><li><strong>静态Pod</strong>： <ul><li>静态Pod是由kubelet直接管理的，其配置文件存储在节点本地而非通过API Server创建。..................................................................................................................</li><li>kubelet会根据指定路径下的静态Pod配置文件来创建和管理Pod，这些Pod不会被其他控制器如Deployment、ReplicaSet等控制。</li><li>当kubelet重启时，它会自动重新创建静态Pod，并且由于静态Pod的元数据不存储在etcd中，因此不能通过kubectl命令进行直接操作。</li></ul></li><li><strong>自主式Pod（Ad-Hoc Pod或Non-Controller Managed Pod）</strong>： <ul><li>自主式Pod是指那些由用户直接创建但不受任何控制器管理的Pod。它们通常通过<code>kubectl run</code>命令或直接向API Server提交YAML/JSON配置文件的方式来创建。.......................................................................................................</li><li>自主式Pod一旦创建，除非手动删除，否则不会自动消失或者被重建。</li><li>这类Pod没有与之关联的控制器，所以如果Pod出现故障，不会像受控制器管理的Pod那样自动恢复到期望状态。</li></ul></li><li><strong>动态Pod</strong>： <ul><li>动态Pod一般指的是由控制器（如Deployment、StatefulSet、DaemonSet等）管理的Pod。</li><li>控制器负责监视集群的状态并确保实际运行的Pod数量符合预期（例如保持一定数量的副本），当Pod因各种原因终止时，控制器会自动创建新的Pod以替代。</li><li>动态Pod的生命周期受到控制器策略的严格管理和维护，包括健康检查、滚动更新、扩展缩容等功能。</li></ul></li></ol><p>总结:</p><p><strong>静态Pod</strong>适用于需要在特定节点上始终运行且无需集群级别管理的应用场景；<strong>自主式Pod</strong>用于临时性的或一次性任务，不依赖于控制器自动恢复机制；而<strong>动态Pod</strong>则是Kubernetes中常态化的应用部署方式，具有高度自动化和弹性伸缩能力</p><h1 id="_5-影响pod的属性" tabindex="-1">5. 影响Pod的属性 <a class="header-anchor" href="#_5-影响pod的属性" aria-label="Permalink to &quot;5. 影响Pod的属性&quot;">​</a></h1><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202408071138206.png" alt="image"></p>`,46),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{g as __pageData,A as default};
