import{_ as t,o as e,c as n,R as a}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/TroubleshootingMaintenanceManual/17-k8s与dockerfile启动参数.md","filePath":"guide/container/k8s/TroubleshootingMaintenanceManual/17-k8s与dockerfile启动参数.md","lastUpdated":1728986210000}'),r={name:"guide/container/k8s/TroubleshootingMaintenanceManual/17-k8s与dockerfile启动参数.md"},o=a('<p>当用户同时在kubernetes中的yaml文件中写了command和args的时候，默认是会覆盖DockerFile中的命令行和参数，完整的情况分类如下：</p><table><thead><tr><th style="text-align:center;"><strong>描述</strong></th><th style="text-align:center;"><strong>Docker 字段名称</strong></th><th style="text-align:center;"><strong>Kubernetes 字段名称</strong></th></tr></thead><tbody><tr><td style="text-align:center;">容器启动的命令</td><td style="text-align:center;">Entrypoint</td><td style="text-align:center;">command</td></tr><tr><td style="text-align:center;">启动命令的参数</td><td style="text-align:center;">Cmd</td><td style="text-align:center;">args</td></tr></tbody></table><ol><li>如果command和args都没有写，那么用DockerFile默认的配置。</li><li>如果command写了，但args没有写，那么Docker默认的配置会被忽略而且仅仅执行.yaml文件的command（不带任何参数的）。</li><li>如果command没写，但args写了，那么Docker默认配置的ENTRYPOINT的命令行会被执行，但是调用的参数是.yaml中的args。</li><li>如果如果command和args都写了，那么Docker默认的配置被忽略，使用.yaml的配置。</li></ol>',3),l=[o];function s(c,i,d,_,g,m){return e(),n("div",null,l)}const u=t(r,[["render",s]]);export{h as __pageData,u as default};
