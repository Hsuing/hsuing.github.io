import{_ as s,o as a,c as l,R as n}from"./chunks/framework.zUbWieqp.js";const u=JSON.parse('{"title":"1.排查 K8s Deployment 故障的 3 个步骤","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/troubleshooting/13-K8sDeployment故障.md","filePath":"guide/container/k8s/troubleshooting/13-K8sDeployment故障.md","lastUpdated":1715940689000}'),e={name:"guide/container/k8s/troubleshooting/13-K8sDeployment故障.md"},o=n(`<h1 id="_1-排查-k8s-deployment-故障的-3-个步骤" tabindex="-1">1.排查 K8s Deployment 故障的 3 个步骤 <a class="header-anchor" href="#_1-排查-k8s-deployment-故障的-3-个步骤" aria-label="Permalink to &quot;1.排查 K8s Deployment 故障的 3 个步骤&quot;">​</a></h1><p>由于每个 deployment 包含 3 个组件，因此必须从底层开始依次 debug 这些组件。</p><ol><li>您应该确保 Pod 处于 running 状态，然后</li><li>专注于让服务将流量路由到 Pod，然后</li><li>检查 Ingress 配置是否正确</li></ol><h2 id="_1-1-详细操作如下" tabindex="-1">1.1 详细操作如下 <a class="header-anchor" href="#_1-1-详细操作如下" aria-label="Permalink to &quot;1.1 详细操作如下&quot;">​</a></h2><ol><li>应该从底层开始对 Deployment 进行故障排查。首先检查 Pod 就绪并正在运行</li><li>如果 Pod 已就绪，则应调查服务是否可以将流量分配到 Pod</li><li>最后应该检查 Service 与 Ingress 之间的连接</li></ol><h3 id="_1-2-排查pod-故障" tabindex="-1">1.2 排查Pod 故障 <a class="header-anchor" href="#_1-2-排查pod-故障" aria-label="Permalink to &quot;1.2 排查Pod 故障&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#有 4 个常用的命令可以用来排查 Pod 故障</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看Pod状态</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pods</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#获取 Pod 容器的日志</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">logs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nam</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#获取 Pod 相关的事件列表</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">describe</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nam</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#在 Pod 内的容器中运行一个交互式命令</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nam</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#有 4 个常用的命令可以用来排查 Pod 故障</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看Pod状态</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pods</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#获取 Pod 容器的日志</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">logs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#获取 Pod 相关的事件列表</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">describe</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#在 Pod 内的容器中运行一个交互式命令</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">❌ 注意</p><p>常见 Pod 错误</p><p>启动错误如下：</p><ul><li>ImagePullBackOff</li><li>ImageInspectError</li><li>ErrImagePull</li><li>ErrImageNeverPull</li><li>RegistryUnavailavle</li><li>InvalidImageName</li></ul><p>运行时错误如下：</p><ul><li>CrashLoopBackOff</li><li>RunContainerError</li><li>KillContainerError</li><li>VerifyNonRootError</li><li>RunInitContainerError</li><li>CreatePodSandboxError</li><li>ConfigPodSandboxError</li><li>KillPodSandboxError</li><li>SetupNetworkError</li><li>TeardownNetworkError</li></ul></div><h3 id="_1-3-排查-service-故障" tabindex="-1">1.3 排查 Service 故障 <a class="header-anchor" href="#_1-3-排查-service-故障" aria-label="Permalink to &quot;1.3 排查 Service 故障&quot;">​</a></h3><p>如果 Pod 处于 Running 状态并 <em>Ready</em>，但仍无法收到应用程序的相应，则应检查 Service 的配置是否正确</p><p>Service 旨在根据 Pod 的标签将流量路由至 Pod</p><p>检查的第一件事是 Service 匹配了多少 Pod</p><p>通过检查 Service 中的 Endpoint</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">describe</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">service</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">service-nam</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Endpoints</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">describe</span><span style="color:#24292E;"> </span><span style="color:#032F62;">service</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">service-nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Endpoints</span></span></code></pre></div><p>endpoint 是一对 <code>&lt;ip address: port&gt;</code>，并且在 Service（至少）有一个 Pod，当 Service 以 Pod 为目标时</p><p>如果“Endpoints”部分为空，则有两种解释：</p><ol><li>您并没有运行带有正确标签的 Pod（提示：您应检查自己是否在正确的 namespace）</li><li>您在 Service 的 <code>selector</code> 的标签中有错别字</li></ol><p>如果您看到了 endpoints 列表，但仍然无法访问您的应用程序，则 service 中的 <code>targetPort</code>出现问题</p><p>测试服务</p><p>无论服务类型如何，都可以使用 <code>kubectl port-forward</code> 连接到它：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"> kubectl port-forward service/&lt;service-name&gt; 3000:80</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"> kubectl port-forward service/&lt;service-name&gt; 3000:80</span></span></code></pre></div><p>其中：</p><ul><li><code>&lt;service-name&gt;</code> 是 Service 的名称</li><li><code>3000</code> 是您希望在您的电脑上开放的端口</li><li><code>80</code> 是 Service 暴露的端口</li></ul><h3 id="_1-4-排查-ingress-故障" tabindex="-1">1.4 排查 Ingress 故障 <a class="header-anchor" href="#_1-4-排查-ingress-故障" aria-label="Permalink to &quot;1.4 排查 Ingress 故障&quot;">​</a></h3><ul><li>Pod 处于 <em>Running</em> 状态并 <em>Ready</em></li><li>Service 将流量分配到了 Pod</li></ul><p>仍然看不到应用程序的响应，有可能是 Ingress 配置错误</p><p>Ingress 使用 serviceName 和 servicePort 连接到 Service</p><p>检查 Ingress 是否配置正确</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">kubectl describe ingress &lt;ingress-name&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">kubectl describe ingress &lt;ingress-name&gt;</span></span></code></pre></div>`,29),p=[o];function t(c,r,i,d,y,E){return a(),l("div",null,p)}const F=s(e,[["render",t]]);export{u as __pageData,F as default};
