import{_ as s,o as a,c as n,R as e}from"./chunks/framework.zUbWieqp.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Database/pgSql/base/0-结构说明.md","filePath":"guide/Database/pgSql/base/0-结构说明.md","lastUpdated":1711535325000}'),l={name:"guide/Database/pgSql/base/0-结构说明.md"},p=e('<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">##pg 结构</span></span>\n<span class="line"><span style="color:#e1e4e8;">--逻辑结构</span></span>\n<span class="line"><span style="color:#e1e4e8;">--数据库实例通常指数据库集簇(database cluster)，单个实例管理数据库集合</span></span>\n<span class="line"><span style="color:#e1e4e8;">--一个数据库集簇包含用户、数据库，可为每个数据库指定单独的用户，每个数据库下面包含schemas（命名空间），默认为public，每个schemas下面包含表、索引、视图、序列等。</span></span>\n<span class="line"><span style="color:#e1e4e8;">--物理结构</span></span>\n<span class="line"><span style="color:#e1e4e8;">--数据文件、参数文件、控制文件、数据库运行日志及预写日志</span></span>\n<span class="line"><span style="color:#e1e4e8;">--可通过以下命令查看目录文件,具体作用可参考《Postgresql实战》98页</span></span>\n<span class="line"><span style="color:#e1e4e8;">tree -L 1 -d /pgdata/10/data</span></span>\n<span class="line"><span style="color:#e1e4e8;">--控制文件位置</span></span>\n<span class="line"><span style="color:#e1e4e8;">[postgres@pgtest ``global``]$ pwd</span></span>\n<span class="line"><span style="color:#e1e4e8;">/pgdata/data/``global</span></span>\n<span class="line"><span style="color:#e1e4e8;">[postgres@pgtest ``global``]$ ls -l pg_control </span></span>\n<span class="line"><span style="color:#e1e4e8;">-rw``------- 1 postgres postgres 8192 Dec 7 04:56 pg_control</span></span>\n<span class="line"><span style="color:#e1e4e8;">--数据文件布局</span></span>\n<span class="line"><span style="color:#e1e4e8;">--oid，所有数据库对象都有各自的对象标识符（oid）进行内部管理，它们是无符号的4字节整数，例如</span></span>\n<span class="line"><span style="color:#e1e4e8;">select` `oid,datname ``from` `pg_database;</span></span>\n<span class="line"><span style="color:#e1e4e8;">select` `oid,relname,relkind ``from` `pg_class;</span></span>\n<span class="line"><span style="color:#e1e4e8;">--表空间,最大的逻辑存储单位</span></span>\n<span class="line"><span style="color:#e1e4e8;">--默认两个表空间,pg_global表空间，目录为global,保存系统表；pg_default表空间的物理文件位置在base目录，是template0和template1数据库的默认表空间，</span></span>\n<span class="line"><span style="color:#e1e4e8;">--创建表空间需要先创建目录，表空间可以解决以后磁盘空不足问题、分配性能不同的磁盘上，提高数据库性能</span></span>\n<span class="line"><span style="color:#e1e4e8;">mkdir -p /pgdata/10/mytblspc</span></span>\n<span class="line"><span style="color:#e1e4e8;">create` `tablespace myspc location ``&#39;/pgdata/10/mytblspc&#39;``;</span></span>\n<span class="line"><span style="color:#e1e4e8;">create` `table` `t(id int4) tablespace myspc;</span></span>\n<span class="line"><span style="color:#e1e4e8;">--数据文件命名，对于表大小超出1g，pg会自动切分多个文件，oid.顺序号,真正管理表文件的是pg_class的relfilenode</span></span>\n<span class="line"><span style="color:#e1e4e8;">--查看表的大小</span></span>\n<span class="line"><span style="color:#e1e4e8;">select` `pg_size_pretty(pg_relation_size(``&#39;tb1&#39;``::regclass));</span></span>\n<span class="line"><span style="color:#e1e4e8;">--表文件内部结构</span></span>\n<span class="line"><span style="color:#e1e4e8;">--pg中，保存在磁盘中的块称为Page，内存中的块称为Buffer,表和索引称为Relation，行称为Tuple。数据读写以Page为最小单位，Page默认8KB</span></span>\n<span class="line"><span style="color:#e1e4e8;">##进程结构</span></span>\n<span class="line"><span style="color:#e1e4e8;">--守护进程与服务进程</span></span>\n<span class="line"><span style="color:#e1e4e8;">--postmaster进程主要职责</span></span>\n<span class="line"><span style="color:#e1e4e8;">数据库的启停</span></span>\n<span class="line"><span style="color:#e1e4e8;">监听客户端连接</span></span>\n<span class="line"><span style="color:#e1e4e8;">为每个客户端连接fork单独的postgres服务进程</span></span>\n<span class="line"><span style="color:#e1e4e8;">当服务进程出错时进行修复</span></span>\n<span class="line"><span style="color:#e1e4e8;">管理数据文件</span></span>\n<span class="line"><span style="color:#e1e4e8;">管理与数据库运行相关的辅助进程</span></span>\n<span class="line"><span style="color:#e1e4e8;">--辅助进程</span></span>\n<span class="line"><span style="color:#e1e4e8;">background writer:bgwriter进程，搜索共享缓冲池找到被修改的页，并将它们从共享缓冲池刷出</span></span>\n<span class="line"><span style="color:#e1e4e8;">autovacuum launcher: 自动清理回收垃圾进程</span></span>\n<span class="line"><span style="color:#e1e4e8;">WAL writer: 定期将WAL缓冲区上的WAL数据写入磁盘</span></span>\n<span class="line"><span style="color:#e1e4e8;">statistics` `collector: 统计信息收集进程</span></span>\n<span class="line"><span style="color:#e1e4e8;">logging collector: 日志进程，将消息或者错误信息写入日志</span></span>\n<span class="line"><span style="color:#e1e4e8;">archiver:WAL归档进程</span></span>\n<span class="line"><span style="color:#e1e4e8;">checkpointer:检查点进程</span></span>\n<span class="line"><span style="color:#e1e4e8;">##内存结构</span></span>\n<span class="line"><span style="color:#e1e4e8;">--本地内存主要给后端进程使用，主要三部分</span></span>\n<span class="line"><span style="color:#e1e4e8;">work_mem: 当使用``order` `by` `或``distinct``会使用到</span></span>\n<span class="line"><span style="color:#e1e4e8;">maintenance_work_mem: 维护操作，例如VACUUM REINDEX ``CREATE` `INDEX``等操作</span></span>\n<span class="line"><span style="color:#e1e4e8;">temp_buffers: 临时表相关操作使用</span></span>\n<span class="line"><span style="color:#e1e4e8;">--共享内存，在服务器启动时分配，由所有后端进程共同使用</span></span>\n<span class="line"><span style="color:#e1e4e8;">shared buffer pool :PostgreSQL将表和索引页面从持久存储装载到这里，并直接操作它们</span></span>\n<span class="line"><span style="color:#e1e4e8;">WAL buffer: WAL文件持久化之前的缓冲区</span></span>\n<span class="line"><span style="color:#e1e4e8;">CommitLog buffer:PostgreSQL 在``Commit` `Log中保存事务的状态，并将这些状态保留在共享内存缓冲区中，在整个事务处理过程中使用</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">##pg 结构</span></span>\n<span class="line"><span style="color:#24292e;">--逻辑结构</span></span>\n<span class="line"><span style="color:#24292e;">--数据库实例通常指数据库集簇(database cluster)，单个实例管理数据库集合</span></span>\n<span class="line"><span style="color:#24292e;">--一个数据库集簇包含用户、数据库，可为每个数据库指定单独的用户，每个数据库下面包含schemas（命名空间），默认为public，每个schemas下面包含表、索引、视图、序列等。</span></span>\n<span class="line"><span style="color:#24292e;">--物理结构</span></span>\n<span class="line"><span style="color:#24292e;">--数据文件、参数文件、控制文件、数据库运行日志及预写日志</span></span>\n<span class="line"><span style="color:#24292e;">--可通过以下命令查看目录文件,具体作用可参考《Postgresql实战》98页</span></span>\n<span class="line"><span style="color:#24292e;">tree -L 1 -d /pgdata/10/data</span></span>\n<span class="line"><span style="color:#24292e;">--控制文件位置</span></span>\n<span class="line"><span style="color:#24292e;">[postgres@pgtest ``global``]$ pwd</span></span>\n<span class="line"><span style="color:#24292e;">/pgdata/data/``global</span></span>\n<span class="line"><span style="color:#24292e;">[postgres@pgtest ``global``]$ ls -l pg_control </span></span>\n<span class="line"><span style="color:#24292e;">-rw``------- 1 postgres postgres 8192 Dec 7 04:56 pg_control</span></span>\n<span class="line"><span style="color:#24292e;">--数据文件布局</span></span>\n<span class="line"><span style="color:#24292e;">--oid，所有数据库对象都有各自的对象标识符（oid）进行内部管理，它们是无符号的4字节整数，例如</span></span>\n<span class="line"><span style="color:#24292e;">select` `oid,datname ``from` `pg_database;</span></span>\n<span class="line"><span style="color:#24292e;">select` `oid,relname,relkind ``from` `pg_class;</span></span>\n<span class="line"><span style="color:#24292e;">--表空间,最大的逻辑存储单位</span></span>\n<span class="line"><span style="color:#24292e;">--默认两个表空间,pg_global表空间，目录为global,保存系统表；pg_default表空间的物理文件位置在base目录，是template0和template1数据库的默认表空间，</span></span>\n<span class="line"><span style="color:#24292e;">--创建表空间需要先创建目录，表空间可以解决以后磁盘空不足问题、分配性能不同的磁盘上，提高数据库性能</span></span>\n<span class="line"><span style="color:#24292e;">mkdir -p /pgdata/10/mytblspc</span></span>\n<span class="line"><span style="color:#24292e;">create` `tablespace myspc location ``&#39;/pgdata/10/mytblspc&#39;``;</span></span>\n<span class="line"><span style="color:#24292e;">create` `table` `t(id int4) tablespace myspc;</span></span>\n<span class="line"><span style="color:#24292e;">--数据文件命名，对于表大小超出1g，pg会自动切分多个文件，oid.顺序号,真正管理表文件的是pg_class的relfilenode</span></span>\n<span class="line"><span style="color:#24292e;">--查看表的大小</span></span>\n<span class="line"><span style="color:#24292e;">select` `pg_size_pretty(pg_relation_size(``&#39;tb1&#39;``::regclass));</span></span>\n<span class="line"><span style="color:#24292e;">--表文件内部结构</span></span>\n<span class="line"><span style="color:#24292e;">--pg中，保存在磁盘中的块称为Page，内存中的块称为Buffer,表和索引称为Relation，行称为Tuple。数据读写以Page为最小单位，Page默认8KB</span></span>\n<span class="line"><span style="color:#24292e;">##进程结构</span></span>\n<span class="line"><span style="color:#24292e;">--守护进程与服务进程</span></span>\n<span class="line"><span style="color:#24292e;">--postmaster进程主要职责</span></span>\n<span class="line"><span style="color:#24292e;">数据库的启停</span></span>\n<span class="line"><span style="color:#24292e;">监听客户端连接</span></span>\n<span class="line"><span style="color:#24292e;">为每个客户端连接fork单独的postgres服务进程</span></span>\n<span class="line"><span style="color:#24292e;">当服务进程出错时进行修复</span></span>\n<span class="line"><span style="color:#24292e;">管理数据文件</span></span>\n<span class="line"><span style="color:#24292e;">管理与数据库运行相关的辅助进程</span></span>\n<span class="line"><span style="color:#24292e;">--辅助进程</span></span>\n<span class="line"><span style="color:#24292e;">background writer:bgwriter进程，搜索共享缓冲池找到被修改的页，并将它们从共享缓冲池刷出</span></span>\n<span class="line"><span style="color:#24292e;">autovacuum launcher: 自动清理回收垃圾进程</span></span>\n<span class="line"><span style="color:#24292e;">WAL writer: 定期将WAL缓冲区上的WAL数据写入磁盘</span></span>\n<span class="line"><span style="color:#24292e;">statistics` `collector: 统计信息收集进程</span></span>\n<span class="line"><span style="color:#24292e;">logging collector: 日志进程，将消息或者错误信息写入日志</span></span>\n<span class="line"><span style="color:#24292e;">archiver:WAL归档进程</span></span>\n<span class="line"><span style="color:#24292e;">checkpointer:检查点进程</span></span>\n<span class="line"><span style="color:#24292e;">##内存结构</span></span>\n<span class="line"><span style="color:#24292e;">--本地内存主要给后端进程使用，主要三部分</span></span>\n<span class="line"><span style="color:#24292e;">work_mem: 当使用``order` `by` `或``distinct``会使用到</span></span>\n<span class="line"><span style="color:#24292e;">maintenance_work_mem: 维护操作，例如VACUUM REINDEX ``CREATE` `INDEX``等操作</span></span>\n<span class="line"><span style="color:#24292e;">temp_buffers: 临时表相关操作使用</span></span>\n<span class="line"><span style="color:#24292e;">--共享内存，在服务器启动时分配，由所有后端进程共同使用</span></span>\n<span class="line"><span style="color:#24292e;">shared buffer pool :PostgreSQL将表和索引页面从持久存储装载到这里，并直接操作它们</span></span>\n<span class="line"><span style="color:#24292e;">WAL buffer: WAL文件持久化之前的缓冲区</span></span>\n<span class="line"><span style="color:#24292e;">CommitLog buffer:PostgreSQL 在``Commit` `Log中保存事务的状态，并将这些状态保留在共享内存缓冲区中，在整个事务处理过程中使用</span></span></code></pre></div>',1),o=[p];function c(t,r,i,y,g,d){return a(),n("div",null,o)}const b=s(l,[["render",c]]);export{m as __pageData,b as default};
