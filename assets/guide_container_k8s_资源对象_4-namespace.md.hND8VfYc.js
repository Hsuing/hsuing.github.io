import{_ as s,o as a,c as n,R as e}from"./chunks/framework.zUbWieqp.js";const m=JSON.parse('{"title":"1.Namespace","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/资源对象/4-namespace.md","filePath":"guide/container/k8s/资源对象/4-namespace.md","lastUpdated":1760705628000}'),l={name:"guide/container/k8s/资源对象/4-namespace.md"},p=e(`<h1 id="_1-namespace" tabindex="-1">1.Namespace <a class="header-anchor" href="#_1-namespace" aria-label="Permalink to &quot;1.Namespace&quot;">​</a></h1><p>​ 在Kubernetes中，名字空间（Namespace）提供一种机制，将同一集群中的资源划分为相互隔离的组。同一名字空间内的资源名称要唯一，但跨名字空间时没有这个要求</p><ul><li>对资源对象进行隔离：比如：Pod、DepLoyment、Service、将其划分为相互隔离的组</li><li>对资源配额进行隔离：CPU，Memory，限制某个NS的可以使用的cpu和内存</li></ul><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202401231417159.png" alt="image-20240123141724841"></p><p>​ namespace仅能隔离带有名称空间的资源，而不带名称空间的资源不支持隔离，可以通过<strong>kubectlapi-resources</strong>查看哪些资源属于名称空间级别，哪些不属于名称空间级别。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#查看命名空间</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">namespace</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#创建命名空间</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">namespacedev</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deployment</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--replicas=3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">namespace=dev</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--all</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#查看命名空间</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">namespace</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#创建命名空间</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">namespacedev</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deployment</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--replicas=3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">namespace=dev</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">namespace</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">namespace</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--all</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">💡 说明</p><p>NameSpace隔离其实就是名称的隔离，并不是物理的隔离，所以重点在于资源隔离</p></div><ul><li>命名空间划分</li></ul><p>按业务划分：shoping、edu</p><p>按环境划分：dev、prod</p><p>按团队划分</p><h2 id="_1-1-什么是命名空间" tabindex="-1">1.1 什么是命名空间 <a class="header-anchor" href="#_1-1-什么是命名空间" aria-label="Permalink to &quot;1.1 什么是命名空间&quot;">​</a></h2><p><code>Kubernetes</code> 支持多个虚拟集群，它们底层依赖于同一个物理集群。这些虚拟集群被称为命名空间。命名空间<code>namespace</code>是k8s集群级别的资源，可以给不同的用户、租户、环境或项目创建对应的命名空间，例如，可以为test、devlopment、production环境分别创建各自的命名空间。</p><h2 id="_1-2-跨namespace访问service" tabindex="-1">1.2 跨namespace访问service <a class="header-anchor" href="#_1-2-跨namespace访问service" aria-label="Permalink to &quot;1.2 跨namespace访问service&quot;">​</a></h2><p>我们通常会把mysql,redis,rabbitmq,mongodb这些公用组件放在一个namespace里，或者每个公用组件都有自己的namespace，而你的业务组件会统一放在自己的namespace里，这时就涉及到了跨namespace的数据通讯问题</p><h3 id="k8s的服务名dns解析" tabindex="-1">k8s的服务名DNS解析 <a class="header-anchor" href="#k8s的服务名dns解析" aria-label="Permalink to &quot;k8s的服务名DNS解析&quot;">​</a></h3><p>Kubernetes 目前使用的kube-dns来实现集群内部的service dns记录解析。默认情况下/etc/resolv.conf里，它的内容是统一的格式。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># more /etc/resolv.conf</span></span>
<span class="line"><span style="color:#B392F0;">nameserver</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">172.19</span><span style="color:#9ECBFF;">.0.10</span></span>
<span class="line"><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">saas.svc.cluster.local</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">svc.cluster.local</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cluster.local</span></span>
<span class="line"><span style="color:#B392F0;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ndots:5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">/</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># more /etc/resolv.conf</span></span>
<span class="line"><span style="color:#6F42C1;">nameserver</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">172.19</span><span style="color:#032F62;">.0.10</span></span>
<span class="line"><span style="color:#6F42C1;">search</span><span style="color:#24292E;"> </span><span style="color:#032F62;">saas.svc.cluster.local</span><span style="color:#24292E;"> </span><span style="color:#032F62;">svc.cluster.local</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cluster.local</span></span>
<span class="line"><span style="color:#6F42C1;">options</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ndots:5</span></span></code></pre></div><p>search doamin列表默认情况下，它只包<code>含本地域名</code>。这可以通过在search关键字后面列出所需的域搜索路径来添加。kubernetes为每个容器配置默认是<code>\${namespace}.svc.cluster.local</code> <code>svc.cluster.local</code> <code>cluster.local</code>。在一次dns域名查询时，将会尝试使用每个search doamin依次搜索少于ndots点（默认值为1）的解析器查询，直到找到匹配项。对于具有多个子域的环境，建议调整选项ndots:n，以避免man-in-the-middle攻击和root-dns-servers的不必要通信。</p><h3 id="ndots" tabindex="-1">ndots <a class="header-anchor" href="#ndots" aria-label="Permalink to &quot;ndots&quot;">​</a></h3><p>这个我们可以把它理解成服务名dns解析的层次，例如{服务名}是一级，而{服务名}.{命名空间}为二层，{服务名}.{命名空间}.svc.cluster.local是第三层，上面的配置一共有5层，同时也开启了5层，这样做可以保证最大限度的找到你的服务，但对于解析的性能是有影响的。</p><blockquote><p>请注意，如果搜索域对应的服务器不是本地的，那么这个查询过程可能会很慢，并且会产生大量的网络流量。如果其中一个搜索域域没有可用的服务器，则查询将超时。</p></blockquote><h3 id="同一集群跨namespace访问" tabindex="-1">同一集群跨namespace访问 <a class="header-anchor" href="#同一集群跨namespace访问" aria-label="Permalink to &quot;同一集群跨namespace访问&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">spring:</span></span>
<span class="line"><span style="color:#e1e4e8;">  profiles: redis-prod</span></span>
<span class="line"><span style="color:#e1e4e8;">  redis:</span></span>
<span class="line"><span style="color:#e1e4e8;">    host: redis-master.redis </span></span>
<span class="line"><span style="color:#e1e4e8;">    port: 6379</span></span>
<span class="line"><span style="color:#e1e4e8;">    password: 123456</span></span>
<span class="line"><span style="color:#e1e4e8;">    database: 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">spring:</span></span>
<span class="line"><span style="color:#24292e;">  profiles: redis-prod</span></span>
<span class="line"><span style="color:#24292e;">  redis:</span></span>
<span class="line"><span style="color:#24292e;">    host: redis-master.redis </span></span>
<span class="line"><span style="color:#24292e;">    port: 6379</span></span>
<span class="line"><span style="color:#24292e;">    password: 123456</span></span>
<span class="line"><span style="color:#24292e;">    database: 1</span></span></code></pre></div><p>它采用了服务名+命名空间的格式，如果是<code>相同的namespace</code>，可以直接使用服务名来解析。</p>`,25),o=[p];function c(t,r,i,y,d,E){return a(),n("div",null,o)}const u=s(l,[["render",c]]);export{m as __pageData,u as default};
