import{_ as s,o as a,c as o,R as e}from"./chunks/framework.zUbWieqp.js";const E=JSON.parse('{"title":"1. output","description":"","frontmatter":{},"headers":[],"relativePath":"guide/go/Terraform/11-output.md","filePath":"guide/go/Terraform/11-output.md","lastUpdated":1753370025000}'),p={name:"guide/go/Terraform/11-output.md"},n=e(`<h1 id="_1-output" tabindex="-1">1. <a href="https://developer.hashicorp.com/terraform/tutorials/configuration-language/outputs" target="_blank" rel="noreferrer">output</a> <a class="header-anchor" href="#_1-output" aria-label="Permalink to &quot;1. [output](https://developer.hashicorp.com/terraform/tutorials/configuration-language/outputs)&quot;">​</a></h1><h2 id="_1-1-使用说明✅" tabindex="-1">1.1 使用说明✅ <a class="header-anchor" href="#_1-1-使用说明✅" aria-label="Permalink to &quot;1.1 使用说明✅&quot;">​</a></h2><p><code>output</code> 可以打印已定义的变量，并且可以公开信息以供其他 <code>Terraform</code> 配置使用。输出值类似于编程语言中的返回值。</p><p><code>terraform output</code> 命令被用来提取状态文件中输出值的值。</p><h3 id="声明" tabindex="-1">声明 <a class="header-anchor" href="#声明" aria-label="Permalink to &quot;声明&quot;">​</a></h3><p>输出值的声明使用输出块，例如：</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">output</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">&quot;instance_ip_addr&quot;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  value</span><span style="color:#FFAB70;"> </span><span style="color:#F97583;">=</span><span style="color:#FFAB70;"> </span><span style="color:#E1E4E8;">aws_instance</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">private_ip</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">output</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">&quot;instance_ip_addr&quot;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  value</span><span style="color:#E36209;"> </span><span style="color:#D73A49;">=</span><span style="color:#E36209;"> </span><span style="color:#24292E;">aws_instance</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">private_ip</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>output</code> 关键字后紧跟的就是输出值的名称。在当前模块内的所有输出值的名字都必须是唯一的。<code>output</code> 块内的 <code>value</code> 参数即为输出值，它可以像是上面的例子里那样某个 resource 的输出属性，也可以是任意合法的表达式。</p><h2 id="_1-2-用法✅" tabindex="-1">1.2 用法✅ <a class="header-anchor" href="#_1-2-用法✅" aria-label="Permalink to &quot;1.2 用法✅&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">terraform output [options] [NAME]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">terraform output [options] [NAME]</span></span></code></pre></div><p>如果不添加参数，<code>output</code> 命令会展示根模块内定义的所有输出值。如果指定了 <code>NAME</code>，只会输出相关输出值。</p><p>可以使用以下参数：</p><ul><li><code>-json</code>：设置该参数后 Terraform 会使用 JSON 格式输出。如果指定了 <code>NAME</code>，只会输出相关输出值。该参数搭配 <code>jq</code> 使用可以构建复杂的流水线</li></ul><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/20250710215614531.png" alt="image-20250710215609952"></p><ul><li><code>-raw</code>：设置该参数后 Terraform 会将指定的输出值转换为字符串，并将该字符串直接打印到输出中，不带任何特殊格式。这在使用 shell 脚本时很方便，但它仅支持字符串、数字和布尔值。处理复杂的数据类型时还请使用 <code>-json</code>。</li></ul><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/20250710215740559.png" alt="image-20250710215737848"></p><ul><li><code>-no-color</code>：不输出颜色</li><li><code>-state=path</code>：状态文件的路径，默认为 <code>terraform.tfstate</code>。启用远程 Backend 时该参数无效</li></ul><p>使用-json和jq查询指定主机的ip</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">terraform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">output</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-json</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ecs_public_ip</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jq</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">terraform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">output</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-json</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ecs_public_ip</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jq</span></span></code></pre></div><h2 id="_1-3-案例" tabindex="-1">1.3 案例 <a class="header-anchor" href="#_1-3-案例" aria-label="Permalink to &quot;1.3 案例&quot;">​</a></h2><p><a href="https://registry.terraform.io/providers/aliyun/alicloud/latest/docs/resources/instance#attributes-reference" target="_blank" rel="noreferrer">输出值-官当</a></p><p>vim outputs.tf</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">output &quot;ecs_public_ip&quot; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">value=alicloud_instance.instance.public_ip</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">description = &quot;this is instance public ip&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">output &quot;ecs_public_ip&quot; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">value=alicloud_instance.instance.public_ip</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">description = &quot;this is instance public ip&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>通过 . 获取值</p></blockquote><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/20250710214555077.png" alt="image-20250710214236526"></p><div class="danger custom-block"><p class="custom-block-title">❌ 注意</p><ul><li>在运行<code>terraform apply</code>后，根模块会在终端中打印输出值。</li><li>输出值只有在执行<code>terraform apply</code>后才会被计算，使用<code>terraform plan</code>并不会计算输出值。</li><li>子模块可以使用输出将其资源属性的子集暴露给父模块。</li><li>子模块的output.tf只会应用到本层级中，不会传递到根目录。若需要传递到根目录，需要在根目录的output.tf文件中定义块引用子层级中的output.tf中的值。通过两次输出，使得主文件中的output变量能够输出到命令行中。</li></ul></div>`,26),l=[n];function t(c,r,i,u,d,h){return a(),o("div",null,l)}const g=s(p,[["render",t]]);export{E as __pageData,g as default};
