import{_ as s,o as a,c as e,R as n}from"./chunks/framework.zUbWieqp.js";const p="/assets/nginxpro.dmga-ltL.png",l="/assets/nginxw.pBrpwG-Q.png",o="/assets/reload.vTJvR0nq.png",t="/assets/shengji.71_7kCQr.png",r="/assets/shengji2.zOyrWJ-L.png",w=JSON.parse('{"title":"一、nginx进程结构","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Linux/web/nginx/nginx笔记/1-nginx进程结构.md","filePath":"guide/Linux/web/nginx/nginx笔记/1-nginx进程结构.md","lastUpdated":1701928035000}'),i={name:"guide/Linux/web/nginx/nginx笔记/1-nginx进程结构.md"},c=n('<h1 id="一、nginx进程结构" tabindex="-1">一、nginx进程结构 <a class="header-anchor" href="#一、nginx进程结构" aria-label="Permalink to &quot;一、nginx进程结构&quot;">​</a></h1><p><img src="'+p+`" alt="nginx进程结构"></p><p>nginx是多进程结构模型，由master作为父进程，启动多个子进程，通过信号管理</p><h2 id="master进程" tabindex="-1">Master进程 <a class="header-anchor" href="#master进程" aria-label="Permalink to &quot;Master进程&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;&lt; 监控worker进程:CHLD（子进程终止的时候会向父进程发送CHLD信号，Master进程接受后可以立刻拉起wroker进程）</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;&lt;管理worker进程,可以接受的信号</span></span>
<span class="line"><span style="color:#e1e4e8;">****TERM,INT : 立刻停止</span></span>
<span class="line"><span style="color:#e1e4e8;">****QUIT ：优雅停止</span></span>
<span class="line"><span style="color:#e1e4e8;">****HUP ：从载配置文件</span></span>
<span class="line"><span style="color:#e1e4e8;">****USR1 ：从新打开日志文件</span></span>
<span class="line"><span style="color:#e1e4e8;">****USR2 ：平滑升级可执行程序</span></span>
<span class="line"><span style="color:#e1e4e8;">****WINCH ：从容关闭工作进程</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;&lt; 监控worker进程:CHLD（子进程终止的时候会向父进程发送CHLD信号，Master进程接受后可以立刻拉起wroker进程）</span></span>
<span class="line"><span style="color:#24292e;">&lt;&lt;管理worker进程,可以接受的信号</span></span>
<span class="line"><span style="color:#24292e;">****TERM,INT : 立刻停止</span></span>
<span class="line"><span style="color:#24292e;">****QUIT ：优雅停止</span></span>
<span class="line"><span style="color:#24292e;">****HUP ：从载配置文件</span></span>
<span class="line"><span style="color:#24292e;">****USR1 ：从新打开日志文件</span></span>
<span class="line"><span style="color:#24292e;">****USR2 ：平滑升级可执行程序</span></span>
<span class="line"><span style="color:#24292e;">****WINCH ：从容关闭工作进程</span></span></code></pre></div><h2 id="worker进程" tabindex="-1">Worker进程 <a class="header-anchor" href="#worker进程" aria-label="Permalink to &quot;Worker进程&quot;">​</a></h2><p>Worker进程也可以接受上面4个进程，一般都是对Master进程发送信号，Master进程再向Worker进程发送信号</p><h2 id="nginx命令行-各命令对应的信号" tabindex="-1">nginx命令行（各命令对应的信号） <a class="header-anchor" href="#nginx命令行-各命令对应的信号" aria-label="Permalink to &quot;nginx命令行（各命令对应的信号）&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"> reload：HUP（用kill直接发送信号）</span></span>
<span class="line"><span style="color:#e1e4e8;"> reopen：USR1</span></span>
<span class="line"><span style="color:#e1e4e8;"> stop：TERM</span></span>
<span class="line"><span style="color:#e1e4e8;"> quit：QUIT</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"> reload：HUP（用kill直接发送信号）</span></span>
<span class="line"><span style="color:#24292e;"> reopen：USR1</span></span>
<span class="line"><span style="color:#24292e;"> stop：TERM</span></span>
<span class="line"><span style="color:#24292e;"> quit：QUIT</span></span></code></pre></div><p>nginx的Master进程的PID会记录在logs目录的nginx.pid文件中</p><p>worker进程优雅的关闭，主要针对的是HTTP请求。代理websocker协议，TCP，UDP层的时候不能优雅推出</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">设置定时器 worker_shutdown_timeout</span></span>
<span class="line"><span style="color:#e1e4e8;">关闭监听句柄 ：保证要关闭的进程不再处理新的连接</span></span>
<span class="line"><span style="color:#e1e4e8;">关闭空闲连接 ：为了利用最大化，会保存一些空闲的连接，这时会被关闭。</span></span>
<span class="line"><span style="color:#e1e4e8;">在循环中等待全部连接关闭：每发现一个请求处理完毕就会把这个连接关闭。超过设置的worker_shutdown_timeout的时间，会立即退出。</span></span>
<span class="line"><span style="color:#e1e4e8;">退出进程</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">设置定时器 worker_shutdown_timeout</span></span>
<span class="line"><span style="color:#24292e;">关闭监听句柄 ：保证要关闭的进程不再处理新的连接</span></span>
<span class="line"><span style="color:#24292e;">关闭空闲连接 ：为了利用最大化，会保存一些空闲的连接，这时会被关闭。</span></span>
<span class="line"><span style="color:#24292e;">在循环中等待全部连接关闭：每发现一个请求处理完毕就会把这个连接关闭。超过设置的worker_shutdown_timeout的时间，会立即退出。</span></span>
<span class="line"><span style="color:#24292e;">退出进程</span></span></code></pre></div><h1 id="_2-nginx-reload流程" tabindex="-1">2.Nginx Reload流程 <a class="header-anchor" href="#_2-nginx-reload流程" aria-label="Permalink to &quot;2.Nginx Reload流程&quot;">​</a></h1><p><img src="`+l+'" alt="nginxReload流程"></p><ul><li>不停机更新配置文件</li></ul><p><img src="'+o+'" alt="不停机更新配置文件"></p><h1 id="_3-热升级流程" tabindex="-1">3.热升级流程 <a class="header-anchor" href="#_3-热升级流程" aria-label="Permalink to &quot;3.热升级流程&quot;">​</a></h1><p>不停止服务，平滑升级</p><p><img src="'+t+'" alt=""></p><p><img src="'+r+'" alt=""></p><p><a href="https://wiki.jikexueyuan.com/project/openresty-best-practice/phase.html" target="_blank" rel="noreferrer">https://wiki.jikexueyuan.com/project/openresty-best-practice/phase.html</a></p><p><a href="https://www.cnblogs.com/guixiaoming/p/8378038.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/guixiaoming/p/8378038.html</a></p><p><a href="http://www.jincon.com/archives/413/" target="_blank" rel="noreferrer">http://www.jincon.com/archives/413/</a></p><p><a href="https://www.cnblogs.com/jackey2015/p/10820796.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/jackey2015/p/10820796.html</a></p>',24),d=[c];function h(g,_,u,m,k,y){return a(),e("div",null,d)}const b=s(i,[["render",h]]);export{w as __pageData,b as default};
