import{_ as e,o as t,c as r,R as a}from"./chunks/framework.zUbWieqp.js";const p=JSON.parse('{"title":"v1.16.0","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Blockchain/geth/maintain_release.md","filePath":"guide/Blockchain/geth/maintain_release.md","lastUpdated":1752158731000}'),o={name:"guide/Blockchain/geth/maintain_release.md"},h=a('<h1 id="v1-16-0" tabindex="-1"><a href="https://github.com/ethereum/go-ethereum/releases/tag/v1.16.0" target="_blank" rel="noreferrer">v1.16.0</a> <a class="header-anchor" href="#v1-16-0" aria-label="Permalink to &quot;[v1.16.0](https://github.com/ethereum/go-ethereum/releases/tag/v1.16.0)&quot;">​</a></h1><p>We are proud to present the v1.16.0 release, introducing path-based archive node and several other improvements to the state database implementation. There is also the usual amount of bug fixes and small improvements.</p><h3 id="archive-node" tabindex="-1">Archive Node <a class="header-anchor" href="#archive-node" aria-label="Permalink to &quot;Archive Node&quot;">​</a></h3><p>This release includes a new, experimental implementation of the archive node (<code>--gcmode=archive</code>). As an archive node, Geth stores all historical states, and can thus retrieve account balances, nonces and storage values at old blocks.</p><p>In previous versions of Geth, running as an archive node was only possible using the legacy &#39;hash-based&#39; state storage scheme (<code>--state.scheme=hash</code>). When syncing mainnet the resulting database would reach sizes larger than 20TB, and it all had to be stored on a high-speed SSD.</p><p>The new implementation provides the state archive in combination with &#39;path-based&#39; storage (<code>--state.scheme=path</code>). Comparing to hash-based storage, there are three basic advantages:</p><ul><li>Geth can be configured to store historical states on a dedicated disk, and it doesn&#39;t have to be an SSD (it will be ~3x faster to access when stored on SSD though).</li><li>For the full state history of mainnet, the state database will have a size of ~1.9TB (this is without the tx-by-hash index and log index).</li><li>The amount of historical state kept by the node is configurable as well. By default, Geth will keep historical state for the last 90k blocks, and older state is pruned from disk automatically as the chain advances. You can set the number of states to keep with the <code>--history.state</code> flag.</li></ul><p>Notably, there is also one drawback with the new archive node: <code>eth_getProof</code> is not supported for historical blocks. With <code>--state.scheme=path</code>, Geth can only serve state proofs for the latest 128 blocks. We believe this is an acceptable tradeoff. If you need older proofs, you can still a hash-based archive node as before, but we&#39;d also really like to hear about your use case. Please contact us via email at <code>geth@ethereum.org</code> so we can learn more, and possibly find a solution that can be implemented within Geth.</p><h4 id="how-it-works" tabindex="-1">How it works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How it works&quot;">​</a></h4><p>With &#39;path-based&#39; state storage, Geth keeps exactly one full state in the database. Specifically, the persistent state is 128 blocks in the past. For newer blocks up to the head, forward diffs are kept in memory. In order to support rolling back to blocks older than head-128, Geth also keeps &#39;state history&#39; in the form of reverse key-value diffs. When the chain is reset to an old block, these diffs are applied to the persistent state, going backwards one diff at a time until the target block is reached.</p><p>A reverse state diff contains the previous values of all modified accounts and storage locations for a specific block. There is a reverse diff for each historical block. This makes reverse diffs suitable for storage into the &#39;freezer&#39;, i.e. they do not need to live within Pebble/LevelDB.</p><p>The new archive mode is built on the realization that reverse state diffs contain all necessary data to serve historical state queries. For example, in order to get the historical balance of an account X at block B, we can search forward through diffs starting at block B until we find a block where account X is modified. This diff will contain the balance of the account, since it stores the all modified pre-values.</p><p>To accelerate the search for a suitable diff, Geth creates a database index storing the block numbers in which an account was modified. This index is small compared to the overall state history, but it is crucial for correct operation of the archive node. The state index is stored in PebbleDB and will be generated automatically while geth is syncing the chain. It takes ~30h to build the archive state index for mainnet, and historical state will only be available when the index is fully built. Geth will report a syncing status through <code>eth_syncing</code> while the indexing happens.</p><h4 id="other-state-implementation-changes" tabindex="-1">Other state implementation changes <a class="header-anchor" href="#other-state-implementation-changes" aria-label="Permalink to &quot;Other state implementation changes&quot;">​</a></h4><p>In v1.16.0, the implementation of the &#39;state snapshot&#39; has been rewritten for improved integration with path-based state storage. As you may recall, Geth stores the state in two different ways:</p><ul><li>The &#39;snapshot&#39; contains the flat keys and values of the state, in a layer-based struture.</li><li>The trie database contains state trie nodes, necessary for the state root computation.</li></ul><p>When the implementation of the snapshot and its layer tree was introduced in Geth <a href="https://github.com/ethereum/go-ethereum/releases/tag/v1.10.0" target="_blank" rel="noreferrer">v1.10.0</a>, it was built to be entirely separate from the trie database. We added path-based state storage in <a href="https://blog.ethereum.org/2023/09/12/geth-v1-13-0" target="_blank" rel="noreferrer">v1.13.0</a>, and that system contains a layer tree as well, with slight differences in semantics and implementation.</p><p>As of this release, the layer trees of the state snapshot and trie database have been merged into a single implementation (<a href="https://github.com/ethereum/go-ethereum/pull/30661" target="_blank" rel="noreferrer">#30661</a>). In path-based mode, the trie database now holds a reference to the corresponding snapshot layer for each tree state. The new layer tree has also been enhanced with an additional index of layers in which an account was modified (<a href="https://github.com/ethereum/go-ethereum/pull/30971" target="_blank" rel="noreferrer">#30971</a>). Note this is similar in spirit to the historical state index. The new index will enable us to increase the number of in-memory state layers in the future.</p><h3 id="full-list-of-changes-in-this-release" tabindex="-1">Full list of changes in this release <a class="header-anchor" href="#full-list-of-changes-in-this-release" aria-label="Permalink to &quot;Full list of changes in this release&quot;">​</a></h3><h4 id="geth" tabindex="-1">Geth <a class="header-anchor" href="#geth" aria-label="Permalink to &quot;Geth&quot;">​</a></h4><ul><li>The default block gas limit is now 45M. (<a href="https://github.com/ethereum/go-ethereum/pull/32087" target="_blank" rel="noreferrer">#32087</a>)</li><li>Geth can now use era1 files to access history when running with pruned history. (<a href="https://github.com/ethereum/go-ethereum/pull/31604" target="_blank" rel="noreferrer">#31604</a>)</li><li>There is a new <code>geth download-era</code> subcommand for fetching era1 files. (<a href="https://github.com/ethereum/go-ethereum/pull/31823" target="_blank" rel="noreferrer">#31823</a>, <a href="https://github.com/ethereum/go-ethereum/pull/31951" target="_blank" rel="noreferrer">#31951</a>, <a href="https://github.com/ethereum/go-ethereum/pull/32081" target="_blank" rel="noreferrer">#32081</a>)</li><li>When Geth is interrupted while it is syncing, pending block imports will now be canceled, leading to a quicker shutdown. (<a href="https://github.com/ethereum/go-ethereum/pull/32062" target="_blank" rel="noreferrer">#32062</a>)</li><li><code>Ready for fork activation</code> messages are now printed based on the current clock time. (<a href="https://github.com/ethereum/go-ethereum/pull/31800" target="_blank" rel="noreferrer">#31800</a>)</li><li>Geth no longer allows setting a different network ID when running a network preset. (<a href="https://github.com/ethereum/go-ethereum/pull/31630" target="_blank" rel="noreferrer">#31630</a>)</li><li>The beacon-chain light client, blsync, has been fixed to work correctly after Pectra. (<a href="https://github.com/ethereum/go-ethereum/pull/31775" target="_blank" rel="noreferrer">#31775</a>)</li><li><code>geth --dev</code> now shows a listing of pre-funded dev chain accounts and their keys. (<a href="https://github.com/ethereum/go-ethereum/pull/31898" target="_blank" rel="noreferrer">#31898</a>)</li><li><code>geth --dev</code> now always enables preimage recording. (<a href="https://github.com/ethereum/go-ethereum/pull/31821" target="_blank" rel="noreferrer">#31821</a>)</li></ul><h4 id="fusaka" tabindex="-1">Fusaka <a class="header-anchor" href="#fusaka" aria-label="Permalink to &quot;Fusaka&quot;">​</a></h4><p>We have started merging some EIP implementations for the upcoming Fusaka fork:</p><ul><li>EIP 7883 - ModExp Gas Cost Increase (<a href="https://github.com/ethereum/go-ethereum/pull/31606" target="_blank" rel="noreferrer">#31606</a>, <a href="https://github.com/ethereum/go-ethereum/pull/32015" target="_blank" rel="noreferrer">#32015</a>)</li><li>EIP 7823 - Set upper bounds for MODEXP (<a href="https://github.com/ethereum/go-ethereum/pull/31818" target="_blank" rel="noreferrer">#31818</a>)</li><li>EIP-7594 - PeerDAS (<a href="https://github.com/ethereum/go-ethereum/pull/31791" target="_blank" rel="noreferrer">#31791</a>, <a href="https://github.com/ethereum/go-ethereum/pull/31992" target="_blank" rel="noreferrer">#31992</a>)</li></ul><h4 id="core" tabindex="-1">Core <a class="header-anchor" href="#core" aria-label="Permalink to &quot;Core&quot;">​</a></h4><ul><li>There is a new archive-node implementation using path-based storage. (<a href="https://github.com/ethereum/go-ethereum/pull/31156" target="_blank" rel="noreferrer">#31156</a>, <a href="https://github.com/ethereum/go-ethereum/pull/31161" target="_blank" rel="noreferrer">#31161</a>, <a href="https://github.com/ethereum/go-ethereum/pull/31725" target="_blank" rel="noreferrer">#31725</a>, <a href="https://github.com/ethereum/go-ethereum/pull/31781" target="_blank" rel="noreferrer">#31781</a>, <a href="https://github.com/ethereum/go-ethereum/pull/32091" target="_blank" rel="noreferrer">#32091</a>, <a href="https://github.com/ethereum/go-ethereum/pull/32099" target="_blank" rel="noreferrer">#32099</a>)</li><li>The pathdb layer tree has been rewritten for tight integration with the state snapshot, and has an improved lookup structure that helps it scale to more than 128 layers. (<a href="https://github.com/ethereum/go-ethereum/pull/30661" target="_blank" rel="noreferrer">#30661</a>, <a href="https://github.com/ethereum/go-ethereum/pull/32086" target="_blank" rel="noreferrer">#32086</a>, <a href="https://github.com/ethereum/go-ethereum/pull/32097" target="_blank" rel="noreferrer">#32097</a>)</li><li>The state prefetcher has been improved to run for all inserted blocks, not just during full sync. (<a href="https://github.com/ethereum/go-ethereum/pull/31557" target="_blank" rel="noreferrer">#31557</a>, <a href="https://github.com/ethereum/go-ethereum/pull/32075" target="_blank" rel="noreferrer">#32075</a>, <a href="https://github.com/ethereum/go-ethereum/pull/32071" target="_blank" rel="noreferrer">#32071</a>)</li><li>Metrics for state cache utilization and the prefetcher have been added. (<a href="https://github.com/ethereum/go-ethereum/pull/31998" target="_blank" rel="noreferrer">#31998</a>)</li><li>We have also added metrics for gas usage and mgas/s (<a href="https://github.com/ethereum/go-ethereum/pull/31753" target="_blank" rel="noreferrer">#31753</a>, <a href="https://github.com/ethereum/go-ethereum/pull/32004" target="_blank" rel="noreferrer">#32004</a>)</li><li>The Pebble database is now synced to disk at explicit safepoints. In the beginning of the v1.15.x release cycle, we added a change that disabled fsync on the database level, then spent a bunch more time throughout the cycle triaging issues related to that. We eventually had to row back and enable fsync again in v1.15.8, causing a drop in performance. The new approach of syncing explicitly gives us the ability to disable fsync for most writes, improving performance. (<a href="https://github.com/ethereum/go-ethereum/pull/31703" target="_blank" rel="noreferrer">#31703</a>)</li><li>Pebble parameters have been tweaked to ensure better compaction behavior. Specifically, some changes were made to smooth out compaction-related CPU and I/O spikes. (<a href="https://github.com/ethereum/go-ethereum/pull/31970" target="_blank" rel="noreferrer">#31970</a>, <a href="https://github.com/ethereum/go-ethereum/pull/31988" target="_blank" rel="noreferrer">#31988</a>, <a href="https://github.com/ethereum/go-ethereum/pull/31782" target="_blank" rel="noreferrer">#31782</a>, <a href="https://github.com/ethereum/go-ethereum/pull/30464" target="_blank" rel="noreferrer">#30464</a>)</li></ul><h4 id="rpc" tabindex="-1">RPC <a class="header-anchor" href="#rpc" aria-label="Permalink to &quot;RPC&quot;">​</a></h4><ul><li>Logs returned by <code>eth_getLogs</code> and similar requests will now return the <code>blockTimestamp</code>. (<a href="https://github.com/ethereum/go-ethereum/pull/31887" target="_blank" rel="noreferrer">#31887</a>)</li><li><code>eth_getBlockReceipts</code> will now return <code>null</code> instead of an error for blocks which are not found. (<a href="https://github.com/ethereum/go-ethereum/pull/31949" target="_blank" rel="noreferrer">#31949</a>)</li><li>The prestate tracer has seen some tweaks related to empty accounts. (<a href="https://github.com/ethereum/go-ethereum/pull/31855" target="_blank" rel="noreferrer">#31855</a>, <a href="https://github.com/ethereum/go-ethereum/pull/31427" target="_blank" rel="noreferrer">#31427</a>)</li><li>Geth now provides a built-in tracer for ERC-7562. (<a href="https://github.com/ethereum/go-ethereum/pull/31006" target="_blank" rel="noreferrer">#31006</a>)</li><li>Geth no longer provides clique-related RPC APIs. (<a href="https://github.com/ethereum/go-ethereum/pull/31875" target="_blank" rel="noreferrer">#31875</a>)</li><li>The ABI library has been changed to raise an error when trying to encode a negative integer as an unsigned ABI integer type. (<a href="https://github.com/ethereum/go-ethereum/pull/31790" target="_blank" rel="noreferrer">#31790</a>)</li></ul><h4 id="networking" tabindex="-1">Networking <a class="header-anchor" href="#networking" aria-label="Permalink to &quot;Networking&quot;">​</a></h4><ul><li>Geth now implements p2p protocol version eth/69. (<a href="https://github.com/ethereum/go-ethereum/pull/29158" target="_blank" rel="noreferrer">#29158</a>, <a href="https://github.com/ethereum/go-ethereum/pull/31952" target="_blank" rel="noreferrer">#31952</a>, <a href="https://github.com/ethereum/go-ethereum/pull/31843" target="_blank" rel="noreferrer">#31843</a>)</li><li>Peer discovery performance has been improved. (<a href="https://github.com/ethereum/go-ethereum/pull/31944" target="_blank" rel="noreferrer">#31944</a>)</li><li>Geth will now start syncing when a ForkchoiceUpdated call is received from the consensus layer. This is a defense-in-depth measure that would&#39;ve helped a bit with the recent Hoodi chain fault recovery, since we do not have to wait for the CL client to fully sync before starting sync on the EL. (<a href="https://github.com/ethereum/go-ethereum/pull/31928" target="_blank" rel="noreferrer">#31928</a>)</li><li>Peer-to-peer connection error metrics have been improved. (<a href="https://github.com/ethereum/go-ethereum/pull/31652" target="_blank" rel="noreferrer">#31652</a>)</li><li>The blob transaction pool now limits transactions to at most 7 blobs. Note this change has no practical impact since there was an overall size limit applied to transactions. (<a href="https://github.com/ethereum/go-ethereum/pull/31837" target="_blank" rel="noreferrer">#31837</a>)</li></ul><p>For a full rundown of the changes please consult the Geth 1.16.0 <a href="https://github.com/ethereum/go-ethereum/milestone/189?closed=1" target="_blank" rel="noreferrer">release milestone</a></p>',31),l=[h];function i(n,s,u,c,m,d){return t(),r("div",null,l)}const f=e(o,[["render",i]]);export{p as __pageData,f as default};
