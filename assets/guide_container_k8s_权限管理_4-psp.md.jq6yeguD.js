import{_ as t,o as s,c as e,R as a}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"1. Pod Security Policy, PSP","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/权限管理/4-psp.md","filePath":"guide/container/k8s/权限管理/4-psp.md","lastUpdated":1723628763000}'),o={name:"guide/container/k8s/权限管理/4-psp.md"},n=a('<h1 id="_1-pod-security-policy-psp" tabindex="-1">1. Pod Security Policy, PSP <a class="header-anchor" href="#_1-pod-security-policy-psp" aria-label="Permalink to &quot;1. Pod Security Policy, PSP&quot;">​</a></h1><p>Pod 安全策略是一种 Kubernetes 原生的安全功能，允许你控制 Pod 的安全配置。虽然 Kubernetes 1.21 后开始逐步弃用 PSP，但在老版本 Kubernetes 中仍然常用。可以使用 Pod 安全策略来限制哪些 Pod 可以以特权模式运行</p><h2 id="_1-1-pod-security-policy-简介" tabindex="-1">1.1 Pod Security Policy 简介 <a class="header-anchor" href="#_1-1-pod-security-policy-简介" aria-label="Permalink to &quot;1.1 Pod Security Policy 简介&quot;">​</a></h2><p>Pod Security Policy 是一个赋予集群管理员控制 Pod 安全规范的内置准入控制器，可以让管理人员控制Pod实例安全的诸多方面，例如禁止采用root权限、防止容器逃逸等等。Pod Security Policy 定义了一组 Pod 运行时必须遵循的条件及相关字段的默认值，Pod 必须满足这些条件才能被成功创建，Pod Security Policy 对象 Spec 包含以下字段也即是 Pod Security Policy 能够控制的方面：</p><table><thead><tr><th>控制的角度</th><th>字段名称</th></tr></thead><tbody><tr><td>运行特权容器</td><td>privileged</td></tr><tr><td>使用宿主名字空间</td><td>hostPID,hostIPC</td></tr><tr><td>使用宿主的网络和端口</td><td>hostNetwork, hostPorts</td></tr><tr><td>控制卷类型的使用</td><td>volumes</td></tr><tr><td>使用宿主文件系统</td><td>allowedHostPaths</td></tr><tr><td>允许使用特定的 FlexVolume 驱动</td><td>allowedFlexVolumes</td></tr><tr><td>分配拥有 Pod 卷的 FSGroup 账号</td><td>fsGroup</td></tr><tr><td>以只读方式访问根文件系统</td><td>readOnlyRootFilesystem</td></tr><tr><td>设置容器的用户和组 ID</td><td>runAsUser, runAsGroup, supplementalGroups</td></tr><tr><td>限制 root 账号特权级提升</td><td>allowPrivilegeEscalation, defaultAllowPrivilegeEscalation</td></tr><tr><td>Linux 功能（Capabilities）</td><td>defaultAddCapabilities, requiredDropCapabilities, allowedCapabilities</td></tr><tr><td>设置容器的 SELinux 上下文</td><td>seLinux</td></tr><tr><td>指定容器可以挂载的 proc 类型</td><td>allowedProcMountTypes</td></tr><tr><td>指定容器使用的 AppArmor 模版</td><td>annotations</td></tr><tr><td>指定容器使用的 seccomp 模版</td><td>annotations</td></tr><tr><td>指定容器使用的 sysctl 模版</td><td>forbiddenSysctls,allowedUnsafeSysctls</td></tr></tbody></table><p>其中AppArmor 和seccomp 需要通过给PodSecurityPolicy对象添加注解的方式设定：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">seccomp.security.alpha.kubernetes.io/allowedProfileNames:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;docker/default&#39;</span></span>\n<span class="line"><span style="color:#B392F0;">seccomp.security.alpha.kubernetes.io/defaultProfileNames:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;docker/default&#39;</span></span>\n<span class="line"><span style="color:#B392F0;">apparmor.security.beta.kubernetes.io/allowedProfileNames:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;runtime/default&#39;</span><span style="color:#E1E4E8;"> </span></span>\n<span class="line"><span style="color:#B392F0;">apparmor.security.beta.kubernetes.io/defaultProfileNames:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;runtime/default&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">seccomp.security.alpha.kubernetes.io/allowedProfileNames:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;docker/default&#39;</span></span>\n<span class="line"><span style="color:#6F42C1;">seccomp.security.alpha.kubernetes.io/defaultProfileNames:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;docker/default&#39;</span></span>\n<span class="line"><span style="color:#6F42C1;">apparmor.security.beta.kubernetes.io/allowedProfileNames:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;runtime/default&#39;</span><span style="color:#24292E;"> </span></span>\n<span class="line"><span style="color:#6F42C1;">apparmor.security.beta.kubernetes.io/defaultProfileNames:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;runtime/default&#39;</span></span></code></pre></div><p>Pod Security Policy是集群级别的资源，我们看一下它的使用流程：</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202408141601931.png" alt="img"></p><blockquote><p>PodSecurityPolicy 在 Kubernetes v1.21 中<a href="https://kubernetes.io/blog/2021/04/08/kubernetes-1-21-release-announcement/#podsecuritypolicy-deprecation" target="_blank" rel="noreferrer">被弃用</a>， 在 Kubernetes v1.25 中被移除。</p></blockquote><h2 id="_2-为什么出现pod-security-admission" tabindex="-1">2. 为什么出现Pod Security Admission <a class="header-anchor" href="#_2-为什么出现pod-security-admission" aria-label="Permalink to &quot;2. 为什么出现Pod Security Admission&quot;">​</a></h2><p>通过对PodSecurityPolicy使用，应该也会发现它的问题，例如没有dry-run和审计模式、不方便开启和关闭等，并且使用起来也不那么清晰。种种缺陷造成的结果是PodSecurityPolicy在Kubernetes v1.21被标记为弃用，并且将在 v1.25中被移除，在kubernets v1.22中则增加了新特性Pod Security Admission。</p><h1 id="_2-pod-security-admission介绍" tabindex="-1">2. Pod Security Admission介绍 <a class="header-anchor" href="#_2-pod-security-admission介绍" aria-label="Permalink to &quot;2. Pod Security Admission介绍&quot;">​</a></h1><p>pod security admission是kubernetes内置的一种准入控制器，在kubernetes v1.23版本中这一特性门是默认开启的，在v1.22中需要通过kube-apiserver参数 <code>--feature-gates=&quot;...,PodSecurity=true&quot;</code> 开启。在低于v1.22的kuberntes版本中也可以自行安装Pod Security Admission Webhook。</p><p>pod security admission是通过执行内置的 Pod Security Standards来限制集群中的pod的创建。</p><h1 id="_3-pod-security-standards" tabindex="-1">3. Pod Security Standards <a class="header-anchor" href="#_3-pod-security-standards" aria-label="Permalink to &quot;3. Pod Security Standards&quot;">​</a></h1><p>为了广泛的覆盖安全应用场景， Pod Security Standards渐进式的定义了三种不同的Pod安全标准策略：</p><table><thead><tr><th>Profile</th><th>描述</th></tr></thead><tbody><tr><td><strong>Privileged</strong></td><td>不受限制的策略，提供最大可能范围的权限许可。此策略允许已知的特权提升。</td></tr><tr><td><strong>Baseline</strong></td><td>限制性最弱的策略，禁止已知的策略提升。允许使用默认的（规定最少）Pod 配置。</td></tr><tr><td><strong>Restricted</strong></td><td>限制性非常强的策略，遵循当前的保护 Pod 的最佳实践。</td></tr></tbody></table><p>详细内容参见<a href="https://kubernetes.io/docs/concepts/security/pod-security-standards" target="_blank" rel="noreferrer">Pod Security Standards</a>。</p><h2 id="_3-1-pod-security-standards实施方法" tabindex="-1">3.1 Pod Security Standards实施方法 <a class="header-anchor" href="#_3-1-pod-security-standards实施方法" aria-label="Permalink to &quot;3.1 Pod Security Standards实施方法&quot;">​</a></h2><p>在kubernetes集群中开启了pod security admission特性门之后，就可以通过给namespace设置label的方式来实施Pod Security Standards。其中有三种设定模式可选用：</p><table><thead><tr><th style="text-align:left;">Mode</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>enforce</strong></td><td style="text-align:left;">违反安全标准策略的 Pod 将被拒绝。</td></tr><tr><td style="text-align:left;"><strong>audit</strong></td><td style="text-align:left;">违反安全标准策略触发向审计日志中记录的事件添加审计注释，但其他行为被允许。</td></tr><tr><td style="text-align:left;"><strong>warn</strong></td><td style="text-align:left;">违反安全标准策略将触发面向用户的警告，但其他行为被允许。</td></tr></tbody></table><p>label设置模板解释：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 设定模式及安全标准策略等级</span></span>\n<span class="line"><span style="color:#6A737D;"># MODE必须是 `enforce`, `audit`或`warn`其中之一。</span></span>\n<span class="line"><span style="color:#6A737D;"># LEVEL必须是`privileged`, `baseline`或 `restricted`其中之一</span></span>\n<span class="line"><span style="color:#85E89D;">pod-security.kubernetes.io/&lt;MODE&gt;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&lt;LEVEL&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># 此选项是非必填的，用来锁定使用哪个版本的的安全标准</span></span>\n<span class="line"><span style="color:#6A737D;"># MODE必须是 `enforce`, `audit`或`warn`其中之一。</span></span>\n<span class="line"><span style="color:#6A737D;"># VERSION必须是一个有效的kubernetes minor version(例如v1.23)，或者 `latest`</span></span>\n<span class="line"><span style="color:#85E89D;">pod-security.kubernetes.io/&lt;MODE&gt;-version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&lt;VERSION&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 设定模式及安全标准策略等级</span></span>\n<span class="line"><span style="color:#6A737D;"># MODE必须是 `enforce`, `audit`或`warn`其中之一。</span></span>\n<span class="line"><span style="color:#6A737D;"># LEVEL必须是`privileged`, `baseline`或 `restricted`其中之一</span></span>\n<span class="line"><span style="color:#22863A;">pod-security.kubernetes.io/&lt;MODE&gt;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&lt;LEVEL&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># 此选项是非必填的，用来锁定使用哪个版本的的安全标准</span></span>\n<span class="line"><span style="color:#6A737D;"># MODE必须是 `enforce`, `audit`或`warn`其中之一。</span></span>\n<span class="line"><span style="color:#6A737D;"># VERSION必须是一个有效的kubernetes minor version(例如v1.23)，或者 `latest`</span></span>\n<span class="line"><span style="color:#22863A;">pod-security.kubernetes.io/&lt;MODE&gt;-version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&lt;VERSION&gt;</span></span></code></pre></div>',24),r=[n];function l(d,p,i,c,u,y){return s(),e("div",null,r)}const b=t(o,[["render",l]]);export{h as __pageData,b as default};
