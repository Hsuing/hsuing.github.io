import{_ as t,o as e,c as r,R as s}from"./chunks/framework.zUbWieqp.js";const b=JSON.parse('{"title":"1. Ingress文档","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/Ingress/index.md","filePath":"guide/container/k8s/Ingress/index.md","lastUpdated":1732373831000}'),d={name:"guide/container/k8s/Ingress/index.md"},n=s('<h1 id="_1-ingress文档" tabindex="-1">1. Ingress文档 <a class="header-anchor" href="#_1-ingress文档" aria-label="Permalink to &quot;1. Ingress文档&quot;">​</a></h1><ul><li>Kubernetes Ingress</li></ul><p><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress/" target="_blank" rel="noreferrer">https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress/</a></p><p><a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/" target="_blank" rel="noreferrer">https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/</a></p><p><a href="https://kubernetes.github.io/ingress-nginx/" target="_blank" rel="noreferrer">https://kubernetes.github.io/ingress-nginx/</a></p><h1 id="_2-k8s和ingress对应版本关系" tabindex="-1">2. k8s和ingress对应版本关系 <a class="header-anchor" href="#_2-k8s和ingress对应版本关系" aria-label="Permalink to &quot;2. k8s和ingress对应版本关系&quot;">​</a></h1><p><a href="https://github.com/kubernetes/ingress-nginx/tree/controller-v1.6.4?spm=a2c6h.12873639.article-detail.7.715a3cb8JYXJdd&amp;file=controller-v1.6.4" target="_blank" rel="noreferrer">https://github.com/kubernetes/ingress-nginx/tree/controller-v1.6.4?spm=a2c6h.12873639.article-detail.7.715a3cb8JYXJdd&amp;file=controller-v1.6.4</a></p><ul><li>Supported Versions table</li></ul><p>Supported versions for the ingress-nginx project mean that we have completed E2E tests, and they are passing for the versions listed. Ingress-Nginx versions <strong>may</strong> work on older versions, but the project does not make that guarantee.</p><blockquote><p>入口（Ingress）目前已停止更新。新的功能正在集成至<a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/gateway/" target="_blank" rel="noreferrer">网关 API</a> 中。</p></blockquote><table><thead><tr><th>Supported</th><th>Ingress-NGINX version</th><th>k8s supported version</th><th>Alpine Version</th><th>Nginx Version</th><th>Helm Chart Version</th></tr></thead><tbody><tr><td>🔄</td><td><strong>v1.11.3</strong></td><td>1.30, 1.29, 1.28, 1.27, 1.26</td><td>3.20.3</td><td>1.25.5</td><td>4.11.3</td></tr><tr><td>🔄</td><td><strong>v1.11.2</strong></td><td>1.30, 1.29, 1.28, 1.27, 1.26</td><td>3.20.0</td><td>1.25.5</td><td>4.11.2</td></tr><tr><td>🔄</td><td><strong>v1.11.1</strong></td><td>1.30, 1.29, 1.28, 1.27, 1.26</td><td>3.20.0</td><td>1.25.5</td><td>4.11.1</td></tr><tr><td>🔄</td><td><strong>v1.11.0</strong></td><td>1.30, 1.29, 1.28, 1.27, 1.26</td><td>3.20.0</td><td>1.25.5</td><td>4.11.0</td></tr><tr><td>🔄</td><td><strong>v1.10.4</strong></td><td>1.30, 1.29, 1.28, 1.27, 1.26</td><td>3.20.0</td><td>1.25.5</td><td>4.10.4</td></tr><tr><td>🔄</td><td><strong>v1.10.3</strong></td><td>1.30, 1.29, 1.28, 1.27, 1.26</td><td>3.20.0</td><td>1.25.5</td><td>4.10.3</td></tr><tr><td>🔄</td><td><strong>v1.10.2</strong></td><td>1.30, 1.29, 1.28, 1.27, 1.26</td><td>3.20.0</td><td>1.25.5</td><td>4.10.2</td></tr><tr><td>🔄</td><td><strong>v1.10.1</strong></td><td>1.29, 1.28, 1.27, 1.26</td><td>3.19.1</td><td>1.25.3</td><td>4.10.1*</td></tr><tr><td>🔄</td><td><strong>v1.10.0</strong></td><td>1.29, 1.28, 1.27, 1.26</td><td>3.19.1</td><td>1.25.3</td><td>4.10.0*</td></tr><tr><td>🔄</td><td><strong>v1.9.6</strong></td><td>1.29, 1.28, 1.27, 1.26, 1.25</td><td>3.19.0</td><td>1.21.6</td><td>4.9.1*</td></tr><tr><td>🔄</td><td><strong>v1.9.5</strong></td><td>1.28, 1.27, 1.26, 1.25</td><td>3.18.4</td><td>1.21.6</td><td>4.9.0*</td></tr><tr><td>🔄</td><td><strong>v1.9.4</strong></td><td>1.28, 1.27, 1.26, 1.25</td><td>3.18.4</td><td>1.21.6</td><td>4.8.3</td></tr><tr><td>🔄</td><td><strong>v1.9.3</strong></td><td>1.28, 1.27, 1.26, 1.25</td><td>3.18.4</td><td>1.21.6</td><td>4.8.*</td></tr><tr><td>🔄</td><td><strong>v1.9.1</strong></td><td>1.28, 1.27, 1.26, 1.25</td><td>3.18.4</td><td>1.21.6</td><td>4.8.*</td></tr><tr><td>🔄</td><td><strong>v1.9.0</strong></td><td>1.28, 1.27, 1.26, 1.25</td><td>3.18.2</td><td>1.21.6</td><td>4.8.*</td></tr><tr><td></td><td>v1.8.4</td><td>1.27, 1.26, 1.25, 1.24</td><td>3.18.2</td><td>1.21.6</td><td>4.7.*</td></tr><tr><td></td><td>v1.7.1</td><td>1.27, 1.26, 1.25, 1.24</td><td>3.17.2</td><td>1.21.6</td><td>4.6.*</td></tr><tr><td></td><td>v1.6.4</td><td>1.26, 1.25, 1.24, 1.23</td><td>3.17.0</td><td>1.21.6</td><td>4.5.*</td></tr><tr><td></td><td>v1.5.1</td><td>1.25, 1.24, 1.23</td><td>3.16.2</td><td>1.21.6</td><td>4.4.*</td></tr><tr><td></td><td>v1.4.0</td><td>1.25, 1.24, 1.23, 1.22</td><td>3.16.2</td><td>1.19.10†</td><td>4.3.0</td></tr><tr><td></td><td>v1.3.1</td><td>1.24, 1.23, 1.22, 1.21, 1.20</td><td>3.16.2</td><td>1.19.10†</td><td>4.2.5</td></tr></tbody></table><h1 id="_3-ingress诞生背景" tabindex="-1">3. Ingress诞生背景 <a class="header-anchor" href="#_3-ingress诞生背景" aria-label="Permalink to &quot;3. Ingress诞生背景&quot;">​</a></h1><p>1、K8S集群内SVC不支持外部访问；</p><p>2、通过NodePort方式不易于后续管理；只支持4层负责均衡;</p><p>3、应用层面需要更高级别的路由功能和负载平衡；</p><h1 id="_4-ingress基本概念" tabindex="-1">4. Ingress基本概念 <a class="header-anchor" href="#_4-ingress基本概念" aria-label="Permalink to &quot;4. Ingress基本概念&quot;">​</a></h1><h2 id="_4-1-为何需要ingress" tabindex="-1">4.1 为何需要Ingress <a class="header-anchor" href="#_4-1-为何需要ingress" aria-label="Permalink to &quot;4.1 为何需要Ingress&quot;">​</a></h2><p>service的三种方式ClusterIP、NodePort与LoadBalance，这几种方式都是在service的维度提供的，service的作用体现在两个方面，</p><p>对集群内部，它不断跟踪pod的变化，更新endpoint中对应pod的对象，提供了ip不断变化的pod的服务发现机制，</p><p>对集群外部，他类似负载均衡器，可以在集群内外部对pod进行访问。</p><p>单独用service暴露服务的方式，存在一些问题：</p><p>1.如果通过NodePort暴露端口过多，后期维护成本太大，且不易于管理；</p><p>2.ClusterIP的方式只能在集群内部访问</p><p>3.LoadBalance方式受限于云平台，且通常在云平台部署ELB还需要额外的费用</p><p>4.目前Service底层使用的是IptabLes、IPVS，仅支持4层协议，无法完成https协议传输；</p><p>Kubernetes为了解决这种需求，提供了一种高级的流量管理，也就是Ingress和Ingress控制器，Kubernetes使用Ingress控制器来接收所有入口的流量，然后通过Ingress资源来定义流量如何区分，以及流量如何转发的规则。</p><p>有了Ingress和Ingress控制器，我们就可以直接定义流量转发规则来发布服务，而无需创建一堆的NodePort和LoadBalance类型的Service.</p><h2 id="_4-2-什么是ingress" tabindex="-1">4.2 什么是Ingress <a class="header-anchor" href="#_4-2-什么是ingress" aria-label="Permalink to &quot;4.2 什么是Ingress&quot;">​</a></h2><p>Ingress其实就是Kubernetes中的一种资源，它主要是用来定义流量转发规则。但Ingress资源自身并不能实现流量的转发和调度，它仅仅是一组流量路由的规则集合，这些规则要真正发挥作用还需要使用到Ingress控制器，由Ingress控制器读取对应的Ingress规则，然后完成流量的路由或转发。</p><ul><li>原理图</li></ul><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202411232241462.gif" alt=""></p><p>Kubernetes 提出了一种新的 API 对象，叫做 <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/" target="_blank" rel="noreferrer">Ingress</a>，它通过定义不同的 HTTP 路由规则，将集群内部的 Service 通过 HTTP 的方式暴露到集群外部</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202405201501106.png" alt="image-20240520150107464"></p><blockquote><p>一组基于域名或URL把请求转发到指定Service实例的访问规则，是Kubernetes的一种资源对象，Ingress实例被存储在对象存储服务etcd中，通过接口服务被实现增、删、改、查的操作。</p></blockquote><h2 id="_4-3-ingress-controller" tabindex="-1">4.3 Ingress Controller <a class="header-anchor" href="#_4-3-ingress-controller" aria-label="Permalink to &quot;4.3 Ingress Controller&quot;">​</a></h2><p><code>Ingress ControLler</code>就是一类以代理HTTP/HTTPS协议为主的代理程序。如:Nginx、Traefik、Envoy、Haproxy。<code>Ingress Controller</code>通过Pod的形式运行在Kubernetes集群上，它能够与集群上的Pod直接通信。这样就可以让用户的流量经过Ingress控制器时直接调度到对应的Pod上。</p><p><code>Ingress Controller</code>类似Nginx服务，它负责读取Ingress的规则,然后转换将规则转换为nginx.conf配置文件，这样就可以根据对应的规则来实现流量的调度。同时它还会实时感知后端Service对应的Pod变化，当Pod发生变动后，Ingress控制器会再次结合Ingress的规则，进而完成对应的配置动态更新。</p><blockquote><p>用以实时监控资源对象Ingress、Service、End-point、Secret（主要是TLS证书和Key）、Node、ConfigMap的变化，自动对Nginx进行相应的操作</p></blockquote><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202405201533919.png" alt="image-20240520153333822"></p><div class="danger custom-block"><p class="custom-block-title">❌ 注意</p><p>使用Ingress资源进行流量分发时，Ingress控制器可基于ingress定义的规则将客户端的请求流量直接转发至Service对应的后端Pod资源上。比如：用户请求api.xxx.net，Ingress控制器根据对应的规则直接将请求流量调度至Pod3或Pod4，而无需经过Service对象转发</p></div><h2 id="_4-4-ingress的组成" tabindex="-1">4.4 Ingress的组成 <a class="header-anchor" href="#_4-4-ingress的组成" aria-label="Permalink to &quot;4.4 Ingress的组成&quot;">​</a></h2><p><code>Ingress资源</code>是一种虚拟的资源和规则定义，需要配合ingressController才能生效。所以要让<code>Ingress资源</code>工作，集群必须有一个正在运行的ingressController。</p><p>Ingress由<code>Ingress规则</code>、<code>IngressController</code>、<code>IngressClass</code>这3部分组成。</p><p>Ingress规则只是一系列的配置，必须使用IngressController才能使其生效，而IngressClass是IngressController的具体实现.</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202405241647826.png" alt="image-20240524164700791"></p><h1 id="_5-与旧版相比" tabindex="-1">5. 与旧版相比 <a class="header-anchor" href="#_5-与旧版相比" aria-label="Permalink to &quot;5. 与旧版相比&quot;">​</a></h1><p><strong>1，apiVersion: networking.k8s.io/v1（新版）</strong></p><p><strong>apiVersion: extensions/v1beta1（旧版）</strong></p><p><strong>2，新版取消了注解，也就是annotations（元数据这不用注解），统一使用ingressClassName（在spec模块使用）</strong></p><p><strong>3，ingress直接绑定的是ingress的服务，而旧版绑定的是节点ip：</strong></p><p><strong>4,新版新增pathType，旧版是使用注解</strong></p><p>有3种支持的path类型：</p><p>ImplementationSpecific：对于这种path类型，匹配取决于IngressClass。可以将其视为一个单独的pathType或者将其认为和Prefix或者Exact路径类型一样。</p><p>Exact：精确匹配URL路径，并且区分大小写</p><p>Prefix: 根据URL中的，被/分割的前缀进行匹配。匹配区分大小写并且按照元素对路径进行匹配。path元素指的是路径中由/分隔符分隔的标签列表。</p><h3 id="其他控制器" tabindex="-1">其他控制器 <a class="header-anchor" href="#其他控制器" aria-label="Permalink to &quot;其他控制器&quot;">​</a></h3><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202405241701267.png" alt="img"></p><p><a href="https://www.cnblogs.com/crazymakercircle/p/17270035.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/crazymakercircle/p/17270035.html</a></p><p><a href="https://www.cnblogs.com/yinzhengjie/p/12271836.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/yinzhengjie/p/12271836.html</a></p><p><a href="https://www.cnblogs.com/wangguishe/p/17159301.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/wangguishe/p/17159301.html</a></p>',60),o=[n];function a(i,g,p,c,l,h){return e(),r("div",null,o)}const m=t(d,[["render",a]]);export{b as __pageData,m as default};
