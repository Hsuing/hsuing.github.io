import{_ as s,o as a,c as n,R as l}from"./chunks/framework.zUbWieqp.js";const u=JSON.parse('{"title":"1.golang变量","description":"","frontmatter":{},"headers":[],"relativePath":"guide/go/5-Go变量.md","filePath":"guide/go/5-Go变量.md","lastUpdated":1757516490000}'),p={name:"guide/go/5-Go变量.md"},o=l(`<h1 id="_1-golang变量" tabindex="-1">1.golang变量 <a class="header-anchor" href="#_1-golang变量" aria-label="Permalink to &quot;1.golang变量&quot;">​</a></h1><p>变量是计算机语言中能 <code>储存</code>计算结果或能表示值的抽象概念。不同的变量保存的数据类型可能会不一样。</p><p><code>静态语言的习惯：使用变量前，先声明</code>。</p><blockquote><p>变量名称的命名：Go语言变量名由字母、数字、下划线组成，其中首个字符不能为数字。Go语言中关键字和保留字都不使用</p></blockquote><h2 id="基本数据类型明变量" tabindex="-1">基本数据类型明变量 <a class="header-anchor" href="#基本数据类型明变量" aria-label="Permalink to &quot;基本数据类型明变量&quot;">​</a></h2><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>uint8 / uint16 / uint32 / uint64</td><td>无符号 8 / 16 / 32 / 64位整型</td></tr><tr><td>int8 / int16 / int32 / int64</td><td>有符号8 / 16 / 32 / 64位整型</td></tr><tr><td>float32 / float64</td><td>IEEE-754 32 / 64 位浮点型数</td></tr><tr><td>complex64 / complex128</td><td>32 / 64 位实数和虚数</td></tr><tr><td>byte</td><td>类似 uint8</td></tr><tr><td>rune</td><td>类似 int32</td></tr><tr><td>uintptr</td><td>无符号整型，用于存放一个指针</td></tr></tbody></table><p>Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语音的 <code>变量声明后必须使用</code>。</p><ul><li>声明变量的语法</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> identifier </span><span style="color:#F97583;">type</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">var: 声明变量关键字</span></span>
<span class="line"><span style="color:#E1E4E8;">identifier： 变量名称</span></span>
<span class="line"><span style="color:#E1E4E8;">type： 变量类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//例如</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> age </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ok </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> identifier </span><span style="color:#D73A49;">type</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">var: 声明变量关键字</span></span>
<span class="line"><span style="color:#24292E;">identifier： 变量名称</span></span>
<span class="line"><span style="color:#24292E;">type： 变量类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//例如</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ok </span><span style="color:#D73A49;">bool</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="如果变量没有初始化" tabindex="-1">如果变量没有初始化 <a class="header-anchor" href="#如果变量没有初始化" aria-label="Permalink to &quot;如果变量没有初始化&quot;">​</a></h4><p>在go语言中定义了一个变量，指定变量类型，如果没有初始化，则变量默认为零值。<strong>零值就是变量没有做初始化时系统默认设置的值</strong>。</p><table><thead><tr><th>类型</th><th>零值</th></tr></thead><tbody><tr><td>数值类型</td><td>0</td></tr><tr><td>布尔类型</td><td>false</td></tr><tr><td>字符串</td><td>“”（空字符串）</td></tr></tbody></table><h4 id="如果变量没有指定类型" tabindex="-1">如果变量没有指定类型 <a class="header-anchor" href="#如果变量没有指定类型" aria-label="Permalink to &quot;如果变量没有指定类型&quot;">​</a></h4><p>在go语言中如果没有指定变量类型，可以通过变量的初始值来判断变量的类型。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(d)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(d)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_1-1-符号" tabindex="-1">1.1 :=符号 <a class="header-anchor" href="#_1-1-符号" aria-label="Permalink to &quot;1.1 :=符号&quot;">​</a></h2><p>当我们定义一个变量后又使用该符号初始化变量，就会产生编译错误，因为该符号其实是一个声明语句。</p><p>使用格式：<code>typename := value</code> 变量名 := 变量值</p><p>也就是说 <code>intVal := 1</code>相等于：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> intVal </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">intVal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> intVal </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">intVal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><h2 id="_1-2批量声明" tabindex="-1">1.2批量声明 <a class="header-anchor" href="#_1-2批量声明" aria-label="Permalink to &quot;1.2批量声明&quot;">​</a></h2><p>使用一个var 关键字，吧一些变量写在一个括号()里</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">		name </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">		age </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">		ok  </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">	)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">		name </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">		age </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">		ok  </span><span style="color:#D73A49;">bool</span></span>
<span class="line"><span style="color:#24292E;">	)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_1-3变量初始化" tabindex="-1">1.3变量初始化 <a class="header-anchor" href="#_1-3变量初始化" aria-label="Permalink to &quot;1.3变量初始化&quot;">​</a></h2><p>Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如：整型和浮点变量的默认值为0.字符串变量的默认值为空字符串 <code>&quot;&quot;</code>。布尔型变量默认为 <code>false</code>。切片、函数、指针变量默认为 <code>nil</code>.</p><ul><li>变量初始化语法</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> 变量名 类型 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 表达式</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//如</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;xxx&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> site </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;www.xxx.com&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> age </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> 变量名 类型 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 表达式</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//如</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;xxx&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> site </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;www.xxx.com&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="类型推导" tabindex="-1">类型推导 <a class="header-anchor" href="#类型推导" aria-label="Permalink to &quot;类型推导&quot;">​</a></h3><p>我们在声明变量时，可以根据初始化值进行类型推导，从而省略类型</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;tom&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> site </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ww.xx.com&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> age </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;tom&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> site </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ww.xx.com&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="初始化多个变量" tabindex="-1">初始化多个变量 <a class="header-anchor" href="#初始化多个变量" aria-label="Permalink to &quot;初始化多个变量&quot;">​</a></h3><p>可以一次初始化多个变量，中间用逗号分割</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name, site, age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;tom&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;xx.com&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">30</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name, site, age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;tom&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;xx.com&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">30</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="值交换" tabindex="-1">值交换 <a class="header-anchor" href="#值交换" aria-label="Permalink to &quot;值交换&quot;">​</a></h3><p>当一次定义了多个值的时候就可以进行交换</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tel,desc </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;10010&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;上海&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(tel,desc)</span></span>
<span class="line"><span style="color:#E1E4E8;">    tel,desc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> desc,tel</span></span>
<span class="line"><span style="color:#E1E4E8;">    fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(tel,desc)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> version </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;www.linuxea.com&quot;</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    tel,desc </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;10010&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;上海&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(tel,desc)</span></span>
<span class="line"><span style="color:#E1E4E8;">    tel,desc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> desc,tel</span></span>
<span class="line"><span style="color:#E1E4E8;">    fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(tel,desc)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tel,desc </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;10010&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;上海&quot;</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(tel,desc)</span></span>
<span class="line"><span style="color:#24292E;">    tel,desc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> desc,tel</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(tel,desc)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> version </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;www.linuxea.com&quot;</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    tel,desc </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;10010&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;上海&quot;</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(tel,desc)</span></span>
<span class="line"><span style="color:#24292E;">    tel,desc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> desc,tel</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(tel,desc)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_1-4短变量声明" tabindex="-1">1.4短变量声明 <a class="header-anchor" href="#_1-4短变量声明" aria-label="Permalink to &quot;1.4短变量声明&quot;">​</a></h2><p>在函数内部，可以使用 <code>:=</code>运算符对变量进行声明和初始化，在定义变量的时候，可以不指定类型，go会根据赋值类型自动推导，但是必须赋值</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	name </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;tom&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	site </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;xxx.com&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	age </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	name </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;tom&quot;</span></span>
<span class="line"><span style="color:#24292E;">	site </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;xxx.com&quot;</span></span>
<span class="line"><span style="color:#24292E;">	age </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>这种方法只适合在函数内部，函数外不能使用(全局变量的声明)</p></blockquote><p>var简短声明和区别</p><blockquote><p>[!NOTE]</p><p>注意：</p><p>这里使用了简短声明，没有使用var声明 。在函数体内可以使用简短声明。而在函数体外必须使用var 定义，如下，go会根据值类型进行自动推导类型</p></blockquote><h2 id="_1-5匿名变量" tabindex="-1">1.5匿名变量 <a class="header-anchor" href="#_1-5匿名变量" aria-label="Permalink to &quot;1.5匿名变量&quot;">​</a></h2><p>如果我们接收到多个变量，有一些变量使用不到，可以是使用下划线 <code>_</code>表示变量名称，这种变量叫做匿名变量。</p><p>匿名变量的特点是一个下画线_，这本身就是一个特殊的标识符，被称为空白标识符。它可以像其他标识符那样用于变量的声明或赋值（任何类型都可以赋值给它），但任何赋给这个标识符的值都将被抛弃，因此这些值不能在后续的代码中使用，也不可以使用这个标识符作为变量对其它变量进行赋值或运算。</p><p>使用匿名变量时，只需要在变量声明的地方使用下画线替换即可</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetData</span><span style="color:#E1E4E8;">() (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    a, _ </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GetData</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    _, b </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GetData</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(a,b)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetData</span><span style="color:#24292E;">() (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    a, _ </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">GetData</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    _, b </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">GetData</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(a,b)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>需要注意的是匿名变量不占用内存空间，不会分配内存。匿名变量与匿名变量之间也不会因为多次声明而无法使用</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//name 和 age 可以省略</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getNameAndAge</span><span style="color:#E1E4E8;">() (name </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, age </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;tom&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">30</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    匿名变量在使用多重赋值时，如果想要忽略某个值，可以使用匿名变量（anonymous variable）匿名变量用一个下划线_表示</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">	name, _ </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getNameAndAge</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name: </span><span style="color:#79B8FF;">%v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> , name)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//name 和 age 可以省略</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getNameAndAge</span><span style="color:#24292E;">() (name </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, age </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;tom&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">30</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    匿名变量在使用多重赋值时，如果想要忽略某个值，可以使用匿名变量（anonymous variable）匿名变量用一个下划线_表示</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">	name, _ </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getNameAndAge</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name: </span><span style="color:#005CC5;">%v\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> , name)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_1-6全局变量" tabindex="-1">1.6全局变量 <a class="header-anchor" href="#_1-6全局变量" aria-label="Permalink to &quot;1.6全局变量&quot;">​</a></h2><p>关于全局变量的声明如下： <code>var ( vname1 v_type1 vname2 v_type2 )</code></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	a </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    b </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	a </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    b </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>类型分为：延迟赋值和立刻赋值</p><h2 id="_1-7变量作用域" tabindex="-1">1.7变量作用域 <a class="header-anchor" href="#_1-7变量作用域" aria-label="Permalink to &quot;1.7变量作用域&quot;">​</a></h2><p>作用域指的是已声明的标识符所表示的常量、类型、函数或者包在源代码中的作用范围，在此我们主要看一下go中变量的作用域，根据变量定义位置的不同，可以分为一下三个类型：</p><p>1.函数内定义的变量为<strong>局部变量</strong>，这种局部变量的作用域只在函数体内，函数的参数和返回值变量都属于局部变量。这种变量在存在于函数被调用时，销毁于函数调用结束后</p><p>2.函数外定义的变量为<strong>全局变量</strong>，全局变量只需要在一个源文件中定义，就可以在所有源文件中使用，甚至可以使用import引入外部包来使用。全局变量声明必须以 var 关键字开头，如果想要在外部包中使用全局变量的首字母必须大写</p><p>3.函数定义中的变量成为形式参数，定义函数时函数名后面括号中的变量叫做形式参数（简称形参）。形式参数只在函数调用时才会生效，函数调用结束后就会被销毁，在函数未被调用时，函数的形参并不占用实际的存储单元，也没有实际值。形式参数会作为函数的局部变量来使用</p><blockquote><p>注意：</p><p>函数体内的变量必须使用，否则会报错</p></blockquote><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> version </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;xxm&quot;</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> me </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">    me </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;linuxea.com&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(me)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> version </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;xxm&quot;</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> me </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">    me </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;linuxea.com&quot;</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(me)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>函数外的变量没有使用是不会报错的</p></blockquote><div class="warning custom-block"><p class="custom-block-title">💡 注意</p><p><em>变量只能声明一次，同一作用域内，不能重复定义，但是可以重复赋值</em></p><p>tel := 10086</p><p>tel = 10086</p></div>`,62),e=[o];function t(c,r,y,E,i,d){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{u as __pageData,g as default};
