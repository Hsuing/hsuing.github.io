import{_ as e,o as t,c as i,R as a}from"./chunks/framework.zUbWieqp.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/cloud/aws/5-route53.md","filePath":"guide/cloud/aws/5-route53.md","lastUpdated":1701247404000}'),s={name:"guide/cloud/aws/5-route53.md"},g=a('<p><a href="http://www.cloudbin.cn/?tag=aws&amp;paged=2" target="_blank" rel="noreferrer">http://www.cloudbin.cn/?tag=aws&amp;paged=2</a></p><h2 id="route53简介" tabindex="-1">Route53简介 <a class="header-anchor" href="#route53简介" aria-label="Permalink to &quot;Route53简介&quot;">​</a></h2><p><strong>Amazon Route 53</strong>是一种高可用、高扩展性的云DNS服务。它为开发人员和企业提供一种非常可靠和经济的方法，把对用户友好的、易读的域名（比如aws.xiaopeiqing.com）转换为IP地址（例如120.79.65.207）。目前Amazon Route53已经支持IPv6</p><h3 id="amazon-route-53-如何为您的域路由流量" tabindex="-1">Amazon Route 53 如何为您的域路由流量 <a class="header-anchor" href="#amazon-route-53-如何为您的域路由流量" aria-label="Permalink to &quot;Amazon Route 53 如何为您的域路由流量&quot;">​</a></h3><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns01.png" alt="img"></p><p>官方文档：<a href="https://docs.aws.amazon.com/zh_cn/Route53/latest/DeveloperGuide/welcome-dns-service.html" target="_blank" rel="noreferrer">https://docs.aws.amazon.com/zh_cn/Route53/latest/DeveloperGuide/welcome-dns-service.html</a></p><ul><li>弹性负载均衡器（ELB）没有固定的IPv4地址，在使用ELB的时候永远使用它的DNS名字。很多场景下我们需要绑定DNS记录到ELB的endpoint地址，而不绑定任何IP</li><li>需要熟记Alias记录和CNAME的区别，也可以参考一下<a href="https://docs.aws.amazon.com/zh_cn/Route53/latest/DeveloperGuide/resource-record-sets-choosing-alias-non-alias.html" target="_blank" rel="noreferrer">在别名和非别名记录之间做出选择</a></li></ul><h2 id="如何使用route53的dns服务" tabindex="-1">如何使用Route53的DNS服务 <a class="header-anchor" href="#如何使用route53的dns服务" aria-label="Permalink to &quot;如何使用Route53的DNS服务&quot;">​</a></h2><p>在<strong>AWS Route53</strong>中有多种不同的<strong>路由策略（Routing Policy）</strong>，我们可以根据自己的不同需求将我们的DNS解析到不同的目标上去。</p><ul><li><strong>简单路由策略（Simple Routing Policy）</strong>：提供单一资源的策略类型，即一个DNS域名指向一个单一目标</li><li><strong>加权路由策略（Weighted Routing Policy）</strong>：按照不同的权值比例将流量分配到不同的目标上去</li><li><strong>延迟路由策略（Latency Routing Policy）</strong>：根据网络延迟的不同，将与用户延迟最小的结果应答给最终用户</li><li><strong>地理位置路由策略（Geolocation Routing Policy）</strong>：根据用户所在的地理位置，将不同的目标结果应答给用户</li><li><strong>地理位置临近度路由（Geo-proximity Routing Policies）</strong>： 当您希望根据资源的位置路由流量时使用，并且可以选择将流量从一个位置的资源转移到另一个位置的资源。 Geoproximity routing允许Amazon根据用户和资源的地理位置将流量路由到您的资源。</li><li><strong>故障转移路由策略（Failover Routing Policy）</strong>：配置主动/被动（Active/Passive）的故障转移策略，保证DNS解析的容灾</li></ul><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns02.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns03-1024x454.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns04-1024x484.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns05-1024x465.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns07-1024x504.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/image-20220123174833107.png" alt="image-20220123174833107"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns10-1024x385.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns12-1024x465.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns13-1024x460.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns14-1024x412.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns15-1024x521.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns16-1024x472.png" alt="img"></p><h2 id="路由策略" tabindex="-1">路由策略 <a class="header-anchor" href="#路由策略" aria-label="Permalink to &quot;路由策略&quot;">​</a></h2><h3 id="simple-routing-policy" tabindex="-1">Simple Routing Policy <a class="header-anchor" href="#simple-routing-policy" aria-label="Permalink to &quot;Simple Routing Policy&quot;">​</a></h3><p>在<strong>AWS Route 53</strong>，我们使用**简单路由策略（Simple Routing Policy）**来为域名创建一个标准的DNS记录，而不用复杂的例如基于延迟或者权重的方法。一般我们使用简单路由策略将我们的流量指向单一的资源，例如一台Web服务器。</p><p>在简单路由策略配置里面，对于同一个DNS名我们只能创建一条目标，这个目标可能是一组IP地址，或者是一个Alias记录。</p><p>下面的操作是如何使用简单路由策略将我们的域名指向到一个S3托管的静态网站</p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/DNS20-1024x521.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns21-1024x359.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns22-1024x542.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns22-1024x542.png" alt=""></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns24-1024x417.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns25-1024x428.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns26-1024x437.png" alt="img"></p><h3 id="weighted-rouing-policy" tabindex="-1">Weighted Rouing Policy <a class="header-anchor" href="#weighted-rouing-policy" aria-label="Permalink to &quot;Weighted Rouing Policy&quot;">​</a></h3><p>使用AWS <strong>Route53</strong>的<strong>加权路由策略（Weighted Rouing Policy）</strong>，我们可以将多个资源关联到同一个域名（例如iteablue.com），并根据不同的权值比重将流量分发给不同的资源。</p><p>我们可以使用加权路由策略来做负载均衡，或者软件测试。</p><p>比如将5%的流量引导到测试应用上，观看测试应用的效果。</p><p>我们可以为每一个记录都分配一个权值，每一条记录分配到的总流量的比例是权值/所有记录的权值之合，公式如下：</p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/WRR_calculation.png" alt="img"></p><p>在DNS层面没有会话的保持功能，但是在客户端角度看，DNS结果是会缓存在本机的，也会缓存到离用户较近的DNS服务器上，因此客户在短时间内去访问这个域名，都会得到一样的结果。</p><p>下面讲解如何使用加权路由策略吧，我将会把根域名的50%流量指向S3静态托管网站，将另外50%流量指向EC2实例下的HTTP服务器。</p><h4 id="创建一个ec2-http-serve" tabindex="-1">创建一个EC2 HTTP Serve <a class="header-anchor" href="#创建一个ec2-http-serve" aria-label="Permalink to &quot;创建一个EC2 HTTP Serve&quot;">​</a></h4><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns30-1024x469.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns301-1024x427.png" alt="img"></p><h4 id="创建alb" tabindex="-1">创建ALB <a class="header-anchor" href="#创建alb" aria-label="Permalink to &quot;创建ALB&quot;">​</a></h4><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns32-1024x454.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns33-1024x222.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns34-1024x357.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns35-1024x382.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns36-1024x379.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns36-1024x379.png" alt=""></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns38-1024x468.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns39-1024x458.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns40-1024x416.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns41-1024x469.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns42.png" alt="img"></p><h4 id="编辑策略加权路由策略" tabindex="-1">编辑策略加权路由策略 <a class="header-anchor" href="#编辑策略加权路由策略" aria-label="Permalink to &quot;编辑策略加权路由策略&quot;">​</a></h4><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns43-1024x461.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns43-1024x461.png" alt=""></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns45-1024x453.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns46-1024x569.png" alt="img"></p><h3 id="latency-routing-policy" tabindex="-1">Latency Routing Policy <a class="header-anchor" href="#latency-routing-policy" aria-label="Permalink to &quot;Latency Routing Policy&quot;">​</a></h3><p>AWS Route53的**延迟路由策略（Latency Routing Policy）**可以让我们从延迟最低的AWS区域为用户处理请求，从而提高性能和速度。</p><p>要使用基于延迟的路由策略，我们需要在Route53中创建多条DNS记录（延迟路由策略类型），并且将它们指向不同区域内的目标。当用户去访问这个DNS记录的时候，会先对不同目标的延迟做比较，并且选择延迟最低的一个目标进行访问。</p><p>举个例子，如果我在东京区域和首尔区域都有ELB负载均衡器，我需要为2个ELB都创建延迟路由类型的DNS记录。</p><p>当一个用户访问这个域名的时候，Route53会查看到东京区域以及到首尔区域之间的延迟，并且使用延迟较低的一个，把其结果反馈给用户。</p><p>如果与首尔之间的延迟较低，那么用户最终会访问首尔的ELB负载均衡器</p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns50-1024x448.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns51-1024x484.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns52-1024x461.png" alt="img"></p><h3 id="failover-routing-policy" tabindex="-1">Failover Routing Policy <a class="header-anchor" href="#failover-routing-policy" aria-label="Permalink to &quot;Failover Routing Policy&quot;">​</a></h3><p>**故障转移路由策略（Failover Routing Policy）<strong>实际上是创建了DNS记录的</strong>主动/被动（Active/Passive）**故障转移。</p><p>在正常的情况下所有的流量应该解析到主的DNS记录上面。只有当这个主的DNS记录不健康的时候，Route53才会自动将所有流量解析到备用的DNS记录上面。</p><p>我们可以对域名开启健康检查（Health Check）功能，对域名（服务和端口）的健康状态进行监控，一旦健康状态出现问题，Route53就会自动进行切换</p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns600-1024x443.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns60-1024x474.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns61-1024x457.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns62-1024x447.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns63-1024x651.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns63-1024x651.png" alt=""></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns65-1024x512.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns66-1024x462.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns67-1024x462.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns67-1024x462.png" alt=""></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns69-1024x462.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns69-1024x462.png" alt=""></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns71-1024x514.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns72-1024x435.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns73-1024x446.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns74-1024x472.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns74-1024x472.png" alt=""></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns76-1024x430.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns77-1024x452.png" alt="img"></p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns78-1024x448.png" alt="img"></p><h3 id="geolocation-routing-policy" tabindex="-1">Geolocation Routing Policy <a class="header-anchor" href="#geolocation-routing-policy" aria-label="Permalink to &quot;Geolocation Routing Policy&quot;">​</a></h3><p>**地理位置路由策略（Geolocation Routing Policy）**可以根据用户所在的位置来返回不同的DNS结果。</p><p>比如可以让位于东京的用户访问东京的ELB负载均衡器，位于首尔的用户访问首尔的ELB负载均衡器，位于新加坡的用户也访问首尔的ELB负载均衡器等。</p><p>使用基于地理位置的路由策略，我们可以对内容进行本地化（提供当地的语言和特色）；也可以向某些地理位置提供内容服务，而向其他地理位置提供另外的内容服务，甚至不提供服务。</p><p>我们可以按大陆（七大洲））、国家/地区来指定地理位置，并且地理区域范围越精细则优先级越高。</p><p>Route53判定地理位置的依据是用户的源IP地址，有一些IP地址可能无法识别为具体的地理位置，因此我们最好设置一条默认的匹配规则。在这条默认的匹配规则里，没有被任何国家/地区所匹配的位置，还是可以访问到某个内容</p><p><img src="https://gitee.com/freehan/imgs/raw/master/imgs/dns80-1024x444.png" alt="img"></p><h3 id="multivalue-answer-routing-policy" tabindex="-1">Multivalue answer routing policy <a class="header-anchor" href="#multivalue-answer-routing-policy" aria-label="Permalink to &quot;Multivalue answer routing policy&quot;">​</a></h3><p>如果您想要让 Route 53 用随机选择的正常记录（最多八条）响应 DNS 查询，则可以使用该策略。可以作为简单的LoadBlanc</p><p>总结：</p><ul><li>弹性负载均衡器（ELB）没有固定的IPv4地址，在使用ELB的时候永远使用它的DNS名字。很多场景下我们需要绑定DNS记录到ELB的endpoint地址，而不绑定任何IP</li><li>需要熟记Alias记录和CNAME的区别，也可以参考一下<a href="https://docs.aws.amazon.com/zh_cn/Route53/latest/DeveloperGuide/resource-record-sets-choosing-alias-non-alias.html" target="_blank" rel="noreferrer">在别名和非别名记录之间做出选择</a></li></ul><p>在<strong>AWS Route53</strong>中有多种不同的<strong>路由策略（Routing Policy）</strong>，我们可以根据自己的不同需求将我们的DNS解析到不同的目标上去。</p><ul><li>简单路由策略（Simple Routing Policy）：提供单一资源的策略类型，即一个DNS域名指向一个单一目标</li><li>加权路由策略（Weighted Rouing Policy）：按照不同的权值比例将流量分配到不同的目标上去</li><li>延迟路由策略（Latency Routing Policy）：根据网络延迟的不同，将与用户延迟最小的结果应答给最终用户</li><li>地理位置路由策略（Geolocation Routing Policy）：根据用户所在的地理位置，将不同的目标结果应答给用户</li><li>故障转移路由策略（Failover Routing Policy）：配置主动/被动（Active/Passive）的故障转移策略，保证DNS解析的容灾</li></ul>',108),r=[g];function m(n,o,p,l,c,h){return t(),i("div",null,r)}const f=e(s,[["render",m]]);export{u as __pageData,f as default};
