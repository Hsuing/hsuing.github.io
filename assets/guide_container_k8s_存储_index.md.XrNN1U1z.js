import{_ as a,o as e,c as t,R as r}from"./chunks/framework.zUbWieqp.js";const m=JSON.parse('{"title":"1.HostPath","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/存储/index.md","filePath":"guide/container/k8s/存储/index.md","lastUpdated":1703083183000}'),i={name:"guide/container/k8s/存储/index.md"},o=r('<p>除了基本的 HostPath 和 EmptyDir提供的数据持久化方案之外，还提供了 PV，PVC 和 StorageClass 资源对象来对存储进行管理</p><ul><li>功能、逻辑是什么</li><li>实现的方式、步骤是什么</li><li>配置方法是什么</li><li>访问模式以及回收策略</li></ul><h1 id="_1-hostpath" tabindex="-1">1.HostPath <a class="header-anchor" href="#_1-hostpath" aria-label="Permalink to &quot;1.HostPath&quot;">​</a></h1><h1 id="_2-emptydir" tabindex="-1">2.EmptyDir <a class="header-anchor" href="#_2-emptydir" aria-label="Permalink to &quot;2.EmptyDir&quot;">​</a></h1><h1 id="_3-pv" tabindex="-1">3.PV <a class="header-anchor" href="#_3-pv" aria-label="Permalink to &quot;3.PV&quot;">​</a></h1><h1 id="_4-pvc" tabindex="-1">4.PVC <a class="header-anchor" href="#_4-pvc" aria-label="Permalink to &quot;4.PVC&quot;">​</a></h1><h1 id="_5-storageclass" tabindex="-1">5.StorageClass <a class="header-anchor" href="#_5-storageclass" aria-label="Permalink to &quot;5.StorageClass&quot;">​</a></h1><h1 id="_6-存储软件" tabindex="-1">6.存储软件 <a class="header-anchor" href="#_6-存储软件" aria-label="Permalink to &quot;6.存储软件&quot;">​</a></h1><h2 id="ceph" tabindex="-1">Ceph <a class="header-anchor" href="#ceph" aria-label="Permalink to &quot;Ceph&quot;">​</a></h2><h2 id="glusterfs" tabindex="-1">GlusterFS <a class="header-anchor" href="#glusterfs" aria-label="Permalink to &quot;GlusterFS&quot;">​</a></h2><h2 id="nfs" tabindex="-1">NFS <a class="header-anchor" href="#nfs" aria-label="Permalink to &quot;NFS&quot;">​</a></h2>',11),s=[o];function l(h,n,d,c,_,u){return e(),t("div",null,s)}const P=a(i,[["render",l]]);export{m as __pageData,P as default};
