import{_ as s,o as e,c as a,R as n}from"./chunks/framework.zUbWieqp.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Database/pgSql/7.pg_rewind.md","filePath":"guide/Database/pgSql/7.pg_rewind.md","lastUpdated":1703063387000}'),p={name:"guide/Database/pgSql/7.pg_rewind.md"},l=n(`<p>pg_rewind requires that the target server either has the wal_log_hints option enabled in postgresql.conf or data checksums enabled when the cluster was initialized with initdb. Neither of these are currently on by default. full_page_writes must also be set to on, but is enabled by default.</p><p>wal_log_hints</p><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><p>在数据库主从结构中，从变成主易。但是由主变为从却需要一番周折。 如果是数据量少时重新使用pg_backup拉一份从即可，但是如果数据量大时，这个过程非常的耗时耗能。对线上业务也会有影响。 在实际的场景中主从之间的数据绝大部分时一致的，只有非常少量的近期产生的数据是不一致的。 有没有什么方式可以利用已有的数据，充分利用已有的数据呢？ pg_rewind登场 告别一下回到解放前。</p><h2 id="基本原理" tabindex="-1">基本原理 <a class="header-anchor" href="#基本原理" aria-label="Permalink to &quot;基本原理&quot;">​</a></h2><p>数据库每次的主从切换时，timeLine会增加1。 新老数据库在不同的时间线上运行。 使用pg_rewind 将数据拉回到时间线(timeLine)产生分裂的那个点上。重新选择时间线，重放新时间线上的wal日志，使两个数据库重新回到一个时间线，并且数据一致。</p><h2 id="开始实验" tabindex="-1">开始实验 <a class="header-anchor" href="#开始实验" aria-label="Permalink to &quot;开始实验&quot;">​</a></h2><p>背景:</p><p>主从数据库结构</p><p>10.1.88.71 主库 10.1.88.72 从库</p><p>目标</p><p>数据库主从兑换， 主降为从时使用pg_rewind校对时间线</p><h2 id="实际操作" tabindex="-1">实际操作 <a class="header-anchor" href="#实际操作" aria-label="Permalink to &quot;实际操作&quot;">​</a></h2><p>注意事项 :</p><ul><li>必须开启full_page_writes 默认开启</li><li>必须开启wal_log_hints 修改后需要重启 或者data block checksum 数据库初始化时设置</li></ul><p>1 将10.1.88.72从库变成主库</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#从变主</span></span>
<span class="line"><span style="color:#e1e4e8;">touch /home/postgres.trigger</span></span>
<span class="line"><span style="color:#e1e4e8;">#查看日志</span></span>
<span class="line"><span style="color:#e1e4e8;">2019-03-15 14:15:02.608 CST [7831] LOG:  trigger file found: /home/postgres.trigger</span></span>
<span class="line"><span style="color:#e1e4e8;">2019-03-15 14:15:02.608 CST [7831] LOG:  redo done at 0/2000130</span></span>
<span class="line"><span style="color:#e1e4e8;">2019-03-15 14:15:02.608 CST [7831] LOG:  selected new timeline ID: 2</span></span>
<span class="line"><span style="color:#e1e4e8;">2019-03-15 14:15:02.608 CST [7828] LOG:  database system is ready to accept read only connections</span></span>
<span class="line"><span style="color:#e1e4e8;">2019-03-15 14:15:02.686 CST [7831] LOG:  archive recovery complete</span></span>
<span class="line"><span style="color:#e1e4e8;">2019-03-15 14:15:02.703 CST [7828] LOG:  database system is ready to accept connections</span></span>
<span class="line"><span style="color:#e1e4e8;">#此时两个数据库都可写</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#从变主</span></span>
<span class="line"><span style="color:#24292e;">touch /home/postgres.trigger</span></span>
<span class="line"><span style="color:#24292e;">#查看日志</span></span>
<span class="line"><span style="color:#24292e;">2019-03-15 14:15:02.608 CST [7831] LOG:  trigger file found: /home/postgres.trigger</span></span>
<span class="line"><span style="color:#24292e;">2019-03-15 14:15:02.608 CST [7831] LOG:  redo done at 0/2000130</span></span>
<span class="line"><span style="color:#24292e;">2019-03-15 14:15:02.608 CST [7831] LOG:  selected new timeline ID: 2</span></span>
<span class="line"><span style="color:#24292e;">2019-03-15 14:15:02.608 CST [7828] LOG:  database system is ready to accept read only connections</span></span>
<span class="line"><span style="color:#24292e;">2019-03-15 14:15:02.686 CST [7831] LOG:  archive recovery complete</span></span>
<span class="line"><span style="color:#24292e;">2019-03-15 14:15:02.703 CST [7828] LOG:  database system is ready to accept connections</span></span>
<span class="line"><span style="color:#24292e;">#此时两个数据库都可写</span></span></code></pre></div><p>2 模拟向两个数据库中写数据</p><p>3 将数据库原主库（10.1.88.71）变为从库</p><h5 id="一下步骤必须按照顺序执行-并且中间不要操作失误" tabindex="-1">一下步骤必须按照顺序执行，并且中间不要操作失误！！！ <a class="header-anchor" href="#一下步骤必须按照顺序执行-并且中间不要操作失误" aria-label="Permalink to &quot;一下步骤必须按照顺序执行，并且中间不要操作失误！！！&quot;">​</a></h5><p>a 停库</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">  systemctl stop postgresql-10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">  systemctl stop postgresql-10</span></span></code></pre></div><p>b 切换到postgres用户 进行时间线对齐</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 切用户</span></span>
<span class="line"><span style="color:#e1e4e8;">sudo su - postgres </span></span>
<span class="line"><span style="color:#e1e4e8;"># 测试 -n</span></span>
<span class="line"><span style="color:#e1e4e8;">/usr/pgsql-10/bin/pg_rewind -n -D /var/lib/pgsql/10/data/ --source-server=&quot;hostaddr=10.1.88.72 user=postgres port=5432&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"># 正式执行</span></span>
<span class="line"><span style="color:#e1e4e8;">/usr/pgsql-10/bin/pg_rewind -D /var/lib/pgsql/10/data/ --source-server=&quot;hostaddr=10.1.88.72 user=postgres port=5432&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 切用户</span></span>
<span class="line"><span style="color:#24292e;">sudo su - postgres </span></span>
<span class="line"><span style="color:#24292e;"># 测试 -n</span></span>
<span class="line"><span style="color:#24292e;">/usr/pgsql-10/bin/pg_rewind -n -D /var/lib/pgsql/10/data/ --source-server=&quot;hostaddr=10.1.88.72 user=postgres port=5432&quot;</span></span>
<span class="line"><span style="color:#24292e;"># 正式执行</span></span>
<span class="line"><span style="color:#24292e;">/usr/pgsql-10/bin/pg_rewind -D /var/lib/pgsql/10/data/ --source-server=&quot;hostaddr=10.1.88.72 user=postgres port=5432&quot;</span></span></code></pre></div><p>c 修改 recovery.conf</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">mv recovery.done recovery.conf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">mv recovery.done recovery.conf</span></span></code></pre></div><p>vi recovery.conf</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">recovery_target_timeline=&#39;latest&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">standby_mode = &#39;on&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">primary_conninfo = &#39;user=postgres passfile=&#39;&#39;/root/.pgpass&#39;&#39; host=10.1.88.72 port=5432 sslmode=prefer sslcompression=1 krbsrvname=postgres target_session_attrs=any&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">recovery_target_timeline=&#39;latest&#39;</span></span>
<span class="line"><span style="color:#24292e;">standby_mode = &#39;on&#39;</span></span>
<span class="line"><span style="color:#24292e;">primary_conninfo = &#39;user=postgres passfile=&#39;&#39;/root/.pgpass&#39;&#39; host=10.1.88.72 port=5432 sslmode=prefer sslcompression=1 krbsrvname=postgres target_session_attrs=any&#39;</span></span></code></pre></div><p>注意事项: host 指向新主库地址</p><p>以上过程中保持数据库是关闭状态!!!!</p><p>4 启动数据库，并验证</p><h2 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-label="Permalink to &quot;扩展&quot;">​</a></h2><p>查看数据库timeline 等信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 在数据所在位置执行</span></span>
<span class="line"><span style="color:#e1e4e8;">/usr/pgsql-10/bin/pg_controldata .</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 在数据所在位置执行</span></span>
<span class="line"><span style="color:#24292e;">/usr/pgsql-10/bin/pg_controldata .</span></span></code></pre></div><p><a href="https://github.com/digoal/blog/blob/master/201901/20190128_02.md" target="_blank" rel="noreferrer">https://github.com/digoal/blog/blob/master/201901/20190128_02.md</a></p>`,35),o=[l];function t(r,c,i,d,g,h){return e(),a("div",null,o)}const b=s(p,[["render",t]]);export{y as __pageData,b as default};
