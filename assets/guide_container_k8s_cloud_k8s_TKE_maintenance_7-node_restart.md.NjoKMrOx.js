import{_ as s,o as n,c as a,R as o}from"./chunks/framework.zUbWieqp.js";const u=JSON.parse('{"title":"1.节点驱逐pod","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/cloud_k8s/TKE/maintenance/7-node_restart.md","filePath":"guide/container/k8s/cloud_k8s/TKE/maintenance/7-node_restart.md","lastUpdated":1745762072000}'),l={name:"guide/container/k8s/cloud_k8s/TKE/maintenance/7-node_restart.md"},p=o(`<p><strong>一个项目用的 k8s 集群发现了个 bug ，处理完成后需要重启节点才能彻底修复。为了避免业务受到影响，在操作节点重启前我们需要将当前节点上运行的所有业务 pod 都驱逐到其他节点上以继续提供服务</strong></p><h1 id="_1-节点驱逐pod" tabindex="-1">1.节点驱逐pod <a class="header-anchor" href="#_1-节点驱逐pod" aria-label="Permalink to &quot;1.节点驱逐pod&quot;">​</a></h1><p>将 pod 驱逐到其他节点。一般情况下要将某节点上 pod 都驱逐出去我们可以直接使用 kubectl drain 命令来实现，如下所示：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 获取集群中节点列表</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@im </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# kubectl get nodes</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">ROLES</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">AGE</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">VERSION</span></span>
<span class="line"><span style="color:#B392F0;">192.168.2.41</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Ready</span><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">non</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">543</span><span style="color:#9ECBFF;">d</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">v1.22.5-tke.6</span></span>
<span class="line"><span style="color:#B392F0;">192.168.2.15</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Ready</span><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">non</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">436</span><span style="color:#9ECBFF;">d</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">v1.22.5-tke.12</span></span>
<span class="line"><span style="color:#B392F0;">192.168.2.8</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">Ready</span><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">non</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">540</span><span style="color:#9ECBFF;">d</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">v1.22.5-tke.6</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">#使用 kubectl drain 命令来驱逐指定节点上 pod</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@im </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# kubectl drain --ignore-daemonsets 192.168.2.41</span></span>
<span class="line"><span style="color:#B392F0;">node/192.168.2.41</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cordoned</span></span>
<span class="line"><span style="color:#B392F0;">WARNING:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ignoring</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">DaemonSet-managed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Pods:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kube-monitor/node-exporter-knxrq,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kube-system/csi-nodeplugin-cfsplugin-xz66b</span></span>
<span class="line"><span style="color:#B392F0;">evicting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">uat/zcy-test-0418-6688fbff7b-kmrj4</span></span>
<span class="line"><span style="color:#B392F0;">pod/zcy-test-0418-6688fbff7b-kmrj4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">evicted</span></span>
<span class="line"><span style="color:#B392F0;">node/192.168.2.41</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">evicted</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 获取集群中节点列表</span></span>
<span class="line"><span style="color:#24292E;">[root@im </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# kubectl get nodes</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">           </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">   </span><span style="color:#032F62;">ROLES</span><span style="color:#24292E;">    </span><span style="color:#032F62;">AGE</span><span style="color:#24292E;">    </span><span style="color:#032F62;">VERSION</span></span>
<span class="line"><span style="color:#6F42C1;">192.168.2.41</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Ready</span><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">non</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">543</span><span style="color:#032F62;">d</span><span style="color:#24292E;">   </span><span style="color:#032F62;">v1.22.5-tke.6</span></span>
<span class="line"><span style="color:#6F42C1;">192.168.2.15</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Ready</span><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">non</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">436</span><span style="color:#032F62;">d</span><span style="color:#24292E;">   </span><span style="color:#032F62;">v1.22.5-tke.12</span></span>
<span class="line"><span style="color:#6F42C1;">192.168.2.8</span><span style="color:#24292E;">    </span><span style="color:#032F62;">Ready</span><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">non</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">540</span><span style="color:#032F62;">d</span><span style="color:#24292E;">   </span><span style="color:#032F62;">v1.22.5-tke.6</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">#使用 kubectl drain 命令来驱逐指定节点上 pod</span></span>
<span class="line"><span style="color:#24292E;">[root@im </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# kubectl drain --ignore-daemonsets 192.168.2.41</span></span>
<span class="line"><span style="color:#6F42C1;">node/192.168.2.41</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cordoned</span></span>
<span class="line"><span style="color:#6F42C1;">WARNING:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ignoring</span><span style="color:#24292E;"> </span><span style="color:#032F62;">DaemonSet-managed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Pods:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kube-monitor/node-exporter-knxrq,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kube-system/csi-nodeplugin-cfsplugin-xz66b</span></span>
<span class="line"><span style="color:#6F42C1;">evicting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">uat/zcy-test-0418-6688fbff7b-kmrj4</span></span>
<span class="line"><span style="color:#6F42C1;">pod/zcy-test-0418-6688fbff7b-kmrj4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">evicted</span></span>
<span class="line"><span style="color:#6F42C1;">node/192.168.2.41</span><span style="color:#24292E;"> </span><span style="color:#032F62;">evicted</span></span></code></pre></div><blockquote><p>drain 子命令的效果相当于：</p><ol><li><p>给指定节点添加 node.kubernetes.io/unschedulable:NoSchedule 污点。</p></li><li><p>将节点状态标记为不可调度。</p></li><li><p>给指定节点上所有运行中的 Pod 发送 SIGTERM 信号以优雅终止 pod。</p></li></ol></blockquote><h1 id="_2-节点重新调度" tabindex="-1">2.节点重新调度 <a class="header-anchor" href="#_2-节点重新调度" aria-label="Permalink to &quot;2.节点重新调度&quot;">​</a></h1><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 重新维护好节点后，需要使用 kubectl uncordon，这将使节点重新变为可调度。</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@im </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# kubectl uncordon 192.168.2.41</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 重新维护好节点后，需要使用 kubectl uncordon，这将使节点重新变为可调度。</span></span>
<span class="line"><span style="color:#24292E;">[root@im </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# kubectl uncordon 192.168.2.41</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">💡 说明</p><p><strong>1 给节点新增一个不能被现有 pod 容忍的污点，并将 effect 字段值设置为 NoSchedule（新的 Pod 不会被调度到此节点上，当前正在节点上运行的 Pod 不会被驱逐）。</strong></p><p><strong>2 手动将当前节点上运行的 pod delete 掉，由于设置了污点所以 delete 掉的 pod 不会被重新调度到当前节点。</strong></p><p><strong>3 指定 pod 被 delete 掉后，可以观察下是否在其他节点重新调度并正常运行，新 pod 调度到其他节点后资源负载情况是否在正常使用阈值内， 如果一切正常，再继续 delete 下一个 pod 一直到全部完成。</strong></p><p><strong>4 确认没有业务 pod 在节点上运行了，再重启节点进行维护。</strong></p><p><strong>5 重启完成确认问题修复后，删除节点上之前定义好的污点。</strong></p></div><p>使用 drain 命令等清空节点时需要特别注意</p><div class="danger custom-block"><p class="custom-block-title">❌ 注意</p><ol><li><p>如果存在新的、能够容忍 node.kubernetes.io/unschedulable 等污点的 Pod， 那么这些 Pod 可能会被调度到你已经清空的节点上。所以除了 DaemonSet 之外，请避免容忍此污点（避免容忍所有污点）。 如果你或另一个 API 用户（绕过调度器）直接为 Pod 设置了 nodeName 字段， 则即使你已将该节点清空并标记为不可调度，Pod 仍将被绑定到这个指定的节点并在该节点上运行。</p></li><li><p>如果节点上存在不受控制器管理的 pod（replication controller, replica set, daemon set, stateful set, 或 job），则必须添加使用 --force 选项，否则 drain 不会删除任何Pod。</p></li><li><p>由于执行 drain 命令会将节点所有 pod 驱逐到其他节点上运行，所以如果节点本身承载大量的 pod ，需要注意评估该节点上所有 pod 被重新调度到其他节点上运行时是否会对集群资源造成压力。</p></li><li><p>确保没有外部没有直接调用此节点的 IP 进行业务请求的（NodePort），否则会导致重启期间无法正常访问。</p></li></ol></div>`,10),e=[p];function t(c,r,y,E,d,i){return n(),a("div",null,e)}const g=s(l,[["render",t]]);export{u as __pageData,g as default};
