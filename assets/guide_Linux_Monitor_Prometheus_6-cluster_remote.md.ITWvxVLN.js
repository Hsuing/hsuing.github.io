import{_ as e,o as t,c as o,R as r}from"./chunks/framework.zUbWieqp.js";const p=JSON.parse('{"title":"1. Prometheus远程存储","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Linux/Monitor/Prometheus/6-cluster_remote.md","filePath":"guide/Linux/Monitor/Prometheus/6-cluster_remote.md","lastUpdated":1739960402000}'),a={name:"guide/Linux/Monitor/Prometheus/6-cluster_remote.md"},s=r('<h1 id="_1-prometheus远程存储" tabindex="-1">1. Prometheus远程存储 <a class="header-anchor" href="#_1-prometheus远程存储" aria-label="Permalink to &quot;1. Prometheus远程存储&quot;">​</a></h1><ul><li>Prometheus本地存储无法持久化数据，无法存储大量历史数据，同时也无法灵活扩展和迁移。prometheus通过定义两个标准接口(remote_write/remote_read)，让用户可以基于这两个接口对接将数据保存到任意第三方的存储服务中，这种方式在Promthues中称为Remote Storage。</li></ul><h2 id="_1-1-remote-write" tabindex="-1">1.1 Remote Write <a class="header-anchor" href="#_1-1-remote-write" aria-label="Permalink to &quot;1.1 Remote Write&quot;">​</a></h2><ol><li>在Prometheus配置文件中指定Remote Write(远程写)的URL地址，一旦设置了该配置项，Prometheus将采集到的样本数据通过HTTP的形式发送给适配器(Adaptor)。而用户则可以在适配器中对接外部任意的服务。外部服务可以是真正的存储系统，公有云的存储服务，也可以是消息队列等任意形式。</li></ol><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202502191722759.png" alt="image.png"></p><h2 id="_1-2-remote-read" tabindex="-1">1.2 Remote Read <a class="header-anchor" href="#_1-2-remote-read" aria-label="Permalink to &quot;1.2 Remote Read&quot;">​</a></h2><ol><li>Promthues的Remote Read(远程读)也通过了一个适配器实现。在远程读的流程当中，当用户发起查询请求后，Promthues将向remote_read中配置的URL发起查询请求(matchers,ranges)，Adaptor根据请求条件从第三方存储服务中获取响应的数据。同时将数据转换为Promthues的原始样本数据返回给Prometheus Server。</li><li>当获取到样本数据后，Promthues在本地使用PromQL对样本数据进行二次处理。</li></ol><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202502191722432.png" alt="image.png"></p>',8),i=[s];function m(n,h,u,l,_,c){return t(),o("div",null,i)}const P=e(a,[["render",m]]);export{p as __pageData,P as default};
