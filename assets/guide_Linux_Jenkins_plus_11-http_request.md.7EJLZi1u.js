import{_ as s,o as n,c as a,R as p}from"./chunks/framework.zUbWieqp.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Linux/Jenkins/plus/11-http_request.md","filePath":"guide/Linux/Jenkins/plus/11-http_request.md","lastUpdated":1720533756000}'),o={name:"guide/Linux/Jenkins/plus/11-http_request.md"},l=p(`<h3 id="编写-pipeline" tabindex="-1">编写 Pipeline <a class="header-anchor" href="#编写-pipeline" aria-label="Permalink to &quot;编写 Pipeline&quot;">​</a></h3><p>httpRequest命令的 <a href="https://www.jenkins.io/doc/pipeline/steps/http_request/" target="_blank" rel="noreferrer">官方文档</a></p><p>发送请求的语句使用 <code>httpRequest</code> ，基本的写法是：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">httpRequest </span><span style="color:#9ECBFF;">&quot;http://your.site&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">httpRequest </span><span style="color:#032F62;">&quot;http://your.site&quot;</span></span></code></pre></div><p>返回一个 response 对象，包含响应的状态码和主体：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> httpRequest </span><span style="color:#9ECBFF;">&quot;http://your.site&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Status: &#39;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">response</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">status)</span></span>
<span class="line"><span style="color:#79B8FF;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Response: &#39;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">response</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">content)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> httpRequest </span><span style="color:#032F62;">&quot;http://your.site&quot;</span></span>
<span class="line"><span style="color:#005CC5;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Status: &#39;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">response</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">status)</span></span>
<span class="line"><span style="color:#005CC5;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Response: &#39;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">response</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">content)</span></span></code></pre></div><p>默认参数是请求的URL，其他参数加在后方：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">httpRequest </span><span style="color:#79B8FF;">url</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;http://your.site&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">httpMode</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;GET&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">ignoreSslErrors</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">httpRequest </span><span style="color:#005CC5;">url</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;http://your.site&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">httpMode</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ignoreSslErrors</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span></code></pre></div><p>再有 Post 的例子（application/x-www-form-urlencoded 类型）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">def response = httpRequest \\</span></span>
<span class="line"><span style="color:#e1e4e8;">               contentType: &#39;APPLICATION_FORM&#39;,</span></span>
<span class="line"><span style="color:#e1e4e8;">               httpMode: &quot;POST&quot;,</span></span>
<span class="line"><span style="color:#e1e4e8;">               requestBody: &quot;a=1&amp;b=2&quot;,</span></span>
<span class="line"><span style="color:#e1e4e8;">               url: &quot;http://your.site&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">def response = httpRequest \\</span></span>
<span class="line"><span style="color:#24292e;">               contentType: &#39;APPLICATION_FORM&#39;,</span></span>
<span class="line"><span style="color:#24292e;">               httpMode: &quot;POST&quot;,</span></span>
<span class="line"><span style="color:#24292e;">               requestBody: &quot;a=1&amp;b=2&quot;,</span></span>
<span class="line"><span style="color:#24292e;">               url: &quot;http://your.site&quot;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">注意这里 httpRequest 后面用了 \\ 用来表示行间连续（continuation）</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">另一个Post 的例子（application/json）：</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">def requestBody = [&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;]</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">def response = httpRequest \\</span></span>
<span class="line"><span style="color:#e1e4e8;">               httpMode: &quot;POST&quot;,</span></span>
<span class="line"><span style="color:#e1e4e8;">               ignoreSslErrors: true,</span></span>
<span class="line"><span style="color:#e1e4e8;">               contentType: &#39;APPLICATION_JSON&#39;,</span></span>
<span class="line"><span style="color:#e1e4e8;">               requestBody: groovy.json.JsonOutput.toJson(requestBody),</span></span>
<span class="line"><span style="color:#e1e4e8;">               url: &quot;http://your.site&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">println response.content</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">注意这里 httpRequest 后面用了 \\ 用来表示行间连续（continuation）</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">另一个Post 的例子（application/json）：</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">def requestBody = [&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;]</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">def response = httpRequest \\</span></span>
<span class="line"><span style="color:#24292e;">               httpMode: &quot;POST&quot;,</span></span>
<span class="line"><span style="color:#24292e;">               ignoreSslErrors: true,</span></span>
<span class="line"><span style="color:#24292e;">               contentType: &#39;APPLICATION_JSON&#39;,</span></span>
<span class="line"><span style="color:#24292e;">               requestBody: groovy.json.JsonOutput.toJson(requestBody),</span></span>
<span class="line"><span style="color:#24292e;">               url: &quot;http://your.site&quot;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">println response.content</span></span></code></pre></div><p>通过 <code>HttpRequest</code> 拿到响应后，如果响应是 Json 格式的，我们还可以进一步解析 Json 响应，并提取其中的部分内容。解析 Json使用内置函数 <code>readJSON</code> ，基本用法为：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">readJSON </span><span style="color:#79B8FF;">text</span><span style="color:#E1E4E8;">: response</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">content</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">readJSON </span><span style="color:#005CC5;">text</span><span style="color:#24292E;">: response</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">content</span></span></code></pre></div><p>注意这里和上节的 <code>HttpRequest</code> 一样，都需要有命名参数（named argument），即 <code>text:</code> 不可省略。</p><p>假设我们收到下面这样的响应：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;code&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;message&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;OK&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;data&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;apple&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;banana&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;cherry&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;code&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;message&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;OK&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;data&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;apple&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;banana&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;cherry&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>就可以用下面的语句解析：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> readJSON </span><span style="color:#79B8FF;">text</span><span style="color:#E1E4E8;">: response</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">content</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props[</span><span style="color:#9ECBFF;">&#39;code&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props[</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> data0 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props[</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> data1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props[</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> props </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> readJSON </span><span style="color:#005CC5;">text</span><span style="color:#24292E;">: response</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">content</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props[</span><span style="color:#032F62;">&#39;code&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props[</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> data0 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props[</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> data1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props[</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span></code></pre></div><h2 id="在-http-响应中搜索" tabindex="-1">在 HTTP 响应中搜索 <a class="header-anchor" href="#在-http-响应中搜索" aria-label="Permalink to &quot;在 HTTP 响应中搜索&quot;">​</a></h2><p>如果响应中有列表，我们希望从列表中找出第一个满足需要的项，除了普通的遍历方法外，还可以用find方法， 中的响应结果中找到 字母 b 开头的项，可以用下面的方法：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> readJSON </span><span style="color:#79B8FF;">text</span><span style="color:#E1E4E8;">: response</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">content</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props[</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">find{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(it</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">startsWith(</span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">)){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> props </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> readJSON </span><span style="color:#005CC5;">text</span><span style="color:#24292E;">: response</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">content</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props[</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">data</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">find{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(it</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">startsWith(</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="完整的例子" tabindex="-1">完整的例子 <a class="header-anchor" href="#完整的例子" aria-label="Permalink to &quot;完整的例子&quot;">​</a></h2><p>一个完整的 请求httprequest + 解析Json结果的 pipeline 的例子如下：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pipeline{</span></span>
<span class="line"><span style="color:#E1E4E8;">  agent {label </span><span style="color:#9ECBFF;">&#39;slave&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  stages{</span></span>
<span class="line"><span style="color:#E1E4E8;">    stage(</span><span style="color:#9ECBFF;">&#39;Example&#39;</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">      steps{</span></span>
<span class="line"><span style="color:#E1E4E8;">        script{</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [k1](</span><span style="color:#9ECBFF;">&quot;v1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;k2&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;v2&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> httpRequest \\</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#79B8FF;">httpMode</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;"> ,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#79B8FF;">ignoreSslErrors</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#79B8FF;">contentType</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;APPLICATION_JSON&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#79B8FF;">requestBody</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">groovy.json.JsonOutput.</span><span style="color:#E1E4E8;">toJson(body),</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#79B8FF;">url</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;http://your.site&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> readJSON </span><span style="color:#79B8FF;">text</span><span style="color:#E1E4E8;">: response</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">content</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props[</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">          data</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">find{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(it</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">startsWith(</span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">)){</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pipeline{</span></span>
<span class="line"><span style="color:#24292E;">  agent {label </span><span style="color:#032F62;">&#39;slave&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  stages{</span></span>
<span class="line"><span style="color:#24292E;">    stage(</span><span style="color:#032F62;">&#39;Example&#39;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      steps{</span></span>
<span class="line"><span style="color:#24292E;">        script{</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [k1](</span><span style="color:#032F62;">&quot;v1&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;k2&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;v2&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> httpRequest \\</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#005CC5;">httpMode</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;POST&#39;</span><span style="color:#24292E;"> ,</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#005CC5;">ignoreSslErrors</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#005CC5;">contentType</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;APPLICATION_JSON&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#005CC5;">requestBody</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">groovy.json.JsonOutput.</span><span style="color:#24292E;">toJson(body),</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#005CC5;">url</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;http://your.site&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> props </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> readJSON </span><span style="color:#005CC5;">text</span><span style="color:#24292E;">: response</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">content</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props[</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">          data</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">find{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(it</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">startsWith(</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="http-request-插件的其他参数" tabindex="-1">HTTP Request 插件的其他参数 <a class="header-anchor" href="#http-request-插件的其他参数" aria-label="Permalink to &quot;HTTP Request 插件的其他参数&quot;">​</a></h2><p>HTTP Request 插件 的 <a href="https://www.jenkins.io/doc/pipeline/steps/http_request/" target="_blank" rel="noreferrer">介绍页面</a> 列有详细的参数列表，下面简单介绍部分参数的用法：</p><ul><li><code>consoleLogResponseBody</code> , 在 Jenkins 控制台打印出响应的body,取值：true/false，等效于：</li></ul><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">println</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Response: </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">response</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">content</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">println</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Response: </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">response</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">content</span></span></code></pre></div><ul><li><code>customHeaders</code> ， 请求的自定义header ，用 Groovy 的数组表示</li></ul><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">customHeaders</span><span style="color:#E1E4E8;">: [ [</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;k1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;v1&quot;</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;k2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;v2&quot;</span><span style="color:#E1E4E8;">] ],</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">customHeaders</span><span style="color:#24292E;">: [ [</span><span style="color:#005CC5;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;k1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">value</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;v1&quot;</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;k2&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">value</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;v2&quot;</span><span style="color:#24292E;">] ],</span></span></code></pre></div><ul><li><code>outputFile</code> ，将响应的body写入文件，后面的参数是文件的路径，可以是绝对路径或者相对路径。如果写相对路径（或者单独一个文件名），那么起始点是此次构建的workspace目录。</li></ul><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">outputFile</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;output.txt&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">outputFile</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;output.txt&quot;</span></span></code></pre></div><ul><li><code>quiet</code>，不向控制台打印任何内容。默认情况下，控制台上会出现以下内容：</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">HttpMethod</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">POST</span></span>
<span class="line"><span style="color:#85E89D;">URL</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">https://XXXX</span></span>
<span class="line"><span style="color:#85E89D;">Content-Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">application/json</span></span>
<span class="line"><span style="color:#85E89D;">Sending request to url</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">https://XXXX</span></span>
<span class="line"><span style="color:#85E89D;">Response Code</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">HTTP/1.1 302 Found</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">HttpMethod</span><span style="color:#24292E;">: </span><span style="color:#032F62;">POST</span></span>
<span class="line"><span style="color:#22863A;">URL</span><span style="color:#24292E;">: </span><span style="color:#032F62;">https://XXXX</span></span>
<span class="line"><span style="color:#22863A;">Content-Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">application/json</span></span>
<span class="line"><span style="color:#22863A;">Sending request to url</span><span style="color:#24292E;">: </span><span style="color:#032F62;">https://XXXX</span></span>
<span class="line"><span style="color:#22863A;">Response Code</span><span style="color:#24292E;">: </span><span style="color:#032F62;">HTTP/1.1 302 Found</span></span></code></pre></div><p>当 <code>quiet</code> 设置为 <code>true</code> 后，以上这些内容都不出现在控制台上，这个选项优先于上面的 <code>consoleLogResponseBody</code></p><ul><li><code>validResponseCodes</code> ，是否检验返回状态码，如果不在此范围内，则请求失败。采取类似下面的格式：</li></ul><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">validResponseCodes</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;200:210,300:302,400:403&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">validResponseCodes</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;200:210,300:302,400:403&quot;</span></span></code></pre></div><p>这里冒号表示范围，多个范围之间用逗号隔开</p>`,38),e=[l];function t(c,r,y,E,i,d){return n(),a("div",null,e)}const h=s(o,[["render",t]]);export{F as __pageData,h as default};
