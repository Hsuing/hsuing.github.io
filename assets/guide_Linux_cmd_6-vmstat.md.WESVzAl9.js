import{_ as s,o as a,c as p,R as o}from"./chunks/framework.zUbWieqp.js";const C=JSON.parse('{"title":"1. vmstat介绍","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Linux/cmd/6-vmstat.md","filePath":"guide/Linux/cmd/6-vmstat.md","lastUpdated":1742986606000}'),n={name:"guide/Linux/cmd/6-vmstat.md"},l=o(`<h1 id="_1-vmstat介绍" tabindex="-1">1. vmstat介绍 <a class="header-anchor" href="#_1-vmstat介绍" aria-label="Permalink to &quot;1. vmstat介绍&quot;">​</a></h1><p><code>vmstat</code>是一个常用的系统性能监控工具，可以查看虚拟内存统计信息、进程、CPU活动等。通过该工具，我们可以了解系统的整体运行情况，包括CPU的使用率、内存的使用情况以及磁盘I/O等。</p><h2 id="_1-1-vmstat帮助" tabindex="-1">1.1 vmstat帮助 <a class="header-anchor" href="#_1-1-vmstat帮助" aria-label="Permalink to &quot;1.1 vmstat帮助&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">vmstat</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--help</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">vmstat</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--help</span></span></code></pre></div><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>显示活跃和非活跃内存</td></tr><tr><td>-f</td><td>显示从系统启动至今的fork数量</td></tr><tr><td>-m</td><td>显示slabinfo</td></tr><tr><td><strong>-s</strong></td><td><strong>显示内存相关统计信息及多种系统活动数量</strong></td></tr><tr><td>-d</td><td>显示磁盘相关的统计信息</td></tr><tr><td>-S</td><td>使用指定单位显示。参数有 k 、K 、m 、M ，分别代表1000、1024、1000000、1048576字节(Byte)，默认单位为K(1024 Bytes)</td></tr><tr><td>delay</td><td>刷新时间间隔，如果不指定，只显示一条结果</td></tr><tr><td>count</td><td>刷新次数，如果不指定刷新次数，但指定了刷新时间间隔，这时刷新次数为无穷</td></tr></tbody></table><h2 id="_1-2-参数介绍" tabindex="-1">1.2 参数介绍 <a class="header-anchor" href="#_1-2-参数介绍" aria-label="Permalink to &quot;1.2 参数介绍&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@ansible </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# vmstat  2 1 </span><span style="color:#6A737D;">#2表示每隔两秒采集一次服务器状态，1表示只采集一次，如果不写1，一直采集</span></span>
<span class="line"><span style="color:#B392F0;">procs</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-----------memory----------</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">---swap--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-----io----</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-system--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">------cpu-----</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">b</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">swpd</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">free</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">buff</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">cache</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">si</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">so</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">bi</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">bo</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">cs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">us</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sy</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">wa</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">st</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">980648</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">2112</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">847376</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">146</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">71</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">172</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@ansible </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# vmstat  2 1 </span><span style="color:#6A737D;">#2表示每隔两秒采集一次服务器状态，1表示只采集一次，如果不写1，一直采集</span></span>
<span class="line"><span style="color:#6F42C1;">procs</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-----------memory----------</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">---swap--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-----io----</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-system--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">------cpu-----</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">r</span><span style="color:#24292E;">  </span><span style="color:#032F62;">b</span><span style="color:#24292E;">   </span><span style="color:#032F62;">swpd</span><span style="color:#24292E;">   </span><span style="color:#032F62;">free</span><span style="color:#24292E;">   </span><span style="color:#032F62;">buff</span><span style="color:#24292E;">  </span><span style="color:#032F62;">cache</span><span style="color:#24292E;">   </span><span style="color:#032F62;">si</span><span style="color:#24292E;">   </span><span style="color:#032F62;">so</span><span style="color:#24292E;">    </span><span style="color:#032F62;">bi</span><span style="color:#24292E;">    </span><span style="color:#032F62;">bo</span><span style="color:#24292E;">   </span><span style="color:#032F62;">in</span><span style="color:#24292E;">   </span><span style="color:#032F62;">cs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">us</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id</span><span style="color:#24292E;"> </span><span style="color:#032F62;">wa</span><span style="color:#24292E;"> </span><span style="color:#032F62;">st</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">980648</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">2112</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">847376</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">146</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">14</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">71</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">172</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">99</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0</span></span></code></pre></div><h3 id="procs" tabindex="-1">procs <a class="header-anchor" href="#procs" aria-label="Permalink to &quot;procs&quot;">​</a></h3><p>r：表示运行队列(就是说多少个进程真的分配到CPU)，当这个值超过了CPU数目，就会出现CPU瓶颈了。这个也和top的负载有关系，一般负载超过了3就比较高，超过了5就高，超过了10就不正常了，服务器的状态很危险。top的负载类似每秒的运行队列。如果运行队列过大，表示你的CPU很繁忙，一般会造成CPU使用率很高。</p><p>b：被blocked(阻塞)的进程数，正在等待IO</p><h3 id="memory" tabindex="-1">memory <a class="header-anchor" href="#memory" aria-label="Permalink to &quot;memory&quot;">​</a></h3><p>swpd：使用的虚拟内存的大小，单位是KB，如果大于0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，那么你该升级内存了或者把耗内存的任务迁移到其他机器。</p><p>free # 空闲的物理内存的大小</p><p>buff #Linux/Unix系统是用来存储，目录里面有什么内容，权限等的缓存</p><p>cache #cache直接用来记忆我们打开的文件,给文件做缓冲，把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer/cached会很快地被使用。</p><h3 id="swap" tabindex="-1">swap <a class="header-anchor" href="#swap" aria-label="Permalink to &quot;swap&quot;">​</a></h3><p>si(换入)：每秒从SWAP(交换分区)读入到RAM（swap in）的大小，单位是KB</p><p>so(换出)：每秒从RAM写出到SWAP（swap out）的大小，单位是KB</p><p>内存够用的时候，这2个值都是0，如果这2个值长期大于0时，系统性能会受到影响。有些朋友看到空闲内存(free)很少时，就认为内存不够用了，不能光看这一点，还要结合si和so，如果free很少，但是si和so也很少(大多时候是0)，那么不用担心，系统性能这时不会受到影响。</p><h3 id="io" tabindex="-1">io <a class="header-anchor" href="#io" aria-label="Permalink to &quot;io&quot;">​</a></h3><p>bi：每秒从文件系统或SWAP读入到RAM（blocks in）的块数，block(1KB磁盘块)为单位</p><p>bo：每秒从RAM写出到文件系统或SWAP（blocks out）的块数，block(1KB磁盘块)为单位</p><h3 id="system" tabindex="-1">system <a class="header-anchor" href="#system" aria-label="Permalink to &quot;system&quot;">​</a></h3><p>in：每秒的中断数</p><p>cs：每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目</p><h3 id="cpu" tabindex="-1">cpu <a class="header-anchor" href="#cpu" aria-label="Permalink to &quot;cpu&quot;">​</a></h3><p>us：用户空间占用CPU的百分比，us的值比较高时，说明用户进程消耗的CPU时间比较多，但是如果长期超过50%，那么我们就该考虑优化程序算法或者进行加速。</p><p>sy：内核空间占用CPU的百分比，sy的值高时，说明系统内核消耗的CPU资源多，这并不是良性表现，我们应该检查原因。</p><p>id：CPU空闲的百分比，空闲 CPU时间，一般来说，id + us + sy = 100,一般我认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率</p><p>wa：CPU等待IO的百分比，wa的值高时，说明CPU等待IO的时间比较多，这可能是大量的磁盘随机访问造成的，也有可能是磁盘出现瓶颈</p><p>st：来自于虚拟机偷取的CPU所占的百分比</p><div class="danger custom-block"><p class="custom-block-title">❌ 注意</p><p>procs r: 运行的进程比较多，系统很繁忙</p><p>bi/bo: 磁盘写的数据量稍大，如果是大文件的写，10M以内基本不用担心，如果是小文件写2M以内基本正常</p><p>cpu us: 持续大于50%，服务高峰期可以接受， 如果长期大于50 ，可以考虑优化</p><p>cpu sy: 现实内核进程所占的百分比，这里us + sy的参考值为80%，如果us+sy 大于 80%说明可能存在CPU不足。</p><p>cpu wa: 列显示了IO等待所占用的CPU时间的百分比。这里wa的参考值为30%，如果wa超过30%，说明IO等待严重，这可能是磁盘大量随机访问造成的， 也可能磁盘或者磁盘访问控制器的带宽瓶颈造成的(主要是块操作)</p></div><h2 id="_1-3-查看cpu核心数" tabindex="-1">1.3 查看cpu核心数 <a class="header-anchor" href="#_1-3-查看cpu核心数" aria-label="Permalink to &quot;1.3 查看cpu核心数&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/proc/cpuinfo</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">processor</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">wc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-l</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/proc/cpuinfo</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">processor</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">wc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span></span></code></pre></div>`,34),t=[l];function e(c,r,y,E,i,d){return a(),p("div",null,t)}const h=s(n,[["render",e]]);export{C as __pageData,h as default};
