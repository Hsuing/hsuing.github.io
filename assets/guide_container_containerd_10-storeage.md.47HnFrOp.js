import{_ as s,o as a,c as n,R as e}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"1. 存储挂载","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/containerd/10-storeage.md","filePath":"guide/container/containerd/10-storeage.md","lastUpdated":1731157838000}'),o={name:"guide/container/containerd/10-storeage.md"},l=e(`<h1 id="_1-存储挂载" tabindex="-1">1. 存储挂载 <a class="header-anchor" href="#_1-存储挂载" aria-label="Permalink to &quot;1. 存储挂载&quot;">​</a></h1><h2 id="_1-1-简介" tabindex="-1">1.1 简介 <a class="header-anchor" href="#_1-1-简介" aria-label="Permalink to &quot;1.1 简介&quot;">​</a></h2><p>容器的本质是一种特殊的进程，它使用namespace进行隔离，使用cgroup进行资源限制，并且以联合文件系统的形式挂载了单独的rootfs。 Containerd默认配置的snapshotter是overlayfs，overlayfs是联合文件系统的一种实现，overlayfs将只读的镜像层成为lowerdir，将读写的容器层成为upperdir，最后联合挂载呈现出mergedir。 容器中新写入的文件默认存储在容器的执行层，当容器被删除时，这些数据也就丢失了。如果想要在容器被删除后保留之前创建的文件，就需要将文件保存在宿主机上。</p><h2 id="_1-2-三种模式" tabindex="-1">1.2 三种模式 <a class="header-anchor" href="#_1-2-三种模式" aria-label="Permalink to &quot;1.2 三种模式&quot;">​</a></h2><p>nerdctl对容器存储挂载的支持基本上与Docker一致，支持<code>bind mounts</code>, <code>volumes</code>, <code>tmpfs</code>三种模式，下图是docker的文档中给的这三种模式的示意图:</p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202411092050790.png" alt="Docker Compose" style="margin:0 auto;"><ul><li><code>bind mounts</code>: 可以将文件数据存储在宿主机上的任意位置，其他的应用程序也有权对这些文件进行修改</li><li><code>volumes</code>: 将文件数据存储在宿主机上nerdctl的数据目录内，此目录应该由nerdctl管理，默认是<code>/var/lib/nerdctl/xxx/volumes/&lt;containerd namespace&gt;</code></li><li><code>tmpfs</code>将文件数据存储在宿主机的内存中，并不会写入磁盘中 (当前nerdctl 0.11.0还不支持此模式)。tmpfs的使用场景适用于出于安全考虑，将一些认证信息存储到tmpfs中，或者出于性能考虑需要将一些状态信息存储在内存中同时又不需要持久化的场景</li></ul><h3 id="_1-bind-mounts" tabindex="-1">1.bind mounts <a class="header-anchor" href="#_1-bind-mounts" aria-label="Permalink to &quot;1.bind mounts&quot;">​</a></h3><p>bind mounts可以将文件数据存储在宿主机上的任意位置，这意味着其他的应用程序也有权对这些文件进行修改。 注意使用bind mounts将宿主机目录挂载到容器中时，容器目录中原有的文件将会被隐藏，在容器内只能看到挂载进来的宿主机目录</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">nerdctl run -d -v /tmp/mydir:/etc/profile.d redis:alpine3.14</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">nerdctl run -d -v /tmp/mydir:/etc/profile.d redis:alpine3.14</span></span></code></pre></div><h3 id="_2-volumes" tabindex="-1">2.volumes <a class="header-anchor" href="#_2-volumes" aria-label="Permalink to &quot;2.volumes&quot;">​</a></h3><p>volumes由nerdctl创建和管理，可以使用<code>nerdctl volume create</code>命令显示的创建volume。</p><blockquote><p>注意，使用volume时，容器目录中原有的文件不会被隐藏容器目录中，原有的文件将被拷贝到volume所在的宿主机目录。</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#创建</span></span>
<span class="line"><span style="color:#B392F0;">nerdctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volume</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">redis-data</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看</span></span>
<span class="line"><span style="color:#B392F0;">nerdctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volume</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#挂载</span></span>
<span class="line"><span style="color:#B392F0;">nerdctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">redis-data:/data</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">redis:alpine3.14</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#创建</span></span>
<span class="line"><span style="color:#6F42C1;">nerdctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redis-data</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看</span></span>
<span class="line"><span style="color:#6F42C1;">nerdctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#挂载</span></span>
<span class="line"><span style="color:#6F42C1;">nerdctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redis-data:/data</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redis:alpine3.14</span></span></code></pre></div><p>参考：</p><ul><li><a href="https://containerd.io/scope/" target="_blank" rel="noreferrer">https://containerd.io/scope/</a></li><li><a href="https://github.com/containerd/containerd/blob/main/design/mounts.md" target="_blank" rel="noreferrer">https://github.com/containerd/containerd/blob/main/design/mounts.md</a></li><li><a href="https://docs.docker.com/storage/bind-mounts/" target="_blank" rel="noreferrer">https://docs.docker.com/storage/bind-mounts/</a></li></ul>`,16),t=[l];function p(r,c,i,d,u,m){return a(),n("div",null,t)}const E=s(o,[["render",p]]);export{h as __pageData,E as default};
