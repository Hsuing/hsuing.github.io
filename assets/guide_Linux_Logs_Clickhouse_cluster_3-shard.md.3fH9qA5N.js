import{_ as e,o as a,c as t,R as o}from"./chunks/framework.zUbWieqp.js";const k=JSON.parse('{"title":"1. ck分片","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Linux/Logs/Clickhouse/cluster/3-shard.md","filePath":"guide/Linux/Logs/Clickhouse/cluster/3-shard.md","lastUpdated":1731060191000}'),r={name:"guide/Linux/Logs/Clickhouse/cluster/3-shard.md"},s=o('<h1 id="_1-ck分片" tabindex="-1">1. ck分片 <a class="header-anchor" href="#_1-ck分片" aria-label="Permalink to &quot;1. ck分片&quot;">​</a></h1><h2 id="_1-1-分片介绍" tabindex="-1">1.1 分片介绍 <a class="header-anchor" href="#_1-1-分片介绍" aria-label="Permalink to &quot;1.1 分片介绍&quot;">​</a></h2><p>分片功能依赖于 Distributed 表引擎，Distributed 表引擎本身不存储数据，有点类似于 MyCat 之于 MySql，成为一种中间件，通过分布式逻辑表来写入、分发、路由来操作多台节点不同分片的分布式数据</p><h2 id="_1-2-分片作用" tabindex="-1">1.2 分片作用 <a class="header-anchor" href="#_1-2-分片作用" aria-label="Permalink to &quot;1.2 分片作用&quot;">​</a></h2><p>进行分片集群的目的是<code>解决数据的横向扩容</code>，通过分片把一份完整的数据进行切分，不同的分片分布到不同的节点上，再通过 Distributed 表引擎把数据拼接起来一同使用,<code>避免全部表扫描</code></p>',5),c=[s];function i(d,_,n,l,h,u){return a(),t("div",null,c)}const m=e(r,[["render",i]]);export{k as __pageData,m as default};
