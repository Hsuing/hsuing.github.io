import{_ as e,o as r,c as a,R as o}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"1. Terraform资源依赖","description":"","frontmatter":{},"headers":[],"relativePath":"guide/go/Terraform/15-resource-dependency.md","filePath":"guide/go/Terraform/15-resource-dependency.md","lastUpdated":1753110162000}'),t={name:"guide/go/Terraform/15-resource-dependency.md"},n=o('<h1 id="_1-terraform资源依赖" tabindex="-1">1. Terraform资源依赖 <a class="header-anchor" href="#_1-terraform资源依赖" aria-label="Permalink to &quot;1. Terraform资源依赖&quot;">​</a></h1><h2 id="_1-1-什么需要依赖" tabindex="-1">1.1 什么需要依赖？ <a class="header-anchor" href="#_1-1-什么需要依赖" aria-label="Permalink to &quot;1.1 什么需要依赖？&quot;">​</a></h2><p>​ 配置中的大多数资源没有任何特定关系，Terraform可以并行更改多个不相关的资源。但是，某些资源必须在 其他特定资源之后处理。有时这是因为资源的工作方式，有时资源的配置需要另一个资源生成的信息。</p><h2 id="_1-2-隐式依赖与显示依赖" tabindex="-1">1.2 隐式依赖与显示依赖 <a class="header-anchor" href="#_1-2-隐式依赖与显示依赖" aria-label="Permalink to &quot;1.2 隐式依赖与显示依赖&quot;">​</a></h2><p>​ 大多数资源依赖性都是自动处理的。Terraform分析块中的所有resource以查找对其他对象的引用，并在创建、更新或销毁资源时将这些引用视为隐式排序要求。由于大多数对其他资源具有行为依赖性的资源也会引用这些资源的数据，因此通常没有必要手动指定资源之间的依赖性。</p><p>​ 但是，某些依赖项无法在配置中隐式识别。例如，如果Terraform必须管理访问控制策略并采取需要这些策略存在的操作，那么在访问策略和创建依赖于它的资源之间存在隐藏的依赖关系。在这些极少数情况下，需要使用<strong>depends_on</strong>参数显式指定依赖项。</p>',6),d=[n];function s(_,c,i,m,p,f){return r(),a("div",null,d)}const u=e(t,[["render",s]]);export{h as __pageData,u as default};
