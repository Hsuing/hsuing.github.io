import{_ as s,o as a,c as e,R as o}from"./chunks/framework.zUbWieqp.js";const u=JSON.parse('{"title":"1.Pod","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/资源对象/0-资源.md","filePath":"guide/container/k8s/资源对象/0-资源.md","lastUpdated":1720533756000}'),p={name:"guide/container/k8s/资源对象/0-资源.md"},n=o(`<h1 id="_1-pod" tabindex="-1">1.Pod <a class="header-anchor" href="#_1-pod" aria-label="Permalink to &quot;1.Pod&quot;">​</a></h1><p>​ 容器都是由镜像启动的，但在容器外面会包裹通过Pod将容器包裹起来这个是K8s的概念，在这个Pod里面可以有一个或多个容器,在k8s中统称为最小单元。</p><p>pod特征：</p><ul><li>Pod里的所有容器都会调度在同一个节点上运行，</li><li>Pod中的所有容器会共享同一网络，它们有一个唯一的IP，就叫PodIP;</li><li>Pod中还有一个特殊的容器叫Puase，它会优先启动然后进行IP分配，而后将其他容器都link到该容器上，实现网络共享</li></ul><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202401231127339.png" alt="image-20240123112707589"></p><h1 id="_2-deployment" tabindex="-1">2.Deployment <a class="header-anchor" href="#_2-deployment" aria-label="Permalink to &quot;2.Deployment&quot;">​</a></h1><p>​ 在Pod的上一层就是ReplicaSet控制器，它主要负责管理Pod的副本数，但通常我们并不直接使用ReplicaSet，而是使用比ReplicaSet更高一级的DepLoyment。由DepLoyment管理RepLicaSet，它会自动帮我们创建和销毁RS，有了Deployment就可以实现应用的滚动更新。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202401231344464.png" alt="image-20240123134342684"></p><h1 id="_3-service" tabindex="-1">3.Service <a class="header-anchor" href="#_3-service" aria-label="Permalink to &quot;3.Service&quot;">​</a></h1><p>​ Service，是Kubernetes用来实现Pod负载均衡的一个服务；要想实现Pod的负载均衡，首先需要通过labels为Pod打上特定的标签，而后创建Service时使用Selector选择对应的标签，最终通过节点的kube-proxy来完成负载均衡的规则创建</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202401231358864.png" alt="image-20240123135851549"></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#iptables\\ipvs规则</span></span>
<span class="line"><span style="color:#B392F0;">iptables</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nat</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serviceIP</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-j</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">DNAT</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">podIP1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#iptables\\ipvs规则</span></span>
<span class="line"><span style="color:#6F42C1;">iptables</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nat</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serviceIP</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-j</span><span style="color:#24292E;"> </span><span style="color:#032F62;">DNAT</span><span style="color:#24292E;"> </span><span style="color:#032F62;">podIP1</span></span></code></pre></div><h1 id="_4-namespace" tabindex="-1">4.Namespace <a class="header-anchor" href="#_4-namespace" aria-label="Permalink to &quot;4.Namespace&quot;">​</a></h1><p>​ 在Kubernetes中，名字空间（Namespace）提供一种机制，将同一集群中的资源划分为相互隔离的组。同一名字空间内的资源名称要唯一，但跨名字空间时没有这个要求</p><ul><li>对资源对象进行隔离：比如：Pod、DepLoyment、Service、将其划分为相互隔离的组</li><li>对资源配额进行隔离：CPU，Memory，限制某个NS的可以使用的cpu和内存</li></ul><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202401231417159.png" alt="image-20240123141724841"></p><p>​ namespace仅能隔离带有名称空间的资源，而不带名称空间的资源不支持隔离，可以通过<strong>kubectlapi-resources</strong>查看哪些资源属于名称空间级别，哪些不属于名称空间级别。</p><ul><li>命名空间划分</li></ul><p>按业务划分：shoping、edu</p><p>按环境划分：dev、prod</p><p>按团队划分</p>`,21),l=[n];function t(c,i,r,d,h,y){return a(),e("div",null,l)}const _=s(p,[["render",t]]);export{u as __pageData,_ as default};
