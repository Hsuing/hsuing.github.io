import{_ as s,o as a,c as n,R as l}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/go/1-简介.md","filePath":"guide/go/1-简介.md","lastUpdated":1759585023000}'),o={name:"guide/go/1-简介.md"},e=l(`<div style="display:flex;justify-content:center;align-items:center;height:40vh;"><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/20250925102838337.png" alt="居中图片"></div><h2 id="_1-go语言" tabindex="-1">1.GO语言 <a class="header-anchor" href="#_1-go语言" aria-label="Permalink to &quot;1.GO语言&quot;">​</a></h2><p><strong>Go</strong>（又称 <strong>Golang</strong>）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算</p><h3 id="_1-1简介" tabindex="-1">1.1简介 <a class="header-anchor" href="#_1-1简介" aria-label="Permalink to &quot;1.1简介&quot;">​</a></h3><p><strong>Go</strong>（又称<strong>Golang</strong>）是Google开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。</p><p>罗伯特·格瑞史莫（Robert Griesemer），罗勃·派克（Rob Pike）及肯·汤普逊（Ken Thompson）于2007年9月开始设计Go，稍后Ian Lance Taylor、Russ Cox加入项目。Go是基于Inferno操作系统所开发的。Go于2009年11月正式宣布推出，成为开放源代码项目，并在Linux及Mac OS X平台上进行了实现，后来追加了Windows系统下的实现。在2016年，Go被软件评价公司TIOBE 选为“TIOBE 2016 年最佳语言”。 目前，Go每半年发布一个二级版本（即从a.x升级到a.y）</p><h3 id="_1-2-发展史" tabindex="-1">1.2 发展史 <a class="header-anchor" href="#_1-2-发展史" aria-label="Permalink to &quot;1.2 发展史&quot;">​</a></h3><ul><li>2007年，Google开始着手开发Go语言，主要的设计者包括Robert Griesemer、Rob Pike和Ken Thompson等人.</li><li>2009年11月，Google发布了Go语言的第一个稳定版本，即Go1.0。这标志着Go语言正式面世，并开始逐渐受到广泛关注和应用.</li><li>2011年5月，Go1.0.2发布，这是Go语言的第一个正式稳定版本，其中包括了一些重要的bug修复和改进</li><li>2012年3月，Go语言成为GitHub上最受欢迎的编程语言之一，这意味着Go语言已经受到了广泛的开发者社区的支持和认可</li><li>2015年8月，G01.5发布，加入了支持ARMv7和ARM64架构、并行编译等特性，这使得Go语言在移动设备和嵌入式 系统等领域的应用更加便利</li><li>2018年8月，Go1.11发布，号1X了模块支持、WebAssembly支持、延迟函数调用等特性，这些特性使得Go语言在 项目管理、跨平台应用和异步编程等方面有了更加强大的能力</li><li>2019年2月，G01.12发布，加入了一些小的语法改进和工具增强，使得开发者能够更加便利地使用G0语言开发应用 程序。</li><li>2020年2月，G01.14发布，加入了对嵌入式设备的支持、对HTTP服务器的性能优化等特性，这使得Go语言在物联 网和云计算等领域的应用更加广泛。</li><li>2021年2月，G01.16发布，加入了对模块和错误处理的改进、垃圾回收器的性能提升等特性，这些改进使得Go语言 在性能、可靠性和开发体验等方面有了更大的提升。</li></ul><h3 id="_1-3撰写风格" tabindex="-1">1.3撰写风格 <a class="header-anchor" href="#_1-3撰写风格" aria-label="Permalink to &quot;1.3撰写风格&quot;">​</a></h3><p>在Go中有几项规定，当不匹配以下规定时编译将会产生错误。</p><ol><li>每行程序结束后不需要撰写分号（;）。</li><li>大括号（{）不能够换行放置。</li><li>if判断式和for循环不需要以小括号包覆起来。</li></ol><p>Go亦有内置gofmt工具，能够自动整理代码多余的空白、变量名称对齐、并将对齐空格转换成Tab</p><h3 id="_1-4编译器" tabindex="-1">1.4编译器 <a class="header-anchor" href="#_1-4编译器" aria-label="Permalink to &quot;1.4编译器&quot;">​</a></h3><p>当前有两个Go编译器分支，分别为官方编译器gc和gccgo。官方编译器在初期使用C写成，后用Go重写从而实现自举。Gccgo是一个使用标准GCC作为后端的Go编译器。</p><p>官方编译器支持跨平台编译（但不支持CGO），允许将源代码编译为可在目标系统、架构上执行的二进制文件</p><h3 id="_1-5语言特点" tabindex="-1">1.5语言特点 <a class="header-anchor" href="#_1-5语言特点" aria-label="Permalink to &quot;1.5语言特点&quot;">​</a></h3><ol><li>背靠大厂，google背书，可靠</li><li>天生支持并发（最显著特点）</li><li>语法简单，容易上手</li><li>内置runtime，支持垃圾回收</li><li>可直接编译成机器码，不依赖其他库</li><li>丰富的标准库</li><li>跨平台编译</li></ol><h3 id="_1-6为什么选择golang" tabindex="-1">1.6为什么选择Golang？ <a class="header-anchor" href="#_1-6为什么选择golang" aria-label="Permalink to &quot;1.6为什么选择Golang？&quot;">​</a></h3><p>使用简单（简单、便捷）</p><p>原生并发（轻量、高效）</p><p>组合（垂直组合、水平组合）</p><p>面向工程（标准库、工具链）</p><h3 id="_1-7-可以开发什么" tabindex="-1">1.7 可以开发什么 <a class="header-anchor" href="#_1-7-可以开发什么" aria-label="Permalink to &quot;1.7 可以开发什么&quot;">​</a></h3><p>网络编程和分布式计算</p><p>微服务和云原生应用开发</p><p>区块链技术和加密货币开发</p><p>后台管理和高并发应用开发</p><h3 id="_1-8-go语言相关学习网站" tabindex="-1">1.8 Go语言相关学习网站 <a class="header-anchor" href="#_1-8-go语言相关学习网站" aria-label="Permalink to &quot;1.8 Go语言相关学习网站&quot;">​</a></h3><ul><li>Go 官网：<a href="https://golang.google.cn/" target="_blank" rel="noreferrer">https://golang.google.cn/</a></li><li>Go 语言圣经：<a href="https://books.studygolang.com/gopl-zh/" target="_blank" rel="noreferrer">The Go Programming Language</a></li><li>GO 中文文档：<a href="https://www.topgoer.com/" target="_blank" rel="noreferrer">https://www.topgoer.com/</a></li></ul><h2 id="_2-go目录规范" tabindex="-1">2. Go目录规范 <a class="header-anchor" href="#_2-go目录规范" aria-label="Permalink to &quot;2. Go目录规范&quot;">​</a></h2><h3 id="_2-1-目录规范" tabindex="-1">2.1 目录规范 <a class="header-anchor" href="#_2-1-目录规范" aria-label="Permalink to &quot;2.1 目录规范&quot;">​</a></h3><p>一个好的目录结构至少要满足以下几个要求。</p><p><code>命名清晰</code>：目录命名要清晰、简洁，不要太长，也不要太短，目录名要能清晰地表达出该目录实现的功能，并且目录名可根据实际情况选择单数或者复数。</p><p><code>功能明确</code>：一个目录所要实现的功能应该是明确的、并且在整个项目目录中具有很高的辨识度。也就是说，当需要新增一个功能时，我们能够非常清楚地知道把这个功能放在哪个目录下。</p><p><code>全面性</code>：目录结构应该尽可能全面地包含研发过程中需要的功能，例如文档、脚本、源码管理、API 实现、工具、第三方包、测试、编译产物等。</p><p><code>可预测性</code>：项目规模一定是从小到大的，所以一个好的目录结构应该能够在项目变大时，仍然保持之前的目录结构。</p><p><code>可扩展性</code>：每个目录下存放了同类的功能，在项目变大时，这些目录应该可以存放更多同类功能。根据功能，我们可以</p><p>将目录结构分为结构化目录结构和平铺式目录结构两种。</p><ul><li>结构化目录结构主要用在 <code>Go</code> 应用中，相对来说比较复杂；</li><li>而平铺式目录结构主要用在 <code>Go</code> 包中，相对来说比较简单；</li></ul><h3 id="_2-2-平铺式目录结构" tabindex="-1">2.2 平铺式目录结构 <a class="header-anchor" href="#_2-2-平铺式目录结构" aria-label="Permalink to &quot;2.2 平铺式目录结构&quot;">​</a></h3><p>一个 Go 项目可以是一个应用，也可以是一个代码框架 / 库，当项目是代码框架 / 库时，比较适合采用平铺式目录结构。</p><p>平铺方式就是在项目的根目录下存放项目的代码，整个目录结构看起来更像是一层的，例如 log 包 github.com/golang/glog 就是平铺式的，目录如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">$ ls glog/</span></span>
<span class="line"><span style="color:#e1e4e8;">glog_file.go  glog.go  glog_test.go  LICENSE  README</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">$ ls glog/</span></span>
<span class="line"><span style="color:#24292e;">glog_file.go  glog.go  glog_test.go  LICENSE  README</span></span></code></pre></div><h3 id="_2-3-结构化目录结构" tabindex="-1">2.3 结构化目录结构 <a class="header-anchor" href="#_2-3-结构化目录结构" aria-label="Permalink to &quot;2.3 结构化目录结构&quot;">​</a></h3><p>当前 <code>Go</code> 社区比较推荐的结构化目录结构是 <a href="https://github.com/golang-standards/project-layout%E3%80%82%E8%99%BD%E7%84%B6%E5%AE%83%E5%B9%B6%E4%B8%8D%E6%98%AF%E5%AE%98%E6%96%B9%E5%92%8C%E7%A4%BE%E5%8C%BA%E7%9A%84%E8%A7%84%E8%8C%83%EF%BC%8C%E4%BD%86%E5%9B%A0%E4%B8%BA%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83%E5%90%88%E7%90%86%EF%BC%8C%E8%A2%AB%E5%BE%88%E5%A4%9A" target="_blank" rel="noreferrer">https://github.com/golang-standards/project-layout。虽然它并不是官方和社区的规范，但因为组织方式比较合理，被很多</a> <code>Go</code> 开发人员接受。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">├── api</span></span>
<span class="line"><span style="color:#e1e4e8;">├── assets</span></span>
<span class="line"><span style="color:#e1e4e8;">├── build</span></span>
<span class="line"><span style="color:#e1e4e8;">├── cmd</span></span>
<span class="line"><span style="color:#e1e4e8;">├── configs</span></span>
<span class="line"><span style="color:#e1e4e8;">├── deployments</span></span>
<span class="line"><span style="color:#e1e4e8;">├── docs</span></span>
<span class="line"><span style="color:#e1e4e8;">├── examples</span></span>
<span class="line"><span style="color:#e1e4e8;">├── githooks</span></span>
<span class="line"><span style="color:#e1e4e8;">├── go.mod</span></span>
<span class="line"><span style="color:#e1e4e8;">├── init</span></span>
<span class="line"><span style="color:#e1e4e8;">├── internal</span></span>
<span class="line"><span style="color:#e1e4e8;">├── LICENSE.md</span></span>
<span class="line"><span style="color:#e1e4e8;">├── Makefile</span></span>
<span class="line"><span style="color:#e1e4e8;">├── pkg</span></span>
<span class="line"><span style="color:#e1e4e8;">├── README_zh-CN.md</span></span>
<span class="line"><span style="color:#e1e4e8;">├── scripts</span></span>
<span class="line"><span style="color:#e1e4e8;">├── test</span></span>
<span class="line"><span style="color:#e1e4e8;">├── third_party</span></span>
<span class="line"><span style="color:#e1e4e8;">├── tools</span></span>
<span class="line"><span style="color:#e1e4e8;">├── vendor</span></span>
<span class="line"><span style="color:#e1e4e8;">├── web</span></span>
<span class="line"><span style="color:#e1e4e8;">└── website</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">├── api</span></span>
<span class="line"><span style="color:#24292e;">├── assets</span></span>
<span class="line"><span style="color:#24292e;">├── build</span></span>
<span class="line"><span style="color:#24292e;">├── cmd</span></span>
<span class="line"><span style="color:#24292e;">├── configs</span></span>
<span class="line"><span style="color:#24292e;">├── deployments</span></span>
<span class="line"><span style="color:#24292e;">├── docs</span></span>
<span class="line"><span style="color:#24292e;">├── examples</span></span>
<span class="line"><span style="color:#24292e;">├── githooks</span></span>
<span class="line"><span style="color:#24292e;">├── go.mod</span></span>
<span class="line"><span style="color:#24292e;">├── init</span></span>
<span class="line"><span style="color:#24292e;">├── internal</span></span>
<span class="line"><span style="color:#24292e;">├── LICENSE.md</span></span>
<span class="line"><span style="color:#24292e;">├── Makefile</span></span>
<span class="line"><span style="color:#24292e;">├── pkg</span></span>
<span class="line"><span style="color:#24292e;">├── README_zh-CN.md</span></span>
<span class="line"><span style="color:#24292e;">├── scripts</span></span>
<span class="line"><span style="color:#24292e;">├── test</span></span>
<span class="line"><span style="color:#24292e;">├── third_party</span></span>
<span class="line"><span style="color:#24292e;">├── tools</span></span>
<span class="line"><span style="color:#24292e;">├── vendor</span></span>
<span class="line"><span style="color:#24292e;">├── web</span></span>
<span class="line"><span style="color:#24292e;">└── website</span></span></code></pre></div><p>一个 <code>Go</code> 项目包含 3 大部分：<code>Go</code> 应用 、项目管理和文档。所以，我们的项目目录也可以分为这 3 大类。同时，<code>Go</code> 应用又贯穿开发阶段、测试阶段和部署阶段，相应的应用类的目录，又可以按开发流程分为更小的子类。所以整体来看，我们的目录结构可以按下图所示的方式来分类</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202408011045833.png" alt=""></p><h4 id="go-应用开发目录" tabindex="-1">Go 应用开发目录 <a class="header-anchor" href="#go-应用开发目录" aria-label="Permalink to &quot;Go 应用开发目录&quot;">​</a></h4><p>开发的代码包含前端代码和后端代码，可以分别存放在前端目录和后端目录中。</p><h5 id="web" tabindex="-1">/web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;/web&quot;">​</a></h5><p>前端代码存放目录，主要用来存放 <code>Web</code> 静态资源，服务端模板和单页应用（<code>SPAs</code>）。</p><h5 id="cmd" tabindex="-1">/cmd <a class="header-anchor" href="#cmd" aria-label="Permalink to &quot;/cmd&quot;">​</a></h5><p>一个项目有很多组件，可以把组件 <code>main</code> 函数所在的文件夹统一放在 <code>/cmd</code> 目录下，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">$ ls cmd/</span></span>
<span class="line"><span style="color:#e1e4e8;">gendocs  geniamdocs  genman   genyaml  apiserver iamctl  iam-pump</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">$ ls cmd/apiserver/</span></span>
<span class="line"><span style="color:#e1e4e8;">apiserver.go</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">$ ls cmd/</span></span>
<span class="line"><span style="color:#24292e;">gendocs  geniamdocs  genman   genyaml  apiserver iamctl  iam-pump</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">$ ls cmd/apiserver/</span></span>
<span class="line"><span style="color:#24292e;">apiserver.go</span></span></code></pre></div><p>这里要保证 <code>/cmd/&lt;组件名&gt;</code> 目录下不要存放太多的代码，如果你认为代码可以导入并在其他项目中使用，那么它应该位于 <code>/pkg</code> 目录中。如果代码不是可重用的，或者你不希望其他人重用它，请将该代码放到 <code>/internal</code> 目录中。</p><h5 id="internal" tabindex="-1">/internal <a class="header-anchor" href="#internal" aria-label="Permalink to &quot;/internal&quot;">​</a></h5><p>存放<strong>私有应用和库代码</strong></p><p>如果一些代码，你不希望被其他项目/库导入，可以将这部分代码放至<code>/internal</code>目录下。一般存储一些比较专属于当前项目的代码包。这是在代码编译阶段就会被限制的，该目录下的代码不可被外部访问到。一般有以下子目录：</p><ul><li>/router 路由</li><li>/application 存放命令与查询 <ul><li>/command</li><li>query</li></ul></li><li>/middleware 中间件</li><li>/model 模型定义</li><li>/repository 仓储层，封装数据库操作</li><li>/response 响应</li><li>/errmsg 错误处理</li></ul><p>在<code>/internal</code>目录下应存放每个组件的源码目录，当项目变大、组件增多时，扔可以将新增的组件代码存放到<code>/internal</code>目录下</p><p>internal目录并不局限在根目录，在各级子目录中也可以有internal子目录，也会同样起到作用。</p><h5 id="pkg" tabindex="-1">/pkg <a class="header-anchor" href="#pkg" aria-label="Permalink to &quot;/pkg&quot;">​</a></h5><p>该目录中存放可以被外部应用使用的代码库，其他项目可以直接通过 <code>import</code> 导入这里的代码。所以，我们在将代码库放入该目录时一定要慎重</p><h5 id="vendor" tabindex="-1">/vendor <a class="header-anchor" href="#vendor" aria-label="Permalink to &quot;/vendor&quot;">​</a></h5><p>项目依赖，可通过 go mod vendor 创建。需要注意的是，如果是一个 Go 库，不要提交 vendor 依赖包。vendor 就是把依赖的代码 clone 一份，放在 vendor 中，这样构建时，go 编译器会使用 vendor 中的依赖，而不是到网上去下载，也不会使用本地 module cache 中的依赖。</p><h5 id="third-party" tabindex="-1">/third_party <a class="header-anchor" href="#third-party" aria-label="Permalink to &quot;/third_party&quot;">​</a></h5><p>外部帮助工具，分支代码或其他第三方应用（例如 Swagger UI）。比如我们 fork 了一个第三方 go 包，并做了一些小的改动，我们可以放在目录 /third_party/forked 下。一方面可以很清楚的知道该包是 fork 第三方的，另一方面又能够方便地和 upstream 同步。</p><h4 id="go-应用测试目录" tabindex="-1">Go 应用测试目录 <a class="header-anchor" href="#go-应用测试目录" aria-label="Permalink to &quot;Go 应用测试目录&quot;">​</a></h4><h5 id="test" tabindex="-1">/test <a class="header-anchor" href="#test" aria-label="Permalink to &quot;/test&quot;">​</a></h5><p>用于存放其他外部测试应用和测试数据。/test 目录的构建方式比较灵活：对于大的项目，有一个数据子目录是有意义的。例如，如果需要 Go 忽略该目录中的内容，可以使用 /test/data 或 /test/testdata 目录。</p><p>需要注意的是，Go 也会忽略以 . 或 _ 开头的目录或文件。这样在命名测试数据目录方面，可以具有更大的灵活性。</p><h4 id="go-应用部署目录" tabindex="-1">Go 应用部署目录 <a class="header-anchor" href="#go-应用部署目录" aria-label="Permalink to &quot;Go 应用部署目录&quot;">​</a></h4><h5 id="configs" tabindex="-1">/configs <a class="header-anchor" href="#configs" aria-label="Permalink to &quot;/configs&quot;">​</a></h5><p>放配置文件</p><h5 id="deployments" tabindex="-1">/deployments <a class="header-anchor" href="#deployments" aria-label="Permalink to &quot;/deployments&quot;">​</a></h5><p>用来存放 <code>Iaas</code>、<code>PaaS</code> 系统和容器编排部署配置和模板（<code>Docker-Compose</code>，<code>Kubernetes/Helm</code>，<code>Mesos</code>，<code>Terraform</code>，<code>Bosh</code>）。在一些项目，特别是用 <code>Kubernetes</code> 部署的项目中，这个目录可能命名为 <code>deploy</code>。</p><h5 id="init" tabindex="-1">/init <a class="header-anchor" href="#init" aria-label="Permalink to &quot;/init&quot;">​</a></h5><p>存放初始化系统（<code>systemd</code>，<code>upstart</code>，<code>sysv</code>）和进程管理配置文件（<code>runit</code>，<code>supervisord</code>）。比如 <code>sysemd</code> 的 <code>unit</code> 文件。这类文件，在非容器化部署的项目中会用到。</p><h4 id="go应用项目管理目录" tabindex="-1">Go应用项目管理目录 <a class="header-anchor" href="#go应用项目管理目录" aria-label="Permalink to &quot;Go应用项目管理目录&quot;">​</a></h4><h5 id="makefile" tabindex="-1">/Makefile <a class="header-anchor" href="#makefile" aria-label="Permalink to &quot;/Makefile&quot;">​</a></h5><p>一个 Go 项目在其根目录下应该有一个 Makefile 工具，用来对项目进行管理，Makefile 通常用来执行静态代码检查、单元测试、编译等功能。其他常见功能：</p><p>静态代码检查(lint)：推荐用 golangci-lint。</p><p>单元测试(test)：运行 go test ./...。</p><p>编译(build)：编译源码，支持不同的平台，不同的 CPU 架构。</p><p>镜像打包和发布(image/image.push)：现在的系统比较推荐用 Docker/Kubernetes 进行部署，所以一般也要有镜像构建功能。</p><p>清理（clean）:清理临时文件或者编译后的产物。</p><p>代码生成（gen）：比如要编译生成 protobuf pb.go 文件。</p><p>部署（deploy，可选）：一键部署功能，方便测试。</p><p>发布（release）：发布功能，比如：发布到 Docker Hub、github 等。</p><p>帮助（help）:告诉 Makefile 有哪些功能，如何执行这些功能。</p><p>版权声明（add-copyright）：如果是开源项目，可能需要在每个文件中添加版权头，这可以通过 Makefile 来添加。</p><p>API 文档（swagger）：如果使用 swagger 来生成 API 文档，这可以通过 Makefile 来生成。</p><p>建议：直接执行 make 时，执行如下各项 format -&gt; lint -&gt; test -&gt; build，如果是有代码生成的操作，还可能需要首先生成代码 gen -&gt; format -&gt; lint -&gt; test -&gt; build。</p><h5 id="scripts" tabindex="-1">/scripts <a class="header-anchor" href="#scripts" aria-label="Permalink to &quot;/scripts&quot;">​</a></h5><p>该目录主要用来存放脚本文件，实现构建、安装、分析等不同功能。不同项目，里面可能存放不同的文件，但通常可以考虑包含以下 3 个目录：</p><p>/scripts/make-rules：用来存放 makefile 文件，实现 /Makefile 文件中的各个功能。Makefile 有很多功能，为了保持它的简洁，我建议你将各个功能的具体实现放在 /scripts/make-rules 文件夹下</p><p>/scripts/lib：shell 库，用来存放 shell 脚本。一个大型项目中有很多自动化任务，比如发布、更新文档、生成代码等，所以要写很多 shell 脚本，这些 shell 脚本会有一些通用功能，可以抽象成库，存放在 /scripts/lib 目录下，比如 logging.sh，util.sh 等。</p><p>/scripts/install：如果项目支持自动化部署，可以将自动化部署脚本放在此目录下。如果部署脚本简单，也可以直接放在 /scripts 目录下。</p><p>另外，shell 脚本中的函数名，建议采用语义化的命名方式，例如 iam::log::info 这种语义化的命名方式，可以使调用者轻松的辨别出函数的功能类别，便于函数的管理和引用</p><h5 id="build" tabindex="-1">/build <a class="header-anchor" href="#build" aria-label="Permalink to &quot;/build&quot;">​</a></h5><p>存放安装包和持续集成相关的文件。这个目录下有 3 个大概率会使用到的目录，在设计目录结构时可以考虑进去。</p><ul><li><code>/build/package</code>：存放容器（<code>Docker</code>）、系统（<code>deb</code>, <code>rpm</code>, <code>pkg</code>）的包配置和脚本。</li><li><code>/build/ci</code>：存放 <code>CI</code>的配置文件和脚本。</li><li><code>/build/docker</code>：存放子项目各个组件的 <code>Dockerfile</code> 文件。</li></ul><h5 id="tools" tabindex="-1">/tools <a class="header-anchor" href="#tools" aria-label="Permalink to &quot;/tools&quot;">​</a></h5><p>存放这个项目的支持工具。这些工具可导入来自 <code>/pkg</code> 和 <code>/internal</code> 目录的代码</p><h5 id="githooks" tabindex="-1">/githooks <a class="header-anchor" href="#githooks" aria-label="Permalink to &quot;/githooks&quot;">​</a></h5><p><code>Git</code> 钩子。比如，我们可以将 <code>commit-msg</code> 存放在该目录</p><h5 id="assets" tabindex="-1">/assets <a class="header-anchor" href="#assets" aria-label="Permalink to &quot;/assets&quot;">​</a></h5><p>项目使用的其他资源 (图片、<code>CSS</code>、<code>JavaScript</code> 等)。</p><h4 id="go-应用文档目录" tabindex="-1">Go 应用文档目录 <a class="header-anchor" href="#go-应用文档目录" aria-label="Permalink to &quot;Go 应用文档目录&quot;">​</a></h4><h5 id="readme-md" tabindex="-1">/README.md <a class="header-anchor" href="#readme-md" aria-label="Permalink to &quot;/README.md&quot;">​</a></h5><p>项目的 <code>README</code> 文件一般包含了项目的介绍、功能、快速安装和使用指引、详细的文档链接以及开发指引等</p><h5 id="docs" tabindex="-1">/docs <a class="header-anchor" href="#docs" aria-label="Permalink to &quot;/docs&quot;">​</a></h5><p>存放设计文档、开发文档和用户文档等（除了 <code>godoc</code> 生成的文档）。推荐存放以下几个子目录：</p><ul><li><code>/docs/devel/{en-US,zh-CN}</code>：存放开发文档、<code>hack</code> 文档等。</li><li><code>/docs/guide/{en-US,zh-CN}</code>: 存放用户手册，安装、<code>quickstart</code>、产品文档等，分为中文文档和英文文档。</li><li><code>/docs/images</code>：存放图片文件。</li></ul><h5 id="contributing-md" tabindex="-1">/CONTRIBUTING.md <a class="header-anchor" href="#contributing-md" aria-label="Permalink to &quot;/CONTRIBUTING.md&quot;">​</a></h5><p>开源就绪的项目，用来说明如何贡献代码，如何开源协同等等。<code>CONTRIBUTING.md</code> 不仅能够规范协同流程，还能降低第三方开发者贡献代码的难度。</p><h5 id="api" tabindex="-1">/api <a class="header-anchor" href="#api" aria-label="Permalink to &quot;/api&quot;">​</a></h5><p>/api 目录中存放的是当前项目对外提供的各种不同类型的 API 接口定义文件，其中可能包含类似</p><p>/api/protobuf-spec、/api/thrift-spec、/api/http-spec、openapi、swagger 的目录，这些目录包含了当前项目对外提供和依赖的所有 API 文件。</p><h3 id="_2-4-实际项目参考目录" tabindex="-1">2.4 实际项目参考目录 <a class="header-anchor" href="#_2-4-实际项目参考目录" aria-label="Permalink to &quot;2.4 实际项目参考目录&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">├── admin.sh</span><span style="color:#E1E4E8;">                     </span><span style="color:#6A737D;"># 进程的start|stop|status|restart控制文件</span></span>
<span class="line"><span style="color:#9ECBFF;">├── conf</span><span style="color:#E1E4E8;">                         </span><span style="color:#6A737D;"># 配置文件统一存放目录</span></span>
<span class="line"><span style="color:#9ECBFF;">│   ├── config.yaml</span><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;"># 配置文件</span></span>
<span class="line"><span style="color:#9ECBFF;">│   ├── server.crt</span><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;"># TLS配置文件</span></span>
<span class="line"><span style="color:#9ECBFF;">│   └── server.key</span></span>
<span class="line"><span style="color:#9ECBFF;">├── config</span><span style="color:#E1E4E8;">                       </span><span style="color:#6A737D;"># 专门用来处理配置和配置文件的Go package</span></span>
<span class="line"><span style="color:#9ECBFF;">│   └── config.go</span><span style="color:#E1E4E8;">                 </span></span>
<span class="line"><span style="color:#9ECBFF;">├── db.sql</span><span style="color:#E1E4E8;">                       </span><span style="color:#6A737D;"># 在部署新环境时，可以登录MySQL客户端，执行source db.sql创建数据库和表</span></span>
<span class="line"><span style="color:#9ECBFF;">├── docs</span><span style="color:#E1E4E8;">                         </span><span style="color:#6A737D;"># swagger文档，执行 swag init 生成的</span></span>
<span class="line"><span style="color:#9ECBFF;">│   ├── docs.go</span></span>
<span class="line"><span style="color:#9ECBFF;">│   └── swagger</span></span>
<span class="line"><span style="color:#9ECBFF;">│       ├── swagger.json</span></span>
<span class="line"><span style="color:#9ECBFF;">│       └── swagger.yaml</span></span>
<span class="line"><span style="color:#9ECBFF;">├── handler</span><span style="color:#E1E4E8;">                      </span><span style="color:#6A737D;"># 类似MVC架构中的C，用来读取输入，并将处理流程转发给实际的处理函数，最后返回结果</span></span>
<span class="line"><span style="color:#9ECBFF;">│   ├── handler.go</span></span>
<span class="line"><span style="color:#9ECBFF;">│   ├── sd</span><span style="color:#E1E4E8;">                       </span><span style="color:#6A737D;"># 健康检查handler</span></span>
<span class="line"><span style="color:#9ECBFF;">│   │   └── check.go</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#9ECBFF;">│   └── user</span><span style="color:#E1E4E8;">                     </span><span style="color:#6A737D;"># 核心：用户业务逻辑handler</span></span>
<span class="line"><span style="color:#9ECBFF;">│       ├── create.go</span><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 新增用户</span></span>
<span class="line"><span style="color:#9ECBFF;">│       ├── delete.go</span><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 删除用户</span></span>
<span class="line"><span style="color:#9ECBFF;">│       ├── get.go</span><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;"># 获取指定的用户信息</span></span>
<span class="line"><span style="color:#9ECBFF;">│       ├── list.go</span><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;"># 查询用户列表</span></span>
<span class="line"><span style="color:#9ECBFF;">│       ├── login.go</span><span style="color:#E1E4E8;">             </span><span style="color:#6A737D;"># 用户登录</span></span>
<span class="line"><span style="color:#9ECBFF;">│       ├── update.go</span><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 更新用户</span></span>
<span class="line"><span style="color:#9ECBFF;">│       └── user.go</span><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;"># 存放用户handler公用的函数、结构体等</span></span>
<span class="line"><span style="color:#9ECBFF;">├── main.go</span><span style="color:#E1E4E8;">                      </span><span style="color:#6A737D;"># Go程序唯一入口</span></span>
<span class="line"><span style="color:#9ECBFF;">├── Makefile</span><span style="color:#E1E4E8;">                     </span><span style="color:#6A737D;"># Makefile文件，一般大型软件系统都是采用make来作为编译工具</span></span>
<span class="line"><span style="color:#9ECBFF;">├── model</span><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;"># 数据库相关的操作统一放在这里，包括数据库初始化和对表的增删改查</span></span>
<span class="line"><span style="color:#9ECBFF;">│   ├── init.go</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;"># 初始化和连接数据库</span></span>
<span class="line"><span style="color:#9ECBFF;">│   ├── model.go</span><span style="color:#E1E4E8;">                 </span><span style="color:#6A737D;"># 存放一些公用的go struct</span></span>
<span class="line"><span style="color:#9ECBFF;">│   └── user.go</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;"># 用户相关的数据库CURD操作</span></span>
<span class="line"><span style="color:#9ECBFF;">├── pkg</span><span style="color:#E1E4E8;">                          </span><span style="color:#6A737D;"># 引用的包</span></span>
<span class="line"><span style="color:#9ECBFF;">│   ├── auth</span><span style="color:#E1E4E8;">                     </span><span style="color:#6A737D;"># 认证包</span></span>
<span class="line"><span style="color:#9ECBFF;">│   │   └── auth.go</span></span>
<span class="line"><span style="color:#9ECBFF;">│   ├── constvar</span><span style="color:#E1E4E8;">                 </span><span style="color:#6A737D;"># 常量统一存放位置</span></span>
<span class="line"><span style="color:#9ECBFF;">│   │   └── constvar.go</span></span>
<span class="line"><span style="color:#9ECBFF;">│   ├── errno</span><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;"># 错误码存放位置</span></span>
<span class="line"><span style="color:#9ECBFF;">│   │   ├── code.go</span></span>
<span class="line"><span style="color:#9ECBFF;">│   │   └── errno.go</span></span>
<span class="line"><span style="color:#9ECBFF;">│   ├── token</span></span>
<span class="line"><span style="color:#9ECBFF;">│   │   └── token.go</span></span>
<span class="line"><span style="color:#9ECBFF;">│   └── version</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;"># 版本包</span></span>
<span class="line"><span style="color:#9ECBFF;">│       ├── base.go</span></span>
<span class="line"><span style="color:#9ECBFF;">│       ├── doc.go</span></span>
<span class="line"><span style="color:#9ECBFF;">│       └── version.go</span></span>
<span class="line"><span style="color:#9ECBFF;">├── README.md</span><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;"># API目录README</span></span>
<span class="line"><span style="color:#9ECBFF;">├── router</span><span style="color:#E1E4E8;">                       </span><span style="color:#6A737D;"># 路由相关处理</span></span>
<span class="line"><span style="color:#9ECBFF;">│   ├── middleware</span><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;"># API服务器用的是Gin Web框架，Gin中间件存放位置</span></span>
<span class="line"><span style="color:#9ECBFF;">│   │   ├── auth.go</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#9ECBFF;">│   │   ├── header.go</span></span>
<span class="line"><span style="color:#9ECBFF;">│   │   ├── logging.go</span></span>
<span class="line"><span style="color:#9ECBFF;">│   │   └── requestid.go</span></span>
<span class="line"><span style="color:#9ECBFF;">│   └── router.go</span></span>
<span class="line"><span style="color:#9ECBFF;">├── service</span><span style="color:#E1E4E8;">                      </span><span style="color:#6A737D;"># 实际业务处理函数存放位置</span></span>
<span class="line"><span style="color:#9ECBFF;">│   └── service.go</span></span>
<span class="line"><span style="color:#9ECBFF;">├── util</span><span style="color:#E1E4E8;">                         </span><span style="color:#6A737D;"># 工具类函数存放目录</span></span>
<span class="line"><span style="color:#9ECBFF;">│   ├── util.go</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#9ECBFF;">│   └── util_test.go</span></span>
<span class="line"><span style="color:#9ECBFF;">└── vendor</span><span style="color:#E1E4E8;">                         </span><span style="color:#6A737D;"># vendor目录用来管理依赖包</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">├── github.com</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">├── golang.org</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">├── gopkg.in</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">└── vendor.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">├── admin.sh</span><span style="color:#24292E;">                     </span><span style="color:#6A737D;"># 进程的start|stop|status|restart控制文件</span></span>
<span class="line"><span style="color:#032F62;">├── conf</span><span style="color:#24292E;">                         </span><span style="color:#6A737D;"># 配置文件统一存放目录</span></span>
<span class="line"><span style="color:#032F62;">│   ├── config.yaml</span><span style="color:#24292E;">              </span><span style="color:#6A737D;"># 配置文件</span></span>
<span class="line"><span style="color:#032F62;">│   ├── server.crt</span><span style="color:#24292E;">               </span><span style="color:#6A737D;"># TLS配置文件</span></span>
<span class="line"><span style="color:#032F62;">│   └── server.key</span></span>
<span class="line"><span style="color:#032F62;">├── config</span><span style="color:#24292E;">                       </span><span style="color:#6A737D;"># 专门用来处理配置和配置文件的Go package</span></span>
<span class="line"><span style="color:#032F62;">│   └── config.go</span><span style="color:#24292E;">                 </span></span>
<span class="line"><span style="color:#032F62;">├── db.sql</span><span style="color:#24292E;">                       </span><span style="color:#6A737D;"># 在部署新环境时，可以登录MySQL客户端，执行source db.sql创建数据库和表</span></span>
<span class="line"><span style="color:#032F62;">├── docs</span><span style="color:#24292E;">                         </span><span style="color:#6A737D;"># swagger文档，执行 swag init 生成的</span></span>
<span class="line"><span style="color:#032F62;">│   ├── docs.go</span></span>
<span class="line"><span style="color:#032F62;">│   └── swagger</span></span>
<span class="line"><span style="color:#032F62;">│       ├── swagger.json</span></span>
<span class="line"><span style="color:#032F62;">│       └── swagger.yaml</span></span>
<span class="line"><span style="color:#032F62;">├── handler</span><span style="color:#24292E;">                      </span><span style="color:#6A737D;"># 类似MVC架构中的C，用来读取输入，并将处理流程转发给实际的处理函数，最后返回结果</span></span>
<span class="line"><span style="color:#032F62;">│   ├── handler.go</span></span>
<span class="line"><span style="color:#032F62;">│   ├── sd</span><span style="color:#24292E;">                       </span><span style="color:#6A737D;"># 健康检查handler</span></span>
<span class="line"><span style="color:#032F62;">│   │   └── check.go</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#032F62;">│   └── user</span><span style="color:#24292E;">                     </span><span style="color:#6A737D;"># 核心：用户业务逻辑handler</span></span>
<span class="line"><span style="color:#032F62;">│       ├── create.go</span><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 新增用户</span></span>
<span class="line"><span style="color:#032F62;">│       ├── delete.go</span><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 删除用户</span></span>
<span class="line"><span style="color:#032F62;">│       ├── get.go</span><span style="color:#24292E;">               </span><span style="color:#6A737D;"># 获取指定的用户信息</span></span>
<span class="line"><span style="color:#032F62;">│       ├── list.go</span><span style="color:#24292E;">              </span><span style="color:#6A737D;"># 查询用户列表</span></span>
<span class="line"><span style="color:#032F62;">│       ├── login.go</span><span style="color:#24292E;">             </span><span style="color:#6A737D;"># 用户登录</span></span>
<span class="line"><span style="color:#032F62;">│       ├── update.go</span><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 更新用户</span></span>
<span class="line"><span style="color:#032F62;">│       └── user.go</span><span style="color:#24292E;">              </span><span style="color:#6A737D;"># 存放用户handler公用的函数、结构体等</span></span>
<span class="line"><span style="color:#032F62;">├── main.go</span><span style="color:#24292E;">                      </span><span style="color:#6A737D;"># Go程序唯一入口</span></span>
<span class="line"><span style="color:#032F62;">├── Makefile</span><span style="color:#24292E;">                     </span><span style="color:#6A737D;"># Makefile文件，一般大型软件系统都是采用make来作为编译工具</span></span>
<span class="line"><span style="color:#032F62;">├── model</span><span style="color:#24292E;">                        </span><span style="color:#6A737D;"># 数据库相关的操作统一放在这里，包括数据库初始化和对表的增删改查</span></span>
<span class="line"><span style="color:#032F62;">│   ├── init.go</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;"># 初始化和连接数据库</span></span>
<span class="line"><span style="color:#032F62;">│   ├── model.go</span><span style="color:#24292E;">                 </span><span style="color:#6A737D;"># 存放一些公用的go struct</span></span>
<span class="line"><span style="color:#032F62;">│   └── user.go</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;"># 用户相关的数据库CURD操作</span></span>
<span class="line"><span style="color:#032F62;">├── pkg</span><span style="color:#24292E;">                          </span><span style="color:#6A737D;"># 引用的包</span></span>
<span class="line"><span style="color:#032F62;">│   ├── auth</span><span style="color:#24292E;">                     </span><span style="color:#6A737D;"># 认证包</span></span>
<span class="line"><span style="color:#032F62;">│   │   └── auth.go</span></span>
<span class="line"><span style="color:#032F62;">│   ├── constvar</span><span style="color:#24292E;">                 </span><span style="color:#6A737D;"># 常量统一存放位置</span></span>
<span class="line"><span style="color:#032F62;">│   │   └── constvar.go</span></span>
<span class="line"><span style="color:#032F62;">│   ├── errno</span><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># 错误码存放位置</span></span>
<span class="line"><span style="color:#032F62;">│   │   ├── code.go</span></span>
<span class="line"><span style="color:#032F62;">│   │   └── errno.go</span></span>
<span class="line"><span style="color:#032F62;">│   ├── token</span></span>
<span class="line"><span style="color:#032F62;">│   │   └── token.go</span></span>
<span class="line"><span style="color:#032F62;">│   └── version</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;"># 版本包</span></span>
<span class="line"><span style="color:#032F62;">│       ├── base.go</span></span>
<span class="line"><span style="color:#032F62;">│       ├── doc.go</span></span>
<span class="line"><span style="color:#032F62;">│       └── version.go</span></span>
<span class="line"><span style="color:#032F62;">├── README.md</span><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># API目录README</span></span>
<span class="line"><span style="color:#032F62;">├── router</span><span style="color:#24292E;">                       </span><span style="color:#6A737D;"># 路由相关处理</span></span>
<span class="line"><span style="color:#032F62;">│   ├── middleware</span><span style="color:#24292E;">               </span><span style="color:#6A737D;"># API服务器用的是Gin Web框架，Gin中间件存放位置</span></span>
<span class="line"><span style="color:#032F62;">│   │   ├── auth.go</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#032F62;">│   │   ├── header.go</span></span>
<span class="line"><span style="color:#032F62;">│   │   ├── logging.go</span></span>
<span class="line"><span style="color:#032F62;">│   │   └── requestid.go</span></span>
<span class="line"><span style="color:#032F62;">│   └── router.go</span></span>
<span class="line"><span style="color:#032F62;">├── service</span><span style="color:#24292E;">                      </span><span style="color:#6A737D;"># 实际业务处理函数存放位置</span></span>
<span class="line"><span style="color:#032F62;">│   └── service.go</span></span>
<span class="line"><span style="color:#032F62;">├── util</span><span style="color:#24292E;">                         </span><span style="color:#6A737D;"># 工具类函数存放目录</span></span>
<span class="line"><span style="color:#032F62;">│   ├── util.go</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#032F62;">│   └── util_test.go</span></span>
<span class="line"><span style="color:#032F62;">└── vendor</span><span style="color:#24292E;">                         </span><span style="color:#6A737D;"># vendor目录用来管理依赖包</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">├── github.com</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">├── golang.org</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">├── gopkg.in</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">└── vendor.json</span></span></code></pre></div><p><code>Go API</code> 项目中，一般都会包括这些功能项：<code>Makefile</code> 文件、配置文件目录、<code>RESTful API</code> 服务器的 <code>handler</code> 目录、<code>model</code> 目录、工具类目录、<code>vendor</code> 目录，以及实际处理业务逻辑函数所存放的 <code>service</code> 目录。这些都在上述的代码结构中有列出，新加功能时将代码放入对应功能的目录/文件中，可以使整个项目代码结构更加清晰，非常有利于后期的查找和维护。</p><h3 id="_2-5-makefile-的规则" tabindex="-1">2.5 makefile 的规则 <a class="header-anchor" href="#_2-5-makefile-的规则" aria-label="Permalink to &quot;2.5 makefile 的规则&quot;">​</a></h3><p><a href="https://blog.csdn.net/wohu1104/article/details/123209272" target="_blank" rel="noreferrer">https://blog.csdn.net/wohu1104/article/details/123209272</a></p><h2 id="_3-hello-word" tabindex="-1">3. Hello Word <a class="header-anchor" href="#_3-hello-word" aria-label="Permalink to &quot;3. Hello Word&quot;">​</a></h2><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 一个项目中只能有一个入口函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//有引用必须调用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 一个项目中只能有一个入口函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//有引用必须调用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>数组</p><p>slice</p><p>struct使用场景，固定好的数据结构，不可以变更</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Order </span><span style="color:#F97583;">:=struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	Uid </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	Price </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	Type </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">	time </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	ProductId </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">}{}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Order </span><span style="color:#D73A49;">:=struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	Uid </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	Price </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	Type </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">	time </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	ProductId </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">}{}</span></span></code></pre></div><p>map使用场景，不用固定数据类型，可以随便增加减少</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//某个人情况</span></span>
<span class="line"><span style="color:#E1E4E8;">people </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}{</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;zhangsan&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;score&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//某个人分数</span></span>
<span class="line"><span style="color:#E1E4E8;">score</span><span style="color:#F97583;">:=map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;zhangsan&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;lisi&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;wangwu&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//某个人情况</span></span>
<span class="line"><span style="color:#24292E;">people </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}{</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;zhangsan&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;score&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//某个人分数</span></span>
<span class="line"><span style="color:#24292E;">score</span><span style="color:#D73A49;">:=map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;zhangsan&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;lisi&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;wangwu&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">}</span></span></code></pre></div>`,133),p=[e];function c(t,r,i,y,d,E){return a(),n("div",null,p)}const u=s(o,[["render",c]]);export{h as __pageData,u as default};
