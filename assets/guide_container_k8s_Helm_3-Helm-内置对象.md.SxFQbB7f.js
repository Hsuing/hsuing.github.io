import{_ as s,o as a,c as n,R as e}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"1. Helm内置对象","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/Helm/3-Helm-内置对象.md","filePath":"guide/container/k8s/Helm/3-Helm-内置对象.md","lastUpdated":1737367865000}'),l={name:"guide/container/k8s/Helm/3-Helm-内置对象.md"},p=e(`<h1 id="_1-helm内置对象" tabindex="-1">1. Helm内置对象 <a class="header-anchor" href="#_1-helm内置对象" aria-label="Permalink to &quot;1. Helm内置对象&quot;">​</a></h1><p>Release 对象</p><p>Values 对象</p><p>Chart 对象</p><p>Capabilities 对象</p><p>Template 对象</p><p><a href="https://helm.sh/zh/docs/chart_template_guide/builtin_objects/" target="_blank" rel="noreferrer">常用使用的</a></p><h2 id="_1-1-release" tabindex="-1">1.1 Release <a class="header-anchor" href="#_1-1-release" aria-label="Permalink to &quot;1.1 Release&quot;">​</a></h2><p>描述了版本发布自身的一些信息</p><table><thead><tr><th>内置</th><th>作用</th></tr></thead><tbody><tr><td>.Release.Name</td><td>release名称</td></tr><tr><td>.Release.Namespace</td><td>release命名空间</td></tr><tr><td>.Release.Revision</td><td>release版本号。起始是1，每次升级或回滚都会自增1</td></tr><tr><td>.Release.Service</td><td>release 服务的名称</td></tr><tr><td>.Release.IsUpgrade</td><td>如果当前操作是升级或回滚的话，该值为 true</td></tr><tr><td>.Release.IsInstall</td><td>如果当前操作是安装的话，该值为 true</td></tr></tbody></table><h2 id="_1-2-values" tabindex="-1">1.2 Values <a class="header-anchor" href="#_1-2-values" aria-label="Permalink to &quot;1.2 Values&quot;">​</a></h2><p>描述的是value.yaml 文件（定义变量的文件）中的内容，默认为空。使用Value 对象可以获取到value.yaml文件中已定义的任何变量数值</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Value 键值对 获取方式</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"> name1: test1 .Values.name1</span></span>
<span class="line"><span style="color:#e1e4e8;"> info:</span></span>
<span class="line"><span style="color:#e1e4e8;"> name2: test2 .Values.info.name2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Value 键值对 获取方式</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"> name1: test1 .Values.name1</span></span>
<span class="line"><span style="color:#24292e;"> info:</span></span>
<span class="line"><span style="color:#24292e;"> name2: test2 .Values.info.name2</span></span></code></pre></div><h2 id="_1-3-chart" tabindex="-1">1.3 Chart <a class="header-anchor" href="#_1-3-chart" aria-label="Permalink to &quot;1.3 Chart&quot;">​</a></h2><p>用于获取Chart.yaml 文件中的内容</p><p>对象名称 描述</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">.Chart.Name 获取Chart 的名称</span></span>
<span class="line"><span style="color:#e1e4e8;">.Chart.Version 获取Chart 的版本</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">.Chart.Name 获取Chart 的名称</span></span>
<span class="line"><span style="color:#24292e;">.Chart.Version 获取Chart 的版本</span></span></code></pre></div><h2 id="_1-4-capabilities" tabindex="-1">1.4 Capabilities <a class="header-anchor" href="#_1-4-capabilities" aria-label="Permalink to &quot;1.4 Capabilities&quot;">​</a></h2><p>提供了关于kubernetes 集群相关的信息</p><table><thead><tr><th>对象名称</th><th>描述</th></tr></thead><tbody><tr><td>.Capabilities.APIVersions</td><td>返回kubernetes集群 API 版本信息集合</td></tr><tr><td>.Capabilities.APIVersions.Has $version</td><td>用于检测指定的版本或资源在k8s集群中是否可用，例如：apps/v1/Deployment</td></tr><tr><td>.Capabilities.KubeVersion和.Capabilities.KubeVersion.Version</td><td>用于获取kubernetes 的版本号</td></tr><tr><td>.Capabilities.KubeVersion.Major</td><td>获取kubernetes 的主版本号</td></tr><tr><td>.Capabilities.KubeVersion.Minor</td><td>获取kubernetes 的小版本号</td></tr></tbody></table><h2 id="_1-5-template" tabindex="-1">1.5 Template <a class="header-anchor" href="#_1-5-template" aria-label="Permalink to &quot;1.5 Template&quot;">​</a></h2><p>用于获取当前模板的信息，它包含如下两个对象</p><table><thead><tr><th>对象名称</th><th>描述</th></tr></thead><tbody><tr><td>.Template.Name</td><td>用于获取当前模板的名称和路径（例如：mychart/templates/mytemplate.yaml）</td></tr><tr><td>.Template.BasePath</td><td>用于获取当前模板的路径（例如：mychart/templates）</td></tr></tbody></table><h2 id="_1-6-helm案例" tabindex="-1">1.6 helm案例 <a class="header-anchor" href="#_1-6-helm案例" aria-label="Permalink to &quot;1.6 helm案例&quot;">​</a></h2><h3 id="调用templates" tabindex="-1">调用templates <a class="header-anchor" href="#调用templates" aria-label="Permalink to &quot;调用templates&quot;">​</a></h3><ul><li>创建chart</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">helm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mychart</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">helm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mychart</span></span></code></pre></div><ul><li>删除Template下的所有文件</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">cd mychart</span></span>
<span class="line"><span style="color:#e1e4e8;">cd templates</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">cd mychart</span></span>
<span class="line"><span style="color:#24292e;">cd templates</span></span></code></pre></div><ul><li>创建yaml</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">configMap.yaml</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#9ECBFF;">EOF</span></span>
<span class="line"><span style="color:#9ECBFF;">apiVersion: v1</span></span>
<span class="line"><span style="color:#9ECBFF;">kind: ConfigMap</span></span>
<span class="line"><span style="color:#9ECBFF;">metadata:</span></span>
<span class="line"><span style="color:#9ECBFF;">  name: {{ .Release.Name }}-configmap</span></span>
<span class="line"><span style="color:#9ECBFF;">namespace: {{ .Release.Namespace }}</span></span>
<span class="line"><span style="color:#9ECBFF;">data:</span></span>
<span class="line"><span style="color:#9ECBFF;">  value1: &quot;{{ .Release.IsUpgrade }}&quot; #如果当前操作是升级或回滚的话,该值为true</span></span>
<span class="line"><span style="color:#9ECBFF;">  value2: &quot;{{ .Release.IsInstall }}&quot; #如果当前操作是安装的话,该值为true</span></span>
<span class="line"><span style="color:#9ECBFF;">  value3: &quot;{{ .Release.Revision }}&quot; #获取此次修订的版本号</span></span>
<span class="line"><span style="color:#9ECBFF;">  value4: &quot;{{ .Release.Service }}&quot; #获取当前模板的服务名</span></span>
<span class="line"><span style="color:#9ECBFF;">EOF</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">configMap.yaml</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">EOF</span></span>
<span class="line"><span style="color:#032F62;">apiVersion: v1</span></span>
<span class="line"><span style="color:#032F62;">kind: ConfigMap</span></span>
<span class="line"><span style="color:#032F62;">metadata:</span></span>
<span class="line"><span style="color:#032F62;">  name: {{ .Release.Name }}-configmap</span></span>
<span class="line"><span style="color:#032F62;">namespace: {{ .Release.Namespace }}</span></span>
<span class="line"><span style="color:#032F62;">data:</span></span>
<span class="line"><span style="color:#032F62;">  value1: &quot;{{ .Release.IsUpgrade }}&quot; #如果当前操作是升级或回滚的话,该值为true</span></span>
<span class="line"><span style="color:#032F62;">  value2: &quot;{{ .Release.IsInstall }}&quot; #如果当前操作是安装的话,该值为true</span></span>
<span class="line"><span style="color:#032F62;">  value3: &quot;{{ .Release.Revision }}&quot; #获取此次修订的版本号</span></span>
<span class="line"><span style="color:#032F62;">  value4: &quot;{{ .Release.Service }}&quot; #获取当前模板的服务名</span></span>
<span class="line"><span style="color:#032F62;">EOF</span></span></code></pre></div><ul><li>执行</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#不真正执行，只是试运行看是否能运行</span></span>
<span class="line"><span style="color:#B392F0;">helm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myconfigmap1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./mychart/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--debug</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--dry-run</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#不真正执行，只是试运行看是否能运行</span></span>
<span class="line"><span style="color:#6F42C1;">helm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myconfigmap1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./mychart/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--debug</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--dry-run</span></span></code></pre></div><h3 id="调用values对象" tabindex="-1">调用Values对象 <a class="header-anchor" href="#调用values对象" aria-label="Permalink to &quot;调用Values对象&quot;">​</a></h3><p>清空里面的初始化信息，设置成我们需要的（变量名和赋值）（里面默认的信息都是初始化信息）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">vim /root/mychart/values.yaml</span></span>
<span class="line"><span style="color:#e1e4e8;">name1: test1</span></span>
<span class="line"><span style="color:#e1e4e8;">info:</span></span>
<span class="line"><span style="color:#e1e4e8;">  name2: test2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">vim /root/mychart/values.yaml</span></span>
<span class="line"><span style="color:#24292e;">name1: test1</span></span>
<span class="line"><span style="color:#24292e;">info:</span></span>
<span class="line"><span style="color:#24292e;">  name2: test2</span></span></code></pre></div><ul><li>创建yaml</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">cat&gt; /root/mychart/templates/configmap.yaml &lt;&lt;EOF</span></span>
<span class="line"><span style="color:#e1e4e8;">name1: test1</span></span>
<span class="line"><span style="color:#e1e4e8;">info:</span></span>
<span class="line"><span style="color:#e1e4e8;">  name2: test2</span></span>
<span class="line"><span style="color:#e1e4e8;">EOF</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">cat&gt; /root/mychart/templates/configmap.yaml &lt;&lt;EOF</span></span>
<span class="line"><span style="color:#24292e;">name1: test1</span></span>
<span class="line"><span style="color:#24292e;">info:</span></span>
<span class="line"><span style="color:#24292e;">  name2: test2</span></span>
<span class="line"><span style="color:#24292e;">EOF</span></span></code></pre></div><ul><li>创建Template</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">apiVersion: v1</span></span>
<span class="line"><span style="color:#e1e4e8;">kind: ConfigMap</span></span>
<span class="line"><span style="color:#e1e4e8;">metadata:</span></span>
<span class="line"><span style="color:#e1e4e8;">  name: {{ .Release.Name }}-configmap</span></span>
<span class="line"><span style="color:#e1e4e8;">namespace: {{ .Release.Namespace }}</span></span>
<span class="line"><span style="color:#e1e4e8;">data:</span></span>
<span class="line"><span style="color:#e1e4e8;">  value1: &quot;{{ .Values.name1 }}&quot; #获取values.yaml文件中定义的变量的值</span></span>
<span class="line"><span style="color:#e1e4e8;">  value2: &quot;{{ .Values.info.name2 }}&quot; #获取values.yaml文件中定义的层级变量的值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">apiVersion: v1</span></span>
<span class="line"><span style="color:#24292e;">kind: ConfigMap</span></span>
<span class="line"><span style="color:#24292e;">metadata:</span></span>
<span class="line"><span style="color:#24292e;">  name: {{ .Release.Name }}-configmap</span></span>
<span class="line"><span style="color:#24292e;">namespace: {{ .Release.Namespace }}</span></span>
<span class="line"><span style="color:#24292e;">data:</span></span>
<span class="line"><span style="color:#24292e;">  value1: &quot;{{ .Values.name1 }}&quot; #获取values.yaml文件中定义的变量的值</span></span>
<span class="line"><span style="color:#24292e;">  value2: &quot;{{ .Values.info.name2 }}&quot; #获取values.yaml文件中定义的层级变量的值</span></span></code></pre></div><ul><li>执行</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">helm install myconfigmap2 ./mychart/ --debug --dry-run</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">helm install myconfigmap2 ./mychart/ --debug --dry-run</span></span></code></pre></div><h3 id="调用chart" tabindex="-1">调用Chart <a class="header-anchor" href="#调用chart" aria-label="Permalink to &quot;调用Chart&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">cat /root/mychart/Chart.yaml |grep -vE &quot;#|^$&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">apiVersion: v2</span></span>
<span class="line"><span style="color:#e1e4e8;">name: mychart</span></span>
<span class="line"><span style="color:#e1e4e8;">description: A Helm chart for Kubernetes</span></span>
<span class="line"><span style="color:#e1e4e8;">type: application</span></span>
<span class="line"><span style="color:#e1e4e8;">version: 0.1.0</span></span>
<span class="line"><span style="color:#e1e4e8;">appVersion: &quot;1.16.0&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">cat /root/mychart/Chart.yaml |grep -vE &quot;#|^$&quot;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">apiVersion: v2</span></span>
<span class="line"><span style="color:#24292e;">name: mychart</span></span>
<span class="line"><span style="color:#24292e;">description: A Helm chart for Kubernetes</span></span>
<span class="line"><span style="color:#24292e;">type: application</span></span>
<span class="line"><span style="color:#24292e;">version: 0.1.0</span></span>
<span class="line"><span style="color:#24292e;">appVersion: &quot;1.16.0&quot;</span></span></code></pre></div><ul><li>创建yaml</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">vim /root/mychart/templates/configmap.yaml</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">apiVersion: v1</span></span>
<span class="line"><span style="color:#e1e4e8;">kind: ConfigMap</span></span>
<span class="line"><span style="color:#e1e4e8;">metadata:</span></span>
<span class="line"><span style="color:#e1e4e8;">name: {{ .Release.Name }}-configmap</span></span>
<span class="line"><span style="color:#e1e4e8;">namespace: {{ .Release.Namespace }}</span></span>
<span class="line"><span style="color:#e1e4e8;">data: </span></span>
<span class="line"><span style="color:#e1e4e8;">value1: &quot;{{ .Chart.Name }}&quot; #获取Chart的名称,获取Chart.yaml文件中定义的变量的值</span></span>
<span class="line"><span style="color:#e1e4e8;">value2: &quot;{{ .Chart.Version }}&quot; #获取Chart的版本,获取Chart.yaml文件中定义的变量的值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">vim /root/mychart/templates/configmap.yaml</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">apiVersion: v1</span></span>
<span class="line"><span style="color:#24292e;">kind: ConfigMap</span></span>
<span class="line"><span style="color:#24292e;">metadata:</span></span>
<span class="line"><span style="color:#24292e;">name: {{ .Release.Name }}-configmap</span></span>
<span class="line"><span style="color:#24292e;">namespace: {{ .Release.Namespace }}</span></span>
<span class="line"><span style="color:#24292e;">data: </span></span>
<span class="line"><span style="color:#24292e;">value1: &quot;{{ .Chart.Name }}&quot; #获取Chart的名称,获取Chart.yaml文件中定义的变量的值</span></span>
<span class="line"><span style="color:#24292e;">value2: &quot;{{ .Chart.Version }}&quot; #获取Chart的版本,获取Chart.yaml文件中定义的变量的值</span></span></code></pre></div><ul><li>执行</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">helm install myconfigmap3 ./mychart/ --debug --dry-run</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">helm install myconfigmap3 ./mychart/ --debug --dry-run</span></span></code></pre></div><h3 id="调用capabilities" tabindex="-1">调用Capabilities <a class="header-anchor" href="#调用capabilities" aria-label="Permalink to &quot;调用Capabilities&quot;">​</a></h3><ul><li>创建yaml</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">vim /root/mychart/templates/configmap.yaml</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ConfigMap</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: {{ </span><span style="color:#9ECBFF;">.Release.Name</span><span style="color:#E1E4E8;"> }}</span><span style="color:#9ECBFF;">-configmap</span></span>
<span class="line"><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: {{ </span><span style="color:#9ECBFF;">.Release.Namespace</span><span style="color:#E1E4E8;"> }}</span></span>
<span class="line"><span style="color:#85E89D;">data</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">value1</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;{{ .Capabilities.APIVersions }}&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#返回kubernetes集群 API 版本信息集合</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">value2</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;{{ .Capabilities.APIVersions.Has &quot;apps/v1/Deployment&quot; }}&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#用于检测指定的版本或资源在k8s集群中是否可用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">value3</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;{{ .Capabilities.KubeVersion.Version }}&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#用于获取kubernetes的版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">value4</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;{{ .Capabilities.KubeVersion.Major }}&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#获取kubernetes 的主版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">value5</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;{{ .Capabilities.KubeVersion.Minor }}&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#获取kubernetes 的小版本号</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">vim /root/mychart/templates/configmap.yaml</span><span style="color:#24292E;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ConfigMap</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: {{ </span><span style="color:#032F62;">.Release.Name</span><span style="color:#24292E;"> }}</span><span style="color:#032F62;">-configmap</span></span>
<span class="line"><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: {{ </span><span style="color:#032F62;">.Release.Namespace</span><span style="color:#24292E;"> }}</span></span>
<span class="line"><span style="color:#22863A;">data</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">value1</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;{{ .Capabilities.APIVersions }}&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#返回kubernetes集群 API 版本信息集合</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">value2</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;{{ .Capabilities.APIVersions.Has &quot;apps/v1/Deployment&quot; }}&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#用于检测指定的版本或资源在k8s集群中是否可用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">value3</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;{{ .Capabilities.KubeVersion.Version }}&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#用于获取kubernetes的版本号</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">value4</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;{{ .Capabilities.KubeVersion.Major }}&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#获取kubernetes 的主版本号</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">value5</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;{{ .Capabilities.KubeVersion.Minor }}&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#获取kubernetes 的小版本号</span></span></code></pre></div><ul><li>执行</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"> helm install myconfigmap4 ./mychart/ --debug --dry-run</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"> helm install myconfigmap4 ./mychart/ --debug --dry-run</span></span></code></pre></div><h3 id="调用template" tabindex="-1">调用Template <a class="header-anchor" href="#调用template" aria-label="Permalink to &quot;调用Template&quot;">​</a></h3><ul><li>创建yaml</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vim /root/mychart/templates/configmap.yaml</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ConfigMap</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: {{ </span><span style="color:#9ECBFF;">.Release.Name</span><span style="color:#E1E4E8;"> }}</span><span style="color:#9ECBFF;">-configmap</span></span>
<span class="line"><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: {{ </span><span style="color:#9ECBFF;">.Release.Namespace</span><span style="color:#E1E4E8;"> }}</span></span>
<span class="line"><span style="color:#85E89D;">data</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">value1</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;{{ .Template.Name }}&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#用于获取当前模板的名称和路径（例如：mychart/templates/configmap.yaml）</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">value2</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;{{ .Template.BasePath }}&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#用于获取当前模板的路径（例如：mychart/templates）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">vim /root/mychart/templates/configmap.yaml</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ConfigMap</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: {{ </span><span style="color:#032F62;">.Release.Name</span><span style="color:#24292E;"> }}</span><span style="color:#032F62;">-configmap</span></span>
<span class="line"><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: {{ </span><span style="color:#032F62;">.Release.Namespace</span><span style="color:#24292E;"> }}</span></span>
<span class="line"><span style="color:#22863A;">data</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">value1</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;{{ .Template.Name }}&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#用于获取当前模板的名称和路径（例如：mychart/templates/configmap.yaml）</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">value2</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;{{ .Template.BasePath }}&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#用于获取当前模板的路径（例如：mychart/templates）</span></span></code></pre></div><ul><li>执行</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">helm install myconfigmap5 ./mychart/ --debug --dry-run</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">helm install myconfigmap5 ./mychart/ --debug --dry-run</span></span></code></pre></div>`,58),o=[p];function t(c,r,i,y,d,u){return a(),n("div",null,o)}const E=s(l,[["render",t]]);export{h as __pageData,E as default};
