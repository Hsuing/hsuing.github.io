import{_ as s,o as a,c as o,R as l}from"./chunks/framework.zUbWieqp.js";const u=JSON.parse('{"title":"0. 表达式","description":"","frontmatter":{},"headers":[],"relativePath":"guide/go/Terraform/18-function.md","filePath":"guide/go/Terraform/18-function.md","lastUpdated":1754397935000}'),e={name:"guide/go/Terraform/18-function.md"},t=l(`<h1 id="_0-表达式" tabindex="-1">0. <a href="https://developer.hashicorp.com/terraform/language/expressions" target="_blank" rel="noreferrer">表达式</a> <a class="header-anchor" href="#_0-表达式" aria-label="Permalink to &quot;0. [表达式](https://developer.hashicorp.com/terraform/language/expressions)&quot;">​</a></h1><h2 id="条件表达式" tabindex="-1">条件表达式 <a class="header-anchor" href="#条件表达式" aria-label="Permalink to &quot;条件表达式&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">condition</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">true_val</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">false_val</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">condition</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">条件</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">（返回值true/</span><span style="color:#79B8FF;">false</span><span style="color:#9ECBFF;">）</span></span>
<span class="line"><span style="color:#B392F0;">true_val</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">条件为true的值</span></span>
<span class="line"><span style="color:#B392F0;">false_val</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">条件为false的值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">condition</span><span style="color:#24292E;"> </span><span style="color:#032F62;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">true_val</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">false_val</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">condition</span><span style="color:#24292E;"> </span><span style="color:#032F62;">条件</span><span style="color:#24292E;"> </span><span style="color:#032F62;">（返回值true/</span><span style="color:#005CC5;">false</span><span style="color:#032F62;">）</span></span>
<span class="line"><span style="color:#6F42C1;">true_val</span><span style="color:#24292E;"> </span><span style="color:#032F62;">条件为true的值</span></span>
<span class="line"><span style="color:#6F42C1;">false_val</span><span style="color:#24292E;"> </span><span style="color:#032F62;">条件为false的值</span></span></code></pre></div><p>比如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">var.region != &quot;&quot; ? var.region : &quot;cn-beijing&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">var.region != &quot;&quot; ? var.region : &quot;cn-beijing&quot;</span></span></code></pre></div><p>作用是：<strong>如果变量 <code>var.region</code> 非空字符串，就使用它本身；否则使用默认值 <code>&quot;cn-beijing&quot;</code></strong>。</p><table><thead><tr><th>部分</th><th>含义</th></tr></thead><tbody><tr><td><code>var.region != &quot;&quot;</code></td><td>判断变量 <code>region</code> 是否不等于空字符串</td></tr><tr><td><code>?</code></td><td>如果条件成立（为 true）</td></tr><tr><td><code>var.region</code></td><td>返回 region 的值</td></tr><tr><td><code>:</code></td><td>否则（如果条件为 false）</td></tr><tr><td><code>&quot;cn-beijing&quot;</code></td><td>返回字符串 <code>&quot;cn-beijing&quot;</code></td></tr></tbody></table><h2 id="for表达式" tabindex="-1">for表达式 <a class="header-anchor" href="#for表达式" aria-label="Permalink to &quot;for表达式&quot;">​</a></h2><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[ </span><span style="color:#FDAEB7;font-style:italic;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">VAR</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">OBJECT</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">VAR</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">[ </span><span style="color:#FDAEB7;font-style:italic;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">INDEX</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">VAR</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">OBJECT:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${INDEX}=\${VAR}&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[ </span><span style="color:#B31D28;font-style:italic;">for</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">VAR</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">in</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">OBJECT</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">:</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">VAR</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[ </span><span style="color:#B31D28;font-style:italic;">for</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">INDEX</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">VAR</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">in</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">OBJECT:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${INDEX}=\${VAR}&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>借助for表达式可以对数据进行处理，生成新的数据对象；</p><h2 id="splat表达式" tabindex="-1">splat表达式 <a class="header-anchor" href="#splat表达式" aria-label="Permalink to &quot;splat表达式&quot;">​</a></h2><p>splat 表达式提供了一种更简洁的方式来表达可以用for表达式执行的常见操作。</p><h1 id="_1-引用命名值" tabindex="-1">1. 引用命名值 <a class="header-anchor" href="#_1-引用命名值" aria-label="Permalink to &quot;1. 引用命名值&quot;">​</a></h1><p>Terraform 中定义了多种命名值，表达式中的每一个命名值都关联到一个具体的值，我们可以用单一命名值作为一个表达式，或是组合多个命名值来计算出一个新值。</p><p>命名值有如下种类：</p><ul><li><p><code>&lt;RESOURCE TYPE&gt;.&lt;NAME&gt;</code>：表示一个资源对象。凡是不符合后面列出的命名值模式的表达式都会被 Terraform 解释为一个托管资源。如果资源声明了 <code>count</code> 元参数，那么该表达式表示的是一个对象实例的 <code>list</code>。如果资源声明了 <code>for_each</code> 元参数，那么该表达式表示的是一个对象实例的 <code>map</code>。</p></li><li><p><code>var.&lt;NAME&gt;</code>：表示一个输入变量</p></li><li><p><code>local.&lt;NAME&gt;</code>：表示一个局部值</p></li><li><p><code>module.&lt;MODULE_NAME&gt;.&lt;OUTPUT_NAME&gt;</code>：表示一个模块的一个输出值</p></li><li><p><code>data.&lt;DATA_TYPE&gt;.&lt;NAME&gt;</code>：表示一个数据源实例。如果数据源声明了 <code>count</code> 元参数，那么该表达式表示的是一个数据源实例 <code>list</code>。如果数据源声明了 <code>for_each</code> 元参数，那么该表达式表示的是一个数据源实例 <code>map</code>。</p></li><li><p><code>path.module</code>：表示当前模块在文件系统中的路径</p></li><li><p><code>path.root</code>：表示根模块(调用 Terraform 命令行执行的代码文件所在的模块)在文件系统中的路径</p></li><li><p><code>path.cwd</code>：表示当前工作目录的路径。一般来说该路径等同于 <code>path.root</code>，但在调用 Terraform 命令行时如果指定了代码路径，那么二者将会不同。</p></li></ul><h1 id="_2-局部命名值" tabindex="-1">2. 局部命名值 <a class="header-anchor" href="#_2-局部命名值" aria-label="Permalink to &quot;2. 局部命名值&quot;">​</a></h1><p>在某些特定表达式或上下文当中，有一些特殊的命名值可以被使用，他们是局部命名值。几种比较常见的局部命名值有：</p><ul><li><code>count.index</code>：表达当前 <code>count</code> 下标序号</li><li><code>each.key</code>：表达当前 <code>for_each</code> 迭代器实例</li><li><code>self</code>：在预置器中指代声明预置器的资源</li></ul><p><a href="https://www.cloudbolt.io/terraform-best-practices/terraform-for-loops/" target="_blank" rel="noreferrer">https://www.cloudbolt.io/terraform-best-practices/terraform-for-loops/</a></p>`,20),n=[t];function p(c,r,i,d,E,y){return a(),o("div",null,n)}const f=s(e,[["render",p]]);export{u as __pageData,f as default};
