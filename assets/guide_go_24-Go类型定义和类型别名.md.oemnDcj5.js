import{_ as s,o as a,c as n,R as p}from"./chunks/framework.zUbWieqp.js";const u=JSON.parse('{"title":"1.go语言类型定义","description":"","frontmatter":{},"headers":[],"relativePath":"guide/go/24-Go类型定义和类型别名.md","filePath":"guide/go/24-Go类型定义和类型别名.md","lastUpdated":1701229860000}'),l={name:"guide/go/24-Go类型定义和类型别名.md"},o=p(`<h1 id="_1-go语言类型定义" tabindex="-1">1.go语言类型定义 <a class="header-anchor" href="#_1-go语言类型定义" aria-label="Permalink to &quot;1.go语言类型定义&quot;">​</a></h1><ul><li>类型定义语法</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewType</span><span style="color:#E1E4E8;"> Type</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewType</span><span style="color:#24292E;"> Type</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Myint</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i Myint</span></span>
<span class="line"><span style="color:#E1E4E8;">	i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;i: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;"> ,i:</span><span style="color:#79B8FF;">%T</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, i, i)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Myint</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i Myint</span></span>
<span class="line"><span style="color:#24292E;">	i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;i: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;"> ,i:</span><span style="color:#005CC5;">%T</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, i, i)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h1 id="_2-go语言类型别名" tabindex="-1">2.go语言类型别名 <a class="header-anchor" href="#_2-go语言类型别名" aria-label="Permalink to &quot;2.go语言类型别名&quot;">​</a></h1><ul><li>语法</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewType</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Type</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewType</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Type</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Myint</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i Myint</span></span>
<span class="line"><span style="color:#E1E4E8;">	i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;i: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;"> ,i:</span><span style="color:#79B8FF;">%T</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, i, i)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Myint</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i Myint</span></span>
<span class="line"><span style="color:#24292E;">	i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;i: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;"> ,i:</span><span style="color:#005CC5;">%T</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, i, i)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>类型定义和类型别名的区别</li></ul><p>1.类型定义相当于定义了一个全新的类型，与之前的类型不同；但是类型别名并没有定义一个新的类型，而是使用一个别名来替换之前的类型</p><ol start="2"><li>类型别名只会在代码中存在，在编译完成之后并不会存在该别名</li><li>因为类型别名和原来类型是一致的，所以原来类型所拥有的方法，类型别名中也<code>可以调用</code>，但是如果是重新定义的一个类型，那么<code>不可以</code>调用之前的任何方法。</li></ol>`,11),e=[o];function t(c,r,y,i,E,F){return a(),n("div",null,e)}const g=s(l,[["render",t]]);export{u as __pageData,g as default};
