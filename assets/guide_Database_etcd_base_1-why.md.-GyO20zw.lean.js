import{_ as t,o as a,c as s,k as e}from"./chunks/framework.zUbWieqp.js";const O=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Database/etcd/base/1-why.md","filePath":"guide/Database/etcd/base/1-why.md","lastUpdated":1703141608000}'),o={name:"guide/Database/etcd/base/1-why.md"},n=e("p",null,"让我们一起穿越回 2013 年，看看 etcd 最初是在什么业务场景下被设计出来的？",-1),c=e("p",null,"013 年，有一个叫 CoreOS 的创业团队，他们构建了一个产品，Container Linux，它是一个开源、轻量级的操作系统，侧重自动化、快速部署应用服务，并要求应用程序都在容器中运行，同时提供集群化的管理方案，用户管理服务就像单机一样方便。他们希望在重启任意一节点的时候，用户的服务不会因此而宕机，导致无法提供服务，因此需要运行多个副本。但是多个副本之间如何协调，如何避免变更的时候所有副本不可用呢？为了解决这个问题，CoreOS 团队需要一个协调服务来存储服务配置信息、提供分布式锁等能力。怎么办呢？当然是分析业务场景、痛点、核心目标，然后是基于目标进行方案选型，评估是选择社区开源方案还是自己造轮子。这其实就是我们遇到棘手问题时的通用解决思路，CoreOS 团队同样如此。",-1),d=e("p",null,"假设你是 CoreOS 团队成员，你认为在这样的业务场景下，理想中的解决方案应满足哪些目标呢？",-1),r=e("p",null,"理想状态下大概需要满足以下五个目标：",-1),_=e("p",null,"1.可用性角度：高可用。协调服务作为集群的控制面存储，它保存了各个服务的部署、运行信息。若它故障，可能会导致集群无法变更、服务副本数无法协调。业务服务若此时出现故障，无法创建新的副本，可能会影响用户数据面",-1),i=[n,c,d,r,_];function l(p,h,u,m,f,b){return a(),s("div",null,i)}const S=t(o,[["render",l]]);export{O as __pageData,S as default};
