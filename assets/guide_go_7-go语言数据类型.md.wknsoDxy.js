import{_ as s,o as a,c as n,R as o}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"1.Go数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"guide/go/7-go语言数据类型.md","filePath":"guide/go/7-go语言数据类型.md","lastUpdated":1701942742000}'),t={name:"guide/go/7-go语言数据类型.md"},p=o(`<h1 id="_1-go数据类型" tabindex="-1">1.Go数据类型 <a class="header-anchor" href="#_1-go数据类型" aria-label="Permalink to &quot;1.Go数据类型&quot;">​</a></h1><p><strong>Go语言是一种静态类型的编程语言</strong>，在Go编程语言中，数据类型用于声明函数和变量。数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。编译器在进行编译的时候，就要知道每个值的类型，这样编译器就知道要为这个值分配多少内存，并且知道这段分配的内存表示什么。</p><table><thead><tr><th>类型</th><th>详解</th></tr></thead><tbody><tr><td>布尔型</td><td>布尔型的值只可以是常量 true 或者 false。</td></tr><tr><td>数字类型</td><td>整型 int 和浮点型 float。Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td></tr><tr><td>字符串类型</td><td>字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td></tr><tr><td>派生类型</td><td>(a) 指针类型（Pointer）(b) 数组类型© 结构化类型(struct)(d) Channel 类型(e) 函数类型(f) 切片类型(g) 接口类型（interface）(h) Map 类型</td></tr></tbody></table><h1 id="_2-数据类型转换" tabindex="-1">2.数据类型转换 <a class="header-anchor" href="#_2-数据类型转换" aria-label="Permalink to &quot;2.数据类型转换&quot;">​</a></h1><p>在必要以及可行的情况下，一个类型的值可以被转换成另一种类型的值。<strong>由于Go语言不存在隐式类型转换，因此所有的类型转换都必须显式的声明：</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">valueOfTypeB </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">typeB</span><span style="color:#E1E4E8;">(valueOfTypeA)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">valueOfTypeB </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">typeB</span><span style="color:#24292E;">(valueOfTypeA)</span></span></code></pre></div><p>类型B的值=类型B(类型A的值)</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> main {</span></span>
<span class="line"><span style="color:#E1E4E8;">	a：</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5.0</span><span style="color:#6A737D;">//float</span></span>
<span class="line"><span style="color:#E1E4E8;">	b</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">(a）</span><span style="color:#6A737D;">// 转为int</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%T</span><span style="color:#9ECBFF;">,</span><span style="color:#79B8FF;">%f\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">，a,a)</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%T</span><span style="color:#9ECBFF;">,</span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">，b，b)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> main {</span></span>
<span class="line"><span style="color:#24292E;">	a：</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5.0</span><span style="color:#6A737D;">//float</span></span>
<span class="line"><span style="color:#24292E;">	b</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(a）</span><span style="color:#6A737D;">// 转为int</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%T</span><span style="color:#032F62;">,</span><span style="color:#005CC5;">%f\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">，a,a)</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%T</span><span style="color:#032F62;">,</span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">，b，b)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>类型转换只能在定义正确的情况下转换成功，例如从一个取值范围较小的类型转换到一个取值范围较大的类型（将int16转换为int32）。当从一个取值范围较大的类型转换到取值范围较小的类型时（将int32转换为int16或将float32转换为int），会发生精度丢失（截断）的情况。</p>`,9),l=[p];function e(c,r,y,i,d,E){return a(),n("div",null,l)}const u=s(t,[["render",e]]);export{h as __pageData,u as default};
