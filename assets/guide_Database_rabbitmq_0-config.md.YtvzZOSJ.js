import{_ as t,o as e,c as a,R as s}from"./chunks/framework.zUbWieqp.js";const u=JSON.parse('{"title":"一、 rabbitmq 生产部署","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Database/rabbitmq/0-config.md","filePath":"guide/Database/rabbitmq/0-config.md","lastUpdated":1710405635000}'),r={name:"guide/Database/rabbitmq/0-config.md"},l=s(`<p>官方文档，<a href="https://www.rabbitmq.com/configure.html" target="_blank" rel="noreferrer">https://www.rabbitmq.com/configure.html</a></p><h1 id="一、-rabbitmq-生产部署" tabindex="-1">一、 rabbitmq 生产部署 <a class="header-anchor" href="#一、-rabbitmq-生产部署" aria-label="Permalink to &quot;一、 rabbitmq 生产部署&quot;">​</a></h1><ul><li>1.1 rabbitmq.conf</li><li>1.2 advanced.config</li><li>1.3 rabbitmq-env.conf</li><li>1.4 在生产环境中不适用的策略</li></ul><p>RabbitMQ 常用的三种自定义服务器的通用方法：</p><ul><li>配置文件 rabbitmq.conf</li><li>环境变量文件 rabbitmq-env.conf</li><li>补充配置文件 advanced.config</li></ul><p>rabbitmq.conf和rabbitmq-env.conf的位置</p><ul><li>在二进制安装中路径是在 ：安装目录下的/etc/rabbitmq/</li><li>rpm 安装： /etc/rabbitmq/</li></ul><p>如果rabbitmq.conf和rabbitmq-env.conf 的两个文件不存在，那么我们可以创建该文件，然后我们可以通过环境变量 指定该文件的位置。</p><p>补充 ：</p><ul><li>rabbitmqctl rabbitmqctl 是管理虚拟主机和用户权限的工具</li><li>rabbitmq-plugins 是管理插件的工具</li></ul><h2 id="_1-1-rabbitmq-conf" tabindex="-1">1.1 rabbitmq.conf <a class="header-anchor" href="#_1-1-rabbitmq-conf" aria-label="Permalink to &quot;1.1 rabbitmq.conf&quot;">​</a></h2><p>在rabbitmq 3.7.0 之前，rabbitmq.conf 使用了Erlang语法配置格式，新的版本使用了sysctl 格式.</p><p>sysctl 语法：</p><ul><li>单个信息都在一行里面</li><li>配置信息以key value 的形式保存。</li><li>‘#’开头表示注释</li></ul><p>配置属性和描述（<a href="http://www.rabbitmq.com/configure.html#config-items" target="_blank" rel="noreferrer">官网链接</a>）</p><table><thead><tr><th>属性</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>listeners</td><td>要监听 AMQP 0-9-1 and AMQP 1.0 的端口</td><td>listeners.tcp.default = 5672</td></tr><tr><td>num_acceptors.tcp</td><td>接受tcp连接的erlang 进程数</td><td>num_acceptors.tcp = 10</td></tr><tr><td>handshake_timeout</td><td>AMQP 0-9-1 超时时间，也就是最大的连接时间，单位毫秒</td><td>handshake_timeout = 10000</td></tr><tr><td>listeners.ssl</td><td>启用TLS的协议</td><td>默认值为none</td></tr><tr><td>num_acceptors.ssl</td><td>接受基于TLS协议的连接的erlang 进程数</td><td>num_acceptors.ssl = 10</td></tr><tr><td>ssl_options</td><td>TLS 配置</td><td>ssl_options =none</td></tr><tr><td>ssl_handshake_timeout</td><td>TLS 连接超时时间 单位为毫秒</td><td>ssl_handshake_timeout = 5000</td></tr><tr><td>vm_memory_high_watermark</td><td>触发流量控制的内存阈值，可以为相对值(0.5),或者绝对值 vm_memory_high_watermark.relative = 0.6 ,vm_memory_high_watermark.absolute = 2GB</td><td>默认vm_memory_high_watermark.relative = 0.4</td></tr><tr><td>vm_memory_calculation_strategy</td><td>内存使用报告策略，assigned：使用Erlang内存分配器统计信息 rss：使用操作系统RSS内存报告。这使用特定于操作系统的方法，并可能启动短期子进程。legacy：使用遗留内存报告（运行时认为将使用多少内存）。这种策略相当不准确。erlang 与legacy一样 是为了向后兼容</td><td>vm_memory_calculation_strategy = allocated</td></tr><tr><td>vm_memory_high_watermark_paging_ratio</td><td>当内存的使用达到了50%后,队列开始将消息分页到磁盘</td><td>vm_memory_high_watermark_paging_ratio = 0.5</td></tr><tr><td>total_memory_available_override_value</td><td>该参数用于指定系统的可用内存总量，一般不使用，适用于在容器等一些获取内存实际值不精确的环境</td><td>默认未设置</td></tr><tr><td>disk_free_limit</td><td>Rabbitmq存储数据的可用空间限制，当低于该值的时候，将触发流量限制，设置可参考vm_memory_high_watermark参数</td><td>disk_free_limit.absolute = 50MB</td></tr><tr><td>log.file.level</td><td>控制记录日志的等级，有info,error,warning,debug</td><td>log.file.level = info</td></tr><tr><td>channel_max</td><td>最大通道数，但不包含协议中使用的特殊通道号0，设置为0表示无限制，不建议使用该值，容易出现channel泄漏</td><td>channel_max = 2047</td></tr><tr><td>channel_operation_timeout</td><td>通道操作超时，单位为毫秒</td><td>channel_operation_timeout = 15000</td></tr><tr><td>heartbeat</td><td>表示连接参数协商期间服务器建议的心跳超时的值。如果两端都设置为0，则禁用心跳,不建议禁用</td><td>heartbeat = 60</td></tr><tr><td>default_vhost</td><td>rabbitmq安装后启动创建的虚拟主机</td><td>default_vhost = /</td></tr><tr><td>default_user</td><td>默认创建的用户名</td><td>default_user = guest</td></tr><tr><td>default_pass</td><td>默认用户的密码</td><td>default_pass = guest</td></tr><tr><td>default_user_tags</td><td>默认用户的标签</td><td>default_user_tags.administrator = true</td></tr><tr><td>default_permissions</td><td>在创建默认用户是分配给默认用户的权限</td><td>default_permissions.configure = .* default_permissions.read = .* default_permissions.write = .*</td></tr><tr><td>loopback_users</td><td>允许通过回环地址连接到rabbitmq的用户列表,如果要允许guest用户远程连接(不安全)请将该值设置为none,如果要将一个用户设置为仅localhost连接的话，配置loopback_users.username =true(username要替换成用户名)</td><td>loopback_users.guest = true(默认为只能本地连接)</td></tr><tr><td>cluster_formation.classic_config.nodes</td><td>设置集群节点cluster_formation.classic_config.nodes.1 = rabbit@hostname1</td><td></td></tr><tr><td>cluster_formation.classic_config.nodes.2 = rabbit@hostname2</td><td>默认为空，未设置</td><td></td></tr><tr><td>collect_statistics</td><td>统计收集模式，none 不发出统计信息事件，coarse每个队列连接都发送统计一次,fine每发一条消息的统计数据</td><td>collect_statistics = none</td></tr><tr><td>collect_statistics_interval</td><td>统计信息收集间隔，以毫秒为单位</td><td>collect_statistics_interval = 5000</td></tr><tr><td>delegate_count</td><td>用于集群内通信的委托进程数。在多核的服务器上我们可以增加此值</td><td>delegate_count = 16</td></tr><tr><td>tcp_listen_options</td><td>默认的套接字选项</td><td>tcp_listen_options.backlog = 128 .....</td></tr><tr><td>hipe_compile</td><td>设置为true以使用HiPE预编译RabbitMQ的部分，HiPE是Erlang的即时编译器,启用HiPE可以提高吞吐量两位数，但启动时会延迟几分钟。Erlang运行时必须包含HiPE支持。如果不是，启用此选项将不起作用。HiPE在某些平台上根本不可用，尤其是Windows。</td><td>hipe_compile = false</td></tr><tr><td>cluster_keepalive_interval</td><td>节点应该多长时间向其他节点发送keepalive消息(以毫秒为单位),keepalive的消息丢失不会被视为关闭</td><td>cluster_keepalive_interval = 10000</td></tr><tr><td>queue_index_embed_msgs_below</td><td>消息的字节大小,低于该大小，消息将直接嵌入队列索引中 bytes</td><td>queue_index_embed_msgs_below = 4096</td></tr><tr><td>mnesia_table_loading_retry_timeout</td><td>等待集群中Mnesia表可用的超时时间，单位毫秒</td><td>mnesia_table_loading_retry_timeout = 30000</td></tr><tr><td>mnesia_table_loading_retry_limit</td><td>集群启动时等待Mnesia表的重试次数，不适用于Mnesia升级或节点删除。</td><td>mnesia_table_loading_retry_limit = 10</td></tr><tr><td>mirroring_sync_batch_size</td><td>要在队列镜像之间同步的消息的批处理大小</td><td>mirroring_sync_batch_size = 4096</td></tr><tr><td>queue_master_locator</td><td>队列主节点的策略，有三大策略 min-masters，client-local，random</td><td>queue_master_locator = client-local</td></tr><tr><td>proxy_protocol</td><td>如果设置为true ,则连接需要通过反向代理连接，不能直连接</td><td>proxy_protocol = false</td></tr><tr><td>management.listener.port</td><td>rabbitmq web管理界面使用的端口</td><td>management.listener.port = 15672</td></tr></tbody></table><p>查看rabbitmq的有效配置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">rabbitmqctl environment</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">rabbitmqctl environment</span></span></code></pre></div><h2 id="_1-2-advanced-config" tabindex="-1">1.2 advanced.config <a class="header-anchor" href="#_1-2-advanced-config" aria-label="Permalink to &quot;1.2 advanced.config&quot;">​</a></h2><p>某些配置设置不可用或难以使用sysctl格式进行配置。因此，可以使用Erlang术语格式的其他配置文件advanced.config 它将与rabbitmq.conf 文件中提供的配置合并</p><p>官方配置，<a href="https://github.com/rabbitmq/rabbitmq-server/blob/master/deps/rabbit/docs/advanced.config.example" target="_blank" rel="noreferrer">https://github.com/rabbitmq/rabbitmq-server/blob/master/deps/rabbit/docs/advanced.config.example</a></p><p>或者，<a href="https://www.rabbitmq.com/configure.html#config-items" target="_blank" rel="noreferrer">https://www.rabbitmq.com/configure.html#config-items</a></p><table><thead><tr><th>属性</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>msg_store_index_module</td><td>设置队列索引使用的模块</td><td>{rabbit，[ {msg_store_index_module，rabbit_msg_store_ets_index} ]}</td></tr><tr><td>backing_queue_module</td><td>队列内容的实现模块。</td><td>{rabbit，[ {backing_queue_module，rabbit_variable_queue} ]}</td></tr><tr><td>msg_store_file_size_limit</td><td>消息储存的文件大小,现有的节点更改是危险的，可能导致数据丢失</td><td>默认值16777216</td></tr><tr><td>trace_vhosts</td><td>内部的tracer使用，不建议更改</td><td>{rabbit，[ {trace_vhosts，[]} ]}</td></tr><tr><td>msg_store_credit_disc_bound</td><td>设置消息储存库给队列进程的积分,默认一个队列进程被赋予4000个消息积分</td><td>{rabbit, [{msg_store_credit_disc_bound, {4000, 800}}]}</td></tr><tr><td>queue_index_max_journal_entries</td><td>队列的索引日志超过该阈值将刷新到磁盘</td><td>{rabbit, [{queue_index_max_journal_entries, 32768}]}</td></tr><tr><td>lazy_queue_explicit_gc_run_operation_threshold</td><td>在内存压力下为延迟队列设置的值，该值可以触发垃圾回收和减少内存使用，降低该值，会降低性能，提高该值，会导致更高的内存消耗</td><td>{rabbit,[{lazy_queue_explicit_gc_run_operation_threshold, 1000}]}</td></tr><tr><td>queue_explicit_gc_run_operation_threshold</td><td>在内存压力下，正常队列设置的值，该值可以触发垃圾回收和减少内存使用，降低该值，会降低性能，提高该值，会导致更高的内存消耗</td><td>{rabbit, [{queue_explicit_gc_run_operation_threshold, 1000}]}</td></tr></tbody></table><h2 id="_1-3-rabbitmq-env-conf" tabindex="-1">1.3 rabbitmq-env.conf <a class="header-anchor" href="#_1-3-rabbitmq-env-conf" aria-label="Permalink to &quot;1.3 rabbitmq-env.conf&quot;">​</a></h2><p>通过rabbitmq-env.conf 来定义环境变量 RABBITMQ_NODENAME 指定节点名称</p><table><thead><tr><th>属性</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>RABBITMQ_NODE_IP_ADDRESS</td><td>绑定的网络接口</td><td>默认为空字符串表示绑定本机所有的网络接口</td></tr><tr><td>RABBITMQ_NODE_PORT</td><td>端口</td><td>默认为5672</td></tr><tr><td>RABBITMQ_DISTRIBUTION_BUFFER_SIZE</td><td>节点之间通信连接的数据缓冲区大小</td><td>默认为128000,该值建议不要使用低于64MB</td></tr><tr><td>RABBITMQ_IO_THREAD_POOL_SIZE</td><td>运行时用于io的线程数</td><td>建议不要低于32，linux默认为128 ，windows默认为64</td></tr><tr><td>RABBITMQ_NODENAME</td><td>rabbitmq节点名称，集群中要注意节点名称唯一</td><td>linux 默认节点名为 rabbit@$hostname</td></tr><tr><td>RABBITMQ_CONFIG_FILE</td><td>rabbitmq 的配置文件路径，注意不要加文件的后缀(.conf)</td><td>默认 $RABBITMQ_HOME/etc/rabbitmq/rabbitmq(二进制安装) /etc/rabbitmq/rabbitmq(rpm 安装)</td></tr><tr><td>RABBITMQ_ADVANCED_CONFIG_FILE</td><td>advanced.config文件路径</td><td>默认 $RABBITMQ_HOME/etc/rabbitmq/advanced(二进制安装) /etc/rabbitmq/advanced(rpm 安装)</td></tr><tr><td>RABBITMQ_CONF_ENV_FILE</td><td>环境变量配置文件路径</td><td>默认 $RABBITMQ_HOME/etc/rabbitmq/rabbitmq-env.conf(二进制安装) /etc/rabbitmq/rabbitmq-env.conf(rpm 安装)</td></tr><tr><td>RABBITMQ_SERVER_CODE_PATH</td><td>在使用HiPE 模块时需要使用</td><td>默认为空</td></tr><tr><td>RABBITMQ_LOGS</td><td>指定日志文件位置</td><td>默认为 $RABBITMQ_HOME/etc/var/log/rabbitmq/</td></tr></tbody></table><p>网络设置 <a href="http://www.rabbitmq.com/networking.html" target="_blank" rel="noreferrer">http://www.rabbitmq.com/networking.html</a> RABBITMQ_DISTRIBUTION_BUFFER_SIZE 节点间通信缓冲区大小,默认值 128Mb,节点流量比较多的集群中，可以提升该值，建议该值不要低于64MB。</p><p>tcp 缓存区大小 下示例将AMQP 0-9-1连接的TCP缓冲区设置为192 KiB：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">tcp_listen_options.backlog = 128</span></span>
<span class="line"><span style="color:#e1e4e8;">tcp_listen_options.nodelay = true</span></span>
<span class="line"><span style="color:#e1e4e8;">tcp_listen_options.linger.on = true</span></span>
<span class="line"><span style="color:#e1e4e8;">tcp_listen_options.linger.timeout = 0</span></span>
<span class="line"><span style="color:#e1e4e8;">tcp_listen_options.sndbuf = 196608</span></span>
<span class="line"><span style="color:#e1e4e8;">tcp_listen_options.recbuf = 196608</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">tcp_listen_options.backlog = 128</span></span>
<span class="line"><span style="color:#24292e;">tcp_listen_options.nodelay = true</span></span>
<span class="line"><span style="color:#24292e;">tcp_listen_options.linger.on = true</span></span>
<span class="line"><span style="color:#24292e;">tcp_listen_options.linger.timeout = 0</span></span>
<span class="line"><span style="color:#24292e;">tcp_listen_options.sndbuf = 196608</span></span>
<span class="line"><span style="color:#24292e;">tcp_listen_options.recbuf = 196608</span></span></code></pre></div><h2 id="_1-4-在生产环境中不适用的策略" tabindex="-1">1.4 在生产环境中不适用的策略 <a class="header-anchor" href="#_1-4-在生产环境中不适用的策略" aria-label="Permalink to &quot;1.4 在生产环境中不适用的策略&quot;">​</a></h2><ul><li><strong>1.4.1 vhost</strong></li></ul><p>在生产中，如果rabbitmq只为单个系统提供服务的时候，我们使用默认的(/)是可以的。在为多个系统提供的服务时，我们建议使用单独的vhost.</p><ul><li><strong>1.4.2 user</strong></li></ul><p>对于生产环境，请删除默认用户(guest),默认用户只能从localhost 连接。 我们可以创建指定权限的单独用户为每个应用提供服务。对于开启权限用户来说，我们可以使用证书，和源ip地址过滤，和身份验证。来加强安全性。</p><ul><li><strong>1.4.3 最大打开文件限制</strong></li></ul><p>在生产环境我们可能需要调整一些系统的默认限制，以便处理大量的并发连接和队列。 需要调整的值有打开的最大文件数。在生产环境为rabbitmq 运行的用户设定为65536，但是对于大多数开发环境来说，4096就已经足够了。</p><p>查看默认的打开文件的最大数量。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">ulimit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">ulimit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span></span></code></pre></div><p><strong>更改方式：</strong></p><ul><li>1 临时修改</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">ulimit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">65536</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">ulimit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">65536</span></span></code></pre></div><ul><li><p>2 永久修改</p><ul><li>2.1如果是systemed 来进行管理的话我们可以编辑systemed配置文件来进行控制</li></ul><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">[service]</span></span>
<span class="line"><span style="color:#F97583;">LimitNOFILE</span><span style="color:#E1E4E8;">=300000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">[service]</span></span>
<span class="line"><span style="color:#D73A49;">LimitNOFILE</span><span style="color:#24292E;">=300000</span></span></code></pre></div><ul><li><p>2.2 如果不是systemed 来进行管理的话，我们可以更改rabbitmq的启动加载的环境配置文件 rabbitmq-env.conf。在里面开头添加ulimit -S -n 4096，但该值不能超过系统的默认值的最大值。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">ulimit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-S</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4096</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">ulimit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-S</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4096</span></span></code></pre></div></li><li><p>2.3 系统级别更改</p><p>更改配置文件：/etc/security/limits.conf</p><p>在文件末尾前面加入</p><div class="language-perl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">rabbitmq(启动的用户名)         -       nofile          65536</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">rabbitmq(启动的用户名)         -       nofile          65536</span></span></code></pre></div></li></ul><p>如果更改前用户已经登录的话，需要重新登录下才能生效。</p></li><li><p><strong>1.4.4 内存</strong> 当rabbitmq 检测到它使用的内存超过系统的40%，它将不会接受任何新的消息，这个值是由参数 vm_memory_high_watermark来控制的，默认值是一个安全的值，修改该值需要注意。 rabbitmq 的至少需要128MB,建议vm_memory_high_watermark 值为 0.4~0..66 ，不要使用大于0.7的值。</p></li><li><p><strong>1.4.5 磁盘</strong> 磁盘默认的储存数据阈值是50MB,当低于该值的时候，将触发流量限制。50MB 只适用于开发环境，生产环境需要调高该值，不然容易由磁盘空间不足导致节点故障，也可能导致数据丢失。</p><p>在生产环境中我们设置的值</p><ul><li>建议的最小值 {disk_free_limit, {mem_relative, 1.0}}</li></ul><p>它是基于mem_relative的值，例如在具有4GB内存的rabbitmq主机上，那么该磁盘的阈值就是4G,如果磁盘可用空间低于4G，所有生产者和消息都将拒绝。在允许恢复发布之前，通常需要消费者将队列消息消费完。</p><ul><li>建议的更安全值 {disk_free_limit, {mem_relative, 1.5}}</li></ul><p>在具有4GB内存的RabbitMQ节点上，如果可用磁盘空间低于6GB，则所有新消息都将被阻止，但是如果我们在停止的时候rabbitmq需要储存4GB的数据到磁盘，再下一次启动的时候，就只有2G空间了。</p><ul><li>建议的最大值 {disk_free_limit, {mem_relative, 2.0}} 这个是最安全的值，如果你的磁盘有足够多的空间话，建议设置该值。但该值容易触发警告，因为在具有4GB内存的rabbitmq主机上，需要最低空间大于8G,如果你的磁盘空间比较少的话，不建议设置该值。</li></ul></li><li><p><strong>1.4.6 连接</strong> 少使用短连接，使用连接池或者长连接。</p></li><li><p><strong>1.4.7 TLS</strong> 建议尽可能使用TLS连接，使用TLS会对传输的数据加密，但是对系统的吞吐量产生很大的影响</p></li><li><p><strong>-1.4.8 更改默认端口</strong> 我们常用的web界面的端口 15672 和AMQP 0-9-1 协议端口 5672 ，建议更改，web界面更改，配置参数 management.listener.port ，AMQP 0-9-1 协议端口配置参数 listeners.tcp.default</p></li></ul>`,42),i=[l];function n(d,o,p,c,_,b){return e(),a("div",null,i)}const h=t(r,[["render",n]]);export{u as __pageData,h as default};
