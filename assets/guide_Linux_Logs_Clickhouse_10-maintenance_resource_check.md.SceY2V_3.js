import{_ as s,o as n,c as a,R as l}from"./chunks/framework.zUbWieqp.js";const F=JSON.parse('{"title":"1.查找占资源sql语句","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Linux/Logs/Clickhouse/10-maintenance_resource_check.md","filePath":"guide/Linux/Logs/Clickhouse/10-maintenance_resource_check.md","lastUpdated":1730975389000}'),p={name:"guide/Linux/Logs/Clickhouse/10-maintenance_resource_check.md"},o=l(`<h1 id="_1-查找占资源sql语句" tabindex="-1">1.查找占资源sql语句 <a class="header-anchor" href="#_1-查找占资源sql语句" aria-label="Permalink to &quot;1.查找占资源sql语句&quot;">​</a></h1><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">select</span></span>
<span class="line"><span style="color:#E1E4E8;">    query, </span><span style="color:#6A737D;">--查询语句.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) cnt,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(query_duration_ms) </span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`查询消耗的时间（秒）\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(read_rows) read_rows, </span><span style="color:#6A737D;">--从参与了查询的所有表和表函数读取的总行数.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(read_bytes) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`read(MB)\`</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">-- 从参与了查询的所有表和表函数读取的大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(written_rows) written_rows, </span><span style="color:#6A737D;">-- 对于 INSERT 查询，为写入的行数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(written_bytes) written_bytes, </span><span style="color:#6A737D;">--对于 INSERT 查询时，为写入的字节数。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(result_rows) result_rows, </span><span style="color:#6A737D;">--SELECT 查询结果的行数，或INSERT 的行数。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(result_bytes) result_bytes, </span><span style="color:#6A737D;">--  存储查询结果的RAM量.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(memory_usage) memory_usage </span><span style="color:#6A737D;">-- 查询使用的内存.</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">system</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">query_log</span></span>
<span class="line"><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> event_date </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> today() </span><span style="color:#6A737D;">-- 日期条件 yyyyMMdd</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">-- 1 — 查询成功启动. 2 — 查询成功完成. 3 — 查询执行前有异常. 4 — 查询执行期间有异常.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> stack_trace </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">-- 如果查询成功完成，则为空字符串。</span></span>
<span class="line"><span style="color:#F97583;">group by</span><span style="color:#E1E4E8;"> query</span></span>
<span class="line"><span style="color:#F97583;">order by</span><span style="color:#E1E4E8;"> cnt,</span><span style="color:#9ECBFF;">\`查询消耗的时间（秒）\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">desc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">select</span></span>
<span class="line"><span style="color:#24292E;">    query, </span><span style="color:#6A737D;">--查询语句.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">count</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) cnt,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(query_duration_ms) </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`查询消耗的时间（秒）\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(read_rows) read_rows, </span><span style="color:#6A737D;">--从参与了查询的所有表和表函数读取的总行数.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(read_bytes) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`read(MB)\`</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">-- 从参与了查询的所有表和表函数读取的大小</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(written_rows) written_rows, </span><span style="color:#6A737D;">-- 对于 INSERT 查询，为写入的行数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(written_bytes) written_bytes, </span><span style="color:#6A737D;">--对于 INSERT 查询时，为写入的字节数。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(result_rows) result_rows, </span><span style="color:#6A737D;">--SELECT 查询结果的行数，或INSERT 的行数。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(result_bytes) result_bytes, </span><span style="color:#6A737D;">--  存储查询结果的RAM量.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(memory_usage) memory_usage </span><span style="color:#6A737D;">-- 查询使用的内存.</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">system</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">query_log</span></span>
<span class="line"><span style="color:#D73A49;">where</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> event_date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> today() </span><span style="color:#6A737D;">-- 日期条件 yyyyMMdd</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">-- 1 — 查询成功启动. 2 — 查询成功完成. 3 — 查询执行前有异常. 4 — 查询执行期间有异常.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> stack_trace </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">-- 如果查询成功完成，则为空字符串。</span></span>
<span class="line"><span style="color:#D73A49;">group by</span><span style="color:#24292E;"> query</span></span>
<span class="line"><span style="color:#D73A49;">order by</span><span style="color:#24292E;"> cnt,</span><span style="color:#032F62;">\`查询消耗的时间（秒）\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">desc</span></span></code></pre></div>`,2),e=[o];function t(c,r,y,E,i,_){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{F as __pageData,d as default};
