import{_ as s,o as a,c as n,R as l}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"概述 #","description":"","frontmatter":{},"headers":[],"relativePath":"guide/go/条件编译.md","filePath":"guide/go/条件编译.md","lastUpdated":1701928035000}'),o={name:"guide/go/条件编译.md"},p=l(`<h1 id="概述" tabindex="-1">概述 <a href="https://golang.dbwu.tech/engineering/conditional_compilation/#%E6%A6%82%E8%BF%B0" target="_blank" rel="noreferrer">#</a> <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述 [#](https://golang.dbwu.tech/engineering/conditional_compilation/#概述)&quot;">​</a></h1><p><code>条件编译</code> 是指针对不同的平台，在编译期间选择性地编译特定的程序代码。 Go 通过引入 <code>build tag</code> 实现了条件编译。</p><h1 id="例子" tabindex="-1">例子 <a href="https://golang.dbwu.tech/engineering/conditional_compilation/#%E4%BE%8B%E5%AD%90" target="_blank" rel="noreferrer">#</a> <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子 [#](https://golang.dbwu.tech/engineering/conditional_compilation/#例子)&quot;">​</a></h1><p><code>条件编译</code> 一个常见的场景是: 针对同一个方法，在不同的环境中 (开发|测试|生产)，希望能输出不同等级的日志。</p><p>下面通过一个小例子来演示刚才描述的这种场景。</p><h2 id="go-mod" tabindex="-1">go.mod <a class="header-anchor" href="#go-mod" aria-label="Permalink to &quot;go.mod&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go.mod</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输出如下</span></span>
<span class="line"><span style="color:#B392F0;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">helloworld</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.19</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go.mod</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输出如下</span></span>
<span class="line"><span style="color:#6F42C1;">module</span><span style="color:#24292E;"> </span><span style="color:#032F62;">helloworld</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.19</span></span></code></pre></div><h2 id="foo" tabindex="-1">foo <a class="header-anchor" href="#foo" aria-label="Permalink to &quot;foo&quot;">​</a></h2><p>新建一个 <code>foo</code> 目录，并在目录下面建立 3 个文件: <code>debug.go</code>, <code>prod.go</code>, <code>main.go</code>。</p><h3 id="debug-go" tabindex="-1">debug.go <a href="https://golang.dbwu.tech/engineering/conditional_compilation/#debuggo" target="_blank" rel="noreferrer">#</a> <a class="header-anchor" href="#debug-go" aria-label="Permalink to &quot;debug.go [#](https://golang.dbwu.tech/engineering/conditional_compilation/#debuggo)&quot;">​</a></h3><p>将如下代码写入 <code>debug.go</code> 文件中。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//go:build debug</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Mode</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Debug Mode&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//go:build debug</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mode</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Debug Mode&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="prod-go" tabindex="-1">prod.go <a href="https://golang.dbwu.tech/engineering/conditional_compilation/#prodgo" target="_blank" rel="noreferrer">#</a> <a class="header-anchor" href="#prod-go" aria-label="Permalink to &quot;prod.go [#](https://golang.dbwu.tech/engineering/conditional_compilation/#prodgo)&quot;">​</a></h3><p>将如下代码写入 <code>prod.go</code> 文件中。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//go:build !debug</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Mode</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Production Mode&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//go:build !debug</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mode</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Production Mode&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="main-go" tabindex="-1">main.go <a href="https://golang.dbwu.tech/engineering/conditional_compilation/#maingo" target="_blank" rel="noreferrer">#</a> <a class="header-anchor" href="#main-go" aria-label="Permalink to &quot;main.go [#](https://golang.dbwu.tech/engineering/conditional_compilation/#maingo)&quot;">​</a></h3><p>将如下代码写入 <code>main.go</code> 文件中。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">helloworld/foo</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	foo.</span><span style="color:#79B8FF;">Mode</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">helloworld/foo</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	foo.</span><span style="color:#005CC5;">Mode</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="通过-tags-运行" tabindex="-1">通过 tags 运行 <a href="https://golang.dbwu.tech/engineering/conditional_compilation/#%E9%80%9A%E8%BF%87-tags-%E8%BF%90%E8%A1%8C" target="_blank" rel="noreferrer">#</a> <a class="header-anchor" href="#通过-tags-运行" aria-label="Permalink to &quot;通过 tags 运行 [#](https://golang.dbwu.tech/engineering/conditional_compilation/#通过-tags-运行)&quot;">​</a></h3><p><code>debug.go</code> 和 <code>prod.go</code> 两个文件中都有一个 <code>Mode</code> 方法，具体以哪个为准，需要编译时指定标签。通过指定不同的标签，运行程序可以得到不同的结果。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.go</span></span>
<span class="line"><span style="color:#6A737D;"># 输出如下 </span></span>
<span class="line"><span style="color:#B392F0;">Production</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Mode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-tags</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">debug</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.go</span></span>
<span class="line"><span style="color:#6A737D;"># 输出如下</span></span>
<span class="line"><span style="color:#B392F0;">Debug</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Mode</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.go</span></span>
<span class="line"><span style="color:#6A737D;"># 输出如下 </span></span>
<span class="line"><span style="color:#6F42C1;">Production</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Mode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-tags</span><span style="color:#24292E;"> </span><span style="color:#032F62;">debug</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.go</span></span>
<span class="line"><span style="color:#6A737D;"># 输出如下</span></span>
<span class="line"><span style="color:#6F42C1;">Debug</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Mode</span></span></code></pre></div><h1 id="多个编译条件" tabindex="-1">多个编译条件 <a href="https://golang.dbwu.tech/engineering/conditional_compilation/#%E5%A4%9A%E4%B8%AA%E7%BC%96%E8%AF%91%E6%9D%A1%E4%BB%B6" target="_blank" rel="noreferrer">#</a> <a class="header-anchor" href="#多个编译条件" aria-label="Permalink to &quot;多个编译条件 [#](https://golang.dbwu.tech/engineering/conditional_compilation/#多个编译条件)&quot;">​</a></h1><p>一个源文件中可以有多个 <code>build tags</code>，同一行的逗号隔开的 <code>tag</code> 之间是 <code>逻辑与</code> 的关系，空格隔开的 <code>tag</code> 之间是 <code>逻辑或</code> 的关系， 不同行之间的 <code>tag</code> 是 <code>逻辑与</code> 的关系。</p><h3 id="示例" tabindex="-1">示例 <a href="https://golang.dbwu.tech/engineering/conditional_compilation/#%E7%A4%BA%E4%BE%8B" target="_blank" rel="noreferrer">#</a> <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例 [#](https://golang.dbwu.tech/engineering/conditional_compilation/#示例)&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 逻辑或，此源文件只能在 linux 或者 darwin 平台下编译</span></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">darwin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 逻辑与，此源文件只能在 linux/amd64 平台下编译</span></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">amd64</span></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 此源文件只能在 linux/386 或者 darwin 平台下编译</span></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux,386</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">darwin</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 逻辑或，此源文件只能在 linux 或者 darwin 平台下编译</span></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#032F62;">darwin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 逻辑与，此源文件只能在 linux/amd64 平台下编译</span></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">amd64</span></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 此源文件只能在 linux/386 或者 darwin 平台下编译</span></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux,386</span><span style="color:#24292E;"> </span><span style="color:#032F62;">darwin</span></span></code></pre></div>`,25),e=[p];function c(t,r,i,d,y,E){return a(),n("div",null,e)}const u=s(o,[["render",c]]);export{h as __pageData,u as default};
