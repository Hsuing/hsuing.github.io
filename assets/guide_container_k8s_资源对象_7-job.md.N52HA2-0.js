import{_ as s,o as n,c as a,R as l}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/资源对象/7-job.md","filePath":"guide/container/k8s/资源对象/7-job.md","lastUpdated":1729246382000}'),p={name:"guide/container/k8s/资源对象/7-job.md"},o=l(`<p>文档，<a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/job/" target="_blank" rel="noreferrer">https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/job/</a></p><p>在Kubernetes（K8S）中，要让Pod运行一次并完成一次性任务，可以使用Job资源。Job是Kubernetes中用于运行一次性任务的工作负载API对象。它创建一个或多个Pod，并确保指定数量的Pod成功终止。当Pod成功完成后，Job将跟踪成功完成的情况。当达到指定的成功完成次数时，任务（即Job）就完成了</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">batch/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Job</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">my-one-time-job</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">completions</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 指定需要成功完成的任务数量，默认为1</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">parallelism</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 指定并发运行的任务数量，默认也为1，即一次仅运行一个Pod</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">backoffLimit</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 在Pod重试失败后放弃任务前的最大重试次数，默认为6</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">OnFailure</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 对于一次性任务，推荐设置为OnFailure，这样只有任务失败时才会重试</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">my-container</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">my-image:latest</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;./run-my-task.sh&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;"># 执行脚本或命令，这里假设有一个运行一次性任务的脚本</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">batch/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Job</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">my-one-time-job</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">completions</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 指定需要成功完成的任务数量，默认为1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">parallelism</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 指定并发运行的任务数量，默认也为1，即一次仅运行一个Pod</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">backoffLimit</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 在Pod重试失败后放弃任务前的最大重试次数，默认为6</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">template</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">OnFailure</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 对于一次性任务，推荐设置为OnFailure，这样只有任务失败时才会重试</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">my-container</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">my-image:latest</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;./run-my-task.sh&quot;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;"># 执行脚本或命令，这里假设有一个运行一次性任务的脚本</span></span></code></pre></div><p>区别</p><p><a href="https://www.cnblogs.com/zhanchenjin/p/17332200.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/zhanchenjin/p/17332200.html</a></p>`,5),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const F=s(p,[["render",t]]);export{h as __pageData,F as default};
