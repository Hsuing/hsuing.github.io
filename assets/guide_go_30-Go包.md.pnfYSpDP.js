import{_ as a,o as s,c as e,R as o}from"./chunks/framework.zUbWieqp.js";const y=JSON.parse('{"title":"1. 包分类","description":"","frontmatter":{},"headers":[],"relativePath":"guide/go/30-Go包.md","filePath":"guide/go/30-Go包.md","lastUpdated":1727256313000}'),l={name:"guide/go/30-Go包.md"},n=o(`<h1 id="_1-包分类" tabindex="-1">1. 包分类 <a class="header-anchor" href="#_1-包分类" aria-label="Permalink to &quot;1. 包分类&quot;">​</a></h1><h2 id="_1-1内置包" tabindex="-1">1.1内置包 <a class="header-anchor" href="#_1-1内置包" aria-label="Permalink to &quot;1.1内置包&quot;">​</a></h2><p>内置包：由Go语言官方提供，无需下载即可直接使用，比如：fmt、OS、 net、math</p><ul><li>查看内置和第三方地址</li></ul><p><a href="https://pkg.go.dev/" target="_blank" rel="noreferrer">https://pkg.go.dev/</a></p><h2 id="_1-2第三方包" tabindex="-1">1.2第三方包 <a class="header-anchor" href="#_1-2第三方包" aria-label="Permalink to &quot;1.2第三方包&quot;">​</a></h2><p>由其他开发者或组织提供的包，需要安装后才能使用，比如: gin、beego、gorm等</p><h1 id="_2-使用包" tabindex="-1">2.使用包 <a class="header-anchor" href="#_2-使用包" aria-label="Permalink to &quot;2.使用包&quot;">​</a></h1><p>包可以区分命令空间(一个文件中不能有两个同名文件)， 也可以更好的管理项目。go中创建一个包，一般是创建一个文件夹，在该文件夹里面的go文件中，使用package关键字声明包名称，通常，文件夹名称相同。并且，同一个文件夹下面只有一个包</p><h2 id="_2-1创建包" tabindex="-1">2.1创建包 <a class="header-anchor" href="#_2-1创建包" aria-label="Permalink to &quot;2.1创建包&quot;">​</a></h2><p>1.创建一个名为dao的文件夹</p><p>2.创建一个dao.go文件</p><p>3.在该文件中声明包。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dao</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//code</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dao</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//code</span></span></code></pre></div><h2 id="_2-2导入包" tabindex="-1">2.2导入包 <a class="header-anchor" href="#_2-2导入包" aria-label="Permalink to &quot;2.2导入包&quot;">​</a></h2><p>要使用某个包下面的变量或者方法，需要导入该包，导入包时，要导入从<code>GOPATH</code>开始的路径，列如，在<code>service.go</code>中导入<code>dao包</code></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">dao</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">	dao.</span><span style="color:#79B8FF;">Test</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">dao</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">	dao.</span><span style="color:#005CC5;">Test</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>包注意事项</p><p>函数名字大写Ftestfunc()，可以其他目录调用</p></blockquote><h2 id="_2-3别名" tabindex="-1">2.3别名 <a class="header-anchor" href="#_2-3别名" aria-label="Permalink to &quot;2.3别名&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">import m &quot;math&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import m &quot;math&quot;</span></span></code></pre></div><h2 id="_2-4特殊包" tabindex="-1">2.4特殊包 <a class="header-anchor" href="#_2-4特殊包" aria-label="Permalink to &quot;2.4特殊包&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#执行init函数</span></span>
<span class="line"><span style="color:#e1e4e8;">import _ &quot;包名&quot;  #不用这个包</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#执行init函数</span></span>
<span class="line"><span style="color:#24292e;">import _ &quot;包名&quot;  #不用这个包</span></span></code></pre></div><h1 id="_3-包管理工具" tabindex="-1">3.包管理工具 <a class="header-anchor" href="#_3-包管理工具" aria-label="Permalink to &quot;3.包管理工具&quot;">​</a></h1><h2 id="_2-1-go-module简介" tabindex="-1">2.1 go module简介 <a class="header-anchor" href="#_2-1-go-module简介" aria-label="Permalink to &quot;2.1 go module简介&quot;">​</a></h2><p>go module是golang1.11新加的特性，用来管理模块中包的依赖关系</p><h2 id="_2-2-开启go-mod" tabindex="-1">2.2 开启go mod <a class="header-anchor" href="#_2-2-开启go-mod" aria-label="Permalink to &quot;2.2 开启go mod&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"></span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"></span></span></code></pre></div><h2 id="_2-3-go-mod使用方法" tabindex="-1">2.3 go mod使用方法 <a class="header-anchor" href="#_2-3-go-mod使用方法" aria-label="Permalink to &quot;2.3 go mod使用方法&quot;">​</a></h2><ul><li>初始化模块</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">go mod init &lt;项目模块名称&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">go mod init &lt;项目模块名称&gt;</span></span></code></pre></div><ul><li>依赖关系处理，根据go.mod文件</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">go mod vendor</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">//如果包被屏蔽(墙)，可以使用这个命令，随后使用go build -mod=vendor 编译</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">go mod vendor</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">//如果包被屏蔽(墙)，可以使用这个命令，随后使用go build -mod=vendor 编译</span></span></code></pre></div><ul><li>显示依赖关系</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">go list -m all</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">go list -m all</span></span></code></pre></div><ul><li>显示详细依赖关系</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">go list -m -json all</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">go list -m -json all</span></span></code></pre></div><ul><li>下载依赖关系</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">go mod download</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">go mod download</span></span></code></pre></div><h1 id="_4-自定义包" tabindex="-1">4.自定义包 <a class="header-anchor" href="#_4-自定义包" aria-label="Permalink to &quot;4.自定义包&quot;">​</a></h1>`,39),p=[n];function t(c,i,r,d,h,g){return s(),e("div",null,p)}const m=a(l,[["render",t]]);export{y as __pageData,m as default};
