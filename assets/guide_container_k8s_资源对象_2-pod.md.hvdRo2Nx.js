import{_ as s,o as n,c as a,R as l}from"./chunks/framework.zUbWieqp.js";const u=JSON.parse('{"title":"1.什么是Pod","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/资源对象/2-pod.md","filePath":"guide/container/k8s/资源对象/2-pod.md","lastUpdated":1743777336000}'),p={name:"guide/container/k8s/资源对象/2-pod.md"},o=l(`<h1 id="_1-什么是pod" tabindex="-1">1.什么是Pod <a class="header-anchor" href="#_1-什么是pod" aria-label="Permalink to &quot;1.什么是Pod&quot;">​</a></h1><p>​ Pod是Kubernetes中的抽象概念，也是Kubernetes中的最小部署单元。在每个Pod中至少包含一个容器或多个容器，这些容器共享Network（网络）、PID（进程）、IPC（进程间通信)HostName（主机名称）、VoLume（卷）。当我们需要部署应用时，其实就是在部署Pod，Kubernetes会将Pod中所有的容器作为一个整体，由Master调度到一个Node上运行。</p><p>​ 每个Pod中有个根容器(Pause容器)，Pause容器的状态代表整个容器组的状态，其他业务容器共享Pause的IP，即Pod IP，共享Pause挂载的Volume，这样简化了同个Pod中不同容器之间的网络问题和文件共享问题</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202402011539360.png" alt="image-20240201153903525"></p><h1 id="_2-pod共享网络" tabindex="-1">2.Pod共享网络 <a class="header-anchor" href="#_2-pod共享网络" aria-label="Permalink to &quot;2.Pod共享网络&quot;">​</a></h1><p>​ 在Docker中，如果tomcat容器想与mysql容器进行共享，需要先启动mysql容器，然后tomcat容器通过--net=db:mysql选项即可和mysql共享网络，这也就意味着我们必须先运行mysql，后运行tomcat，才可以实现共享网络。</p><p>​ 在Kubernetes中，Pod的网络共享和Docker的网络共享实现方式一致，只不过在启动Pod时，会先启动一个pause的容器，然后将后续的所有容器都--Link到这个paUse的容器，以实现网络共享。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202404081038105.png" alt="image-20240408103752148"></p><p>从上图得出结论，</p><p>1、Pod中的Tomcat容器可以直接使⽤ localhost 与MySQL容器进⾏通信</p><p>2、Pod中的多个容器不允许绑定相同的端⼝，因为所有容器共享⽹络协议栈，看到的⽹络信息⼀致；</p><h1 id="_3-pod共享存储" tabindex="-1">3.Pod共享存储 <a class="header-anchor" href="#_3-pod共享存储" aria-label="Permalink to &quot;3.Pod共享存储&quot;">​</a></h1><p>默认情况下所有容器的文件系统是互相隔离的，要实现文件共享则需要在Pod层面声明一个Volume卷，然后在需要共享的容器中声明VoLumeMounts来挂载文件系统，从而达到多个容器共享一个存储卷。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202404081339502.png" alt="image-20240408133927775"></p><ul><li>案例</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-mutil</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;"># 申明Volumes共享卷</span></span>
<span class="line"><span style="color:#E1E4E8;">- </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">webpage</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 卷名称</span></span>
<span class="line"><span style="color:#85E89D;">emptyDir</span><span style="color:#E1E4E8;">: {} </span><span style="color:#6A737D;"># 卷类型</span></span>
<span class="line"><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">random-app</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 产⽣内容写⼊/apps/index.html ⽂件中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">busybox</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;/bin/sh&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;-c&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;echo &quot;web-$(date +%F)&quot; &gt;&gt; /apps/index.html !$ sleep 30&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">volumeMounts</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">webpage</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">mountPath</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/apps</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx-app</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 第⼆个容器读取第⼀个容器产⽣的内容，对外提供访问</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">volumeMounts</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">webpage</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">mountPath</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/usr/share/nginx/html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-mutil</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">volumes</span><span style="color:#24292E;">: </span><span style="color:#6A737D;"># 申明Volumes共享卷</span></span>
<span class="line"><span style="color:#24292E;">- </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">webpage</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 卷名称</span></span>
<span class="line"><span style="color:#22863A;">emptyDir</span><span style="color:#24292E;">: {} </span><span style="color:#6A737D;"># 卷类型</span></span>
<span class="line"><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">random-app</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 产⽣内容写⼊/apps/index.html ⽂件中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">busybox</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;/bin/sh&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;-c&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;echo &quot;web-$(date +%F)&quot; &gt;&gt; /apps/index.html !$ sleep 30&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">volumeMounts</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">webpage</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">mountPath</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/apps</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx-app</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 第⼆个容器读取第⼀个容器产⽣的内容，对外提供访问</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">volumeMounts</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">webpage</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">mountPath</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/usr/share/nginx/html</span></span></code></pre></div><h1 id="_4-pod管理方式" tabindex="-1">4.Pod管理方式 <a class="header-anchor" href="#_4-pod管理方式" aria-label="Permalink to &quot;4.Pod管理方式&quot;">​</a></h1><h2 id="_4-1自主式管理pod" tabindex="-1">4.1自主式管理Pod <a class="header-anchor" href="#_4-1自主式管理pod" aria-label="Permalink to &quot;4.1自主式管理Pod&quot;">​</a></h2><p>在Kubernetes中，我们部署pod的时候，基本上都是使⽤控制器管理，那如果不使⽤控制器，也可以直接定义⼀个pod资源，那么就是pod⾃⼰去控制⾃⼰，这样的pod称为⾃主式pod</p><p>特点，</p><ul><li>如果Pod被删除，那就是真的被删除，不会重新在运⾏⼀个新的Pod；</li><li>如果Pod所在的节点需要维护，那么节点会先执⾏驱逐，如果是⾃助式Pod，驱逐后不会被重建；</li><li>如果Pod期望部署多个副本，这个也能实现，但如果想持续维持副本数量，则需要⼈为参与，过于繁琐</li></ul><p>1.创建⼀个⾃主式Pod</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># cat nginx-pod.yaml</span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx-pod</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx-container</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># cat nginx-pod.yaml</span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx-pod</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx-container</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span></code></pre></div><p>2.测试删除Pod，验证是否能被彻底删除</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">[root@master ~]# kubectl delete pod nginx-pod</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[root@master ~]# kubectl delete pod nginx-pod</span></span></code></pre></div><p>3.测试节点故障，当Pod所运⾏的节点故障，那么该Pod会被删除，不会重新运⾏起来</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 驱逐</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@master </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# kubectl drain node01 --ignore-daemonsets --force</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 解除不可调度</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@master </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# kubectl uncordon node01</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 驱逐</span></span>
<span class="line"><span style="color:#24292E;">[root@master </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# kubectl drain node01 --ignore-daemonsets --force</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 解除不可调度</span></span>
<span class="line"><span style="color:#24292E;">[root@master </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# kubectl uncordon node01</span></span></code></pre></div><h2 id="_4-2控制管理器" tabindex="-1">4.2控制管理器 <a class="header-anchor" href="#_4-2控制管理器" aria-label="Permalink to &quot;4.2控制管理器&quot;">​</a></h2><p>Kubernetes使用更高级的Controller的抽象层，来管理Pod实例。Controller可以创建和管理多个Pod，提供副本管理、滚动升级和集群级别的自愈能力。例如，如果一个Node故障，ControlLer就能自动将该节点上的Pod调度到其他健康的Node上。虽然可以直接使用Pod，但是在Kubernetes中通常是使用ControLLer来管理Pod的。在Kubernetes中也将这些Controller又称为<code>工作负载</code></p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202404081631377.png" alt="image-20240408163107413"></p><p>1、创建控制器管理的Pod</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#cat nginx-dp.yaml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Deployment</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx-dp</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">replicas</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">selector</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">matchLabels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx:1.19.1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#cat nginx-dp.yaml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Deployment</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx-dp</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">replicas</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">selector</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">matchLabels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">app</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">template</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">app</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx:1.19.1</span></span></code></pre></div><p>2、测试删除Pod，会发现Pod被删除后，⽴即⼜启动了⼀个相同的Pod实例</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#查看</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx-dp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#删除</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">delete</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod_name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#验证</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx-dp</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#查看</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx-dp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#删除</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">delete</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod_name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#验证</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx-dp</span></span></code></pre></div><p>3、测试节点故障，会发现控制器管理的Pod会在其他没有故障的节点上重新启动⼀份实例，以维持副本数量</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#驱逐</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">drain</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node01</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--ignore-daemonsets</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--force</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#解除不可调度</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">uncordon</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node01</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#驱逐</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">drain</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node01</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--ignore-daemonsets</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--force</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#解除不可调度</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">uncordon</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node01</span></span></code></pre></div><h1 id="_5-pod运行应用" tabindex="-1">5.Pod运行应用 <a class="header-anchor" href="#_5-pod运行应用" aria-label="Permalink to &quot;5.Pod运行应用&quot;">​</a></h1><h2 id="_5-1-创建pod应用" tabindex="-1">5.1 创建Pod应用 <a class="header-anchor" href="#_5-1-创建pod应用" aria-label="Permalink to &quot;5.1 创建Pod应用&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># cat nginx-pod.yaml</span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx-pod</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx-container</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx:latest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># cat nginx-pod.yaml</span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx-pod</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx-container</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx:latest</span></span></code></pre></div><h2 id="_5-2-pod运行阶段" tabindex="-1">5.2 Pod运⾏阶段 <a class="header-anchor" href="#_5-2-pod运行阶段" aria-label="Permalink to &quot;5.2 Pod运⾏阶段&quot;">​</a></h2><p><code>Pod</code>创建后，起始为<code>Pending</code>阶段，如果其中至少有一个主要容器正常启动，则进入<code>Running</code>。之后的状态取决于 Pod 中是否有容器运行失败或被管理员停止运行，从而会进入<code>Succeeded</code>或者<code>Failed</code>阶段。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202404081725030.png" alt="image-20240408172543934"></p><ul><li><code>Pending</code>：Pod已被Kubernetes系统接受，但有一个或者多个容器尚未创建亦未运行。此阶段包括等待Pod被调度的时间和通过网络下载镜像的时间</li><li><code>Running</code>：Pod已经绑定至某个节点，同时Pod中所有的容器都已创建。至少有一个容器在运行，或处于启动、重启状态</li><li><code>Succeeded</code>：Pod中的所有容器都已成功终止，并且不会再重启</li><li><code>Failed</code>：Pod中的所有容器都已终止，并且至少有一个容器是因为失败终止。也就是说，容器以非0状态退出或被系统终止</li><li><code>Unknown</code>：因为某些原因无法取得Pod的状态。这种情况通常是因为与Pod 所在主机通信失败</li></ul><h3 id="查看pod所处阶段" tabindex="-1">查看Pod所处阶段 <a class="header-anchor" href="#查看pod所处阶段" aria-label="Permalink to &quot;查看Pod所处阶段&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@kube-master </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# kubectl describe pod </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">pod_name</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">Name:</span><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">nginx-6799fc88d8-49dd6</span></span>
<span class="line"><span style="color:#B392F0;">Namespace:</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">default</span></span>
<span class="line"><span style="color:#B392F0;">Priority:</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">Node:</span><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">kube-node03/10.103.236.204</span></span>
<span class="line"><span style="color:#B392F0;">Start</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Time:</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Thu,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Apr</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2024</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#9ECBFF;">:20:45</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+0800</span></span>
<span class="line"><span style="color:#B392F0;">Labels:</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">app=nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">              pod-template-hash</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">6799</span><span style="color:#9ECBFF;">fc88d8</span></span>
<span class="line"><span style="color:#B392F0;">Annotations:</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">cni.projectcalico.org/podIP:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">172.17</span><span style="color:#9ECBFF;">.74.71/32</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">cni.projectcalico.org/podIPs:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">172.17</span><span style="color:#9ECBFF;">.74.71/32</span></span>
<span class="line"><span style="color:#B392F0;">Status:</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">Running</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 当前 Pod 为 Running 状态</span></span>
<span class="line"><span style="color:#B392F0;">。。。。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 如果某节点死掉或者与集群中其他节点失联，Kubernetes 会实施⼀种策略，将失去的节点上运⾏的 Pod 的 phase 设置为 Failed</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看方式</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jumpointpro-webapp-2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jumpoint-pro</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yaml</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">phase:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jumpointpro-webapp-2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jumpoint-pro</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">json</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jq</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.status.phase</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">describe</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jumpointpro-webapp-2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jumpoint-pro</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Status:</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@kube-master </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# kubectl describe pod </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pod_name</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">Name:</span><span style="color:#24292E;">         </span><span style="color:#032F62;">nginx-6799fc88d8-49dd6</span></span>
<span class="line"><span style="color:#6F42C1;">Namespace:</span><span style="color:#24292E;">    </span><span style="color:#032F62;">default</span></span>
<span class="line"><span style="color:#6F42C1;">Priority:</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">Node:</span><span style="color:#24292E;">         </span><span style="color:#032F62;">kube-node03/10.103.236.204</span></span>
<span class="line"><span style="color:#6F42C1;">Start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Time:</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Thu,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">11</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Apr</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2024</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#032F62;">:20:45</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+0800</span></span>
<span class="line"><span style="color:#6F42C1;">Labels:</span><span style="color:#24292E;">       </span><span style="color:#032F62;">app=nginx</span></span>
<span class="line"><span style="color:#24292E;">              pod-template-hash</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">6799</span><span style="color:#032F62;">fc88d8</span></span>
<span class="line"><span style="color:#6F42C1;">Annotations:</span><span style="color:#24292E;">  </span><span style="color:#032F62;">cni.projectcalico.org/podIP:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">172.17</span><span style="color:#032F62;">.74.71/32</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">cni.projectcalico.org/podIPs:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">172.17</span><span style="color:#032F62;">.74.71/32</span></span>
<span class="line"><span style="color:#6F42C1;">Status:</span><span style="color:#24292E;">       </span><span style="color:#032F62;">Running</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 当前 Pod 为 Running 状态</span></span>
<span class="line"><span style="color:#6F42C1;">。。。。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 如果某节点死掉或者与集群中其他节点失联，Kubernetes 会实施⼀种策略，将失去的节点上运⾏的 Pod 的 phase 设置为 Failed</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看方式</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jumpointpro-webapp-2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jumpoint-pro</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yaml</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">phase:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jumpointpro-webapp-2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jumpoint-pro</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">json</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jq</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.status.phase</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">describe</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jumpointpro-webapp-2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jumpoint-pro</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Status:</span></span></code></pre></div><h3 id="查看pod-status的具体原因" tabindex="-1">查看Pod Status的具体原因 <a class="header-anchor" href="#查看pod-status的具体原因" aria-label="Permalink to &quot;查看Pod Status的具体原因&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@kube-master </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# kubectl describe pod </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">pod_name</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">。。。</span></span>
<span class="line"><span style="color:#B392F0;">lastProbeTime：最后一次探测</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Condition</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">的时间戳。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">lastTransitionTime：上次</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Condition</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">从一种状态转换到另一种状态的时间。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">message：上次</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Condition</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">状态转换的详细描述。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">reason：Condition</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">最后一次转换的原因。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">status：Condition</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">状态类型，可以为</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">“True”,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">“False”,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">“Unknown”.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Conditions:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Type</span><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">Status</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Initialized</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">True</span><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">#Pod中所有的 Init 容器都已经完成</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Ready</span><span style="color:#E1E4E8;">             </span><span style="color:#9ECBFF;">True</span><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">#Pod可以对外提供服务，并可以加⼊对应的负载均衡中；</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ContainersReady</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">True</span><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">#Pod中所有容器都已经处于就绪状态；</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">PodScheduled</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">True</span><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">#Pod已经成功被调度到了某节点上</span></span>
<span class="line"><span style="color:#B392F0;">。。。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@kube-master </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# kubectl describe pod </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pod_name</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">。。。</span></span>
<span class="line"><span style="color:#6F42C1;">lastProbeTime：最后一次探测</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Condition</span><span style="color:#24292E;"> </span><span style="color:#032F62;">的时间戳。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">lastTransitionTime：上次</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Condition</span><span style="color:#24292E;"> </span><span style="color:#032F62;">从一种状态转换到另一种状态的时间。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">message：上次</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Condition</span><span style="color:#24292E;"> </span><span style="color:#032F62;">状态转换的详细描述。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">reason：Condition</span><span style="color:#24292E;"> </span><span style="color:#032F62;">最后一次转换的原因。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">status：Condition</span><span style="color:#24292E;"> </span><span style="color:#032F62;">状态类型，可以为</span><span style="color:#24292E;"> </span><span style="color:#032F62;">“True”,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">“False”,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">“Unknown”.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Conditions:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Type</span><span style="color:#24292E;">              </span><span style="color:#032F62;">Status</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Initialized</span><span style="color:#24292E;">       </span><span style="color:#032F62;">True</span><span style="color:#24292E;">		</span><span style="color:#6A737D;">#Pod中所有的 Init 容器都已经完成</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Ready</span><span style="color:#24292E;">             </span><span style="color:#032F62;">True</span><span style="color:#24292E;">		</span><span style="color:#6A737D;">#Pod可以对外提供服务，并可以加⼊对应的负载均衡中；</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ContainersReady</span><span style="color:#24292E;">   </span><span style="color:#032F62;">True</span><span style="color:#24292E;">		</span><span style="color:#6A737D;">#Pod中所有容器都已经处于就绪状态；</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">PodScheduled</span><span style="color:#24292E;">      </span><span style="color:#032F62;">True</span><span style="color:#24292E;">		</span><span style="color:#6A737D;">#Pod已经成功被调度到了某节点上</span></span>
<span class="line"><span style="color:#6F42C1;">。。。</span></span></code></pre></div><h2 id="_5-3容器运行阶段" tabindex="-1">5.3容器运⾏阶段 <a class="header-anchor" href="#_5-3容器运行阶段" aria-label="Permalink to &quot;5.3容器运⾏阶段&quot;">​</a></h2><p>文档，<a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy" target="_blank" rel="noreferrer">https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy</a></p><p>​ Kubernetes会跟踪Pod 中每个容器的状态，就像跟踪Pod 阶段-样。Pod中运行的容器状态与Pod阶段是存在关联关系的，所以当Pod出现故障时，<code>将Pod的阶段状态和Pod中的容器状态结合起来查看</code>，更容易定位具体的问题.</p><p>​ 一旦调度器将Pod 分派给某个节点，<code>kubelet</code>就通过容器运行时开始为Pod创建容器。 名容器的状态有三种：<code>Waiting</code>（等待）、<code>Running</code> （运行中）和<code>Terminated</code>（已终止）。<a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/pod-lifecycle/" target="_blank" rel="noreferrer">器状态官方站点</a></p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202404121725738.png" alt="image-20240412172455369"></p><h2 id="_5-4-阶段状态实践" tabindex="-1">5.4 阶段状态实践 <a class="header-anchor" href="#_5-4-阶段状态实践" aria-label="Permalink to &quot;5.4 阶段状态实践&quot;">​</a></h2><ul><li>模拟Pod状态为Pending、⽽容器状态为waiting</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">wordpress</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--image=wordpress</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">describe</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">wordpress</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">wordpress</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--image=wordpress</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">describe</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">wordpress</span></span></code></pre></div><ul><li>模拟Pod状态为Running、⽽容器状态为waiting</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">busbox</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--image=busbox</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">busbox</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--image=busbox</span></span></code></pre></div><ul><li>模拟Pod状态为Failed，⽽容器状态为Terminated</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">cat pod_never.yml</span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-never</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Never</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># Pod的重启策略</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-always</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    -  </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">cat pod_never.yml</span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-never</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Never</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># Pod的重启策略</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-always</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    -  </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#创建</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apply</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod_never.yml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看这台pod在哪台node上面运行，之后删除容器</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">container_name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看pod状态</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">describe</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod-never</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#创建</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apply</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod_never.yml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看这台pod在哪台node上面运行，之后删除容器</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container_name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看pod状态</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">describe</span><span style="color:#24292E;">  </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod-never</span></span></code></pre></div><ul><li>Failed &amp;&amp; error</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#通过kill 掉</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kill</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">container_name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#通过kill 掉</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kill</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container_name</span></span></code></pre></div><h1 id="_6-pod运行应用对应字段" tabindex="-1">6.Pod运行应用对应字段 <a class="header-anchor" href="#_6-pod运行应用对应字段" aria-label="Permalink to &quot;6.Pod运行应用对应字段&quot;">​</a></h1><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><h2 id="自定义容器命令与参数" tabindex="-1">自定义容器命令与参数 <a class="header-anchor" href="#自定义容器命令与参数" aria-label="Permalink to &quot;自定义容器命令与参数&quot;">​</a></h2><h1 id="_7-pod重启策略" tabindex="-1">7.Pod重启策略 <a class="header-anchor" href="#_7-pod重启策略" aria-label="Permalink to &quot;7.Pod重启策略&quot;">​</a></h1><p>Pod 的 spec 中包含⼀个 <code>restartPolicy</code> 字段，⽤来设置 Pod 中所有容器的重启策略，取值有<code>Always</code>、<code>OnFailure</code>、<code>Never</code>。默认值是<code>Always</code></p><ul><li>Always：当容器出现异常退出时，kubelet 会尝试重启该容器，已恢复正常状态；（默认策略）</li><li>Never：当容器退出时，kubelet 永远不会尝试重启该容器（适合Job类⼀次性任务)</li><li>OnFailure：当容器异常退出（且退出状态码⾮0时），kubelet会尝试重启容器（适合Job类⼀次性任务）</li></ul><div class="danger custom-block"><p class="custom-block-title">❌ 注意</p><p>通过 kubelet 重新启动的容器，后续如果还出现异常退出，则会以指数增加延迟（10s，20s，40s…）来进⾏容器的重新创建和启动，其最⻓延迟为 5 分钟。⼀旦容器执⾏了 10 分钟并且没有出现问题，kubelet 对该容器的重启计时器进⾏重置为初始状态。</p></div><h2 id="_7-1always" tabindex="-1">7.1Always <a class="header-anchor" href="#_7-1always" aria-label="Permalink to &quot;7.1Always&quot;">​</a></h2><p>1.编写yaml文件</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-always</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Always</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># Pod的重启策略</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-always</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    -  </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-always</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Always</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># Pod的重启策略</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-always</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    -  </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span></code></pre></div><p>2.检查Pod的运⾏状态，可以看到 Pod 正常运⾏，RESTARTS（重启次数）字段为 0</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">RESTARTS</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">pod-always</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">/1</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Running</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">80</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">    </span><span style="color:#032F62;">RESTARTS</span><span style="color:#24292E;">     </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">pod-always</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">/1</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Running</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">            </span><span style="color:#005CC5;">80</span><span style="color:#032F62;">s</span></span></code></pre></div><p>3.<code>正常停⽌容器应⽤</code>，可以看到容器被重启了⼀次，然后Pod⼜恢复正常状态了；</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl exec pod-always -- /bin/bash -c </span><span style="color:#9ECBFF;">&quot;nginx -s quit&quot;</span></span>
<span class="line"><span style="color:#B392F0;">2024/04/12</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">:11:27</span><span style="color:#E1E4E8;"> [notice] 37#37: signal process started</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">RESTARTS</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">pod-always</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">/1</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Running</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> (26s </span><span style="color:#9ECBFF;">ago</span><span style="color:#E1E4E8;">)   3m58s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl exec pod-always -- /bin/bash -c </span><span style="color:#032F62;">&quot;nginx -s quit&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">2024/04/12</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">:11:27</span><span style="color:#24292E;"> [notice] 37#37: signal process started</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">    </span><span style="color:#032F62;">RESTARTS</span><span style="color:#24292E;">      </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">pod-always</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">/1</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Running</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> (26s </span><span style="color:#032F62;">ago</span><span style="color:#24292E;">)   3m58s</span></span></code></pre></div><p>4.<code>⾮正常停⽌容器应⽤</code>，可以看到容器被终⽌了，并且重启次数再次增加1次；</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl exec pod-always -- /bin/bash -c </span><span style="color:#9ECBFF;">&quot;kill 1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">RESTARTS</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">pod-always</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">/1</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Completed</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> (2m22s </span><span style="color:#9ECBFF;">ago</span><span style="color:#E1E4E8;">)   5m54s</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">RESTARTS</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">pod-always</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">/1</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Running</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> (27s </span><span style="color:#9ECBFF;">ago</span><span style="color:#E1E4E8;">)   6m19s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl exec pod-always -- /bin/bash -c </span><span style="color:#032F62;">&quot;kill 1&quot;</span></span>
<span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">      </span><span style="color:#032F62;">RESTARTS</span><span style="color:#24292E;">        </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">pod-always</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">/1</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Completed</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> (2m22s </span><span style="color:#032F62;">ago</span><span style="color:#24292E;">)   5m54s</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">    </span><span style="color:#032F62;">RESTARTS</span><span style="color:#24292E;">      </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">pod-always</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">/1</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Running</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> (27s </span><span style="color:#032F62;">ago</span><span style="color:#24292E;">)   6m19s</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">💡 说明</p><p>重启策略-Always，在创建单个 Pod 的情况下，不管 Pod 中的容器是否正常停⽌，最终都会恢复</p></div><h2 id="_7-2-never" tabindex="-1">7.2 Never <a class="header-anchor" href="#_7-2-never" aria-label="Permalink to &quot;7.2 Never&quot;">​</a></h2><p>1.编写Pod的yaml⽂件</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-never</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Never</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># Pod的重启策略</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-always</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    -  </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-never</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Never</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># Pod的重启策略</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-always</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    -  </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span></code></pre></div><p>kubectl apply -f pod_never.yml</p><p>2.检查Pod的运⾏状态，可以看到 Pod 正常运⾏，RESTARTS（重启次数）字段为 0</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">RESTARTS</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">pod-never</span><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">/1</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Running</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">    </span><span style="color:#032F62;">RESTARTS</span><span style="color:#24292E;">        </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">pod-never</span><span style="color:#24292E;">                </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">/1</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Running</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">s</span></span></code></pre></div><p>3.<code>⽆论正常或异常停⽌容器应⽤</code>，容器不会重启应⽤；</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl exec pod-never -- /bin/bash -c </span><span style="color:#9ECBFF;">&quot;nginx -s quit&quot;</span></span>
<span class="line"><span style="color:#B392F0;">2024/04/12</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">:19:35</span><span style="color:#E1E4E8;"> [notice] 31#31: signal process started</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">RESTARTS</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">pod-never</span><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">/1</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Completed</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">m26s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl exec pod-never -- /bin/bash -c </span><span style="color:#032F62;">&quot;nginx -s quit&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">2024/04/12</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">:19:35</span><span style="color:#24292E;"> [notice] 31#31: signal process started</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">      </span><span style="color:#032F62;">RESTARTS</span><span style="color:#24292E;">       </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">pod-never</span><span style="color:#24292E;">                </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">/1</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Completed</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">              </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">m26s</span></span></code></pre></div><h2 id="_7-3-onfailure" tabindex="-1">7.3 OnFailure <a class="header-anchor" href="#_7-3-onfailure" aria-label="Permalink to &quot;7.3 OnFailure&quot;">​</a></h2><p>1.编写Pod的yaml⽂件</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-OnFailure</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">OnFailure</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># Pod的重启策略</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-always</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    -  </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-OnFailure</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">OnFailure</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># Pod的重启策略</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-always</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    -  </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span></code></pre></div><ul><li>创建</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl apply  -f pod_onfailed.yml</span></span>
<span class="line"><span style="color:#B392F0;">pod/pod-onfailure</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">created</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl apply  -f pod_onfailed.yml</span></span>
<span class="line"><span style="color:#6F42C1;">pod/pod-onfailure</span><span style="color:#24292E;"> </span><span style="color:#032F62;">created</span></span></code></pre></div><p>2.检查Pod的运⾏状态，可以看到 Pod 正常运⾏，RESTARTS（重启次数）字段为 0</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">RESTARTS</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">pod-onfailure</span><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">/1</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Running</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">64</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">      </span><span style="color:#032F62;">RESTARTS</span><span style="color:#24292E;">        </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">pod-onfailure</span><span style="color:#24292E;">            </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">/1</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Running</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">64</span><span style="color:#032F62;">s</span></span></code></pre></div><p>3.<code>正常停⽌容器应⽤</code>，退出状态码为0；会发现容器不会重启；</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl exec pod-onfailure -- /bin/bash -c </span><span style="color:#9ECBFF;">&quot;nginx -s quit&quot;</span></span>
<span class="line"><span style="color:#B392F0;">2024/04/12</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">:24:51</span><span style="color:#E1E4E8;"> [notice] 31#31: signal process started</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">RESTARTS</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">pod-onfailure</span><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">/1</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Completed</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">             </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">m39s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl exec pod-onfailure -- /bin/bash -c </span><span style="color:#032F62;">&quot;nginx -s quit&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">2024/04/12</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">:24:51</span><span style="color:#24292E;"> [notice] 31#31: signal process started</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">      </span><span style="color:#032F62;">RESTARTS</span><span style="color:#24292E;">      </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">pod-onfailure</span><span style="color:#24292E;">            </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">/1</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Completed</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">             </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">m39s</span></span></code></pre></div><p>4.<code>⾮正常停⽌容器应⽤</code>，由于⾮正常停⽌容器，且容器退出状态码不为0，所以会触发重启</p><blockquote><p>如果 kill⽆法触发⾮正常停⽌，可以登录到对应节点，强制杀死</p><p>对应的容器（docker kill ContainerID)</p></blockquote><h1 id="_8-pod生命周期" tabindex="-1">8.Pod生命周期 <a class="header-anchor" href="#_8-pod生命周期" aria-label="Permalink to &quot;8.Pod生命周期&quot;">​</a></h1><p>文档，<a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/pod-lifecycle/" target="_blank" rel="noreferrer">https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/pod-lifecycle/</a></p><h2 id="_8-1什么是生命周期" tabindex="-1">8.1什么是生命周期 <a class="header-anchor" href="#_8-1什么是生命周期" aria-label="Permalink to &quot;8.1什么是生命周期&quot;">​</a></h2><p>​ Pod对象从创建开始至终止退出之间的时间称其为生命周期.</p><h2 id="_8-2生命周期流程" tabindex="-1">8.2生命周期流程 <a class="header-anchor" href="#_8-2生命周期流程" aria-label="Permalink to &quot;8.2生命周期流程&quot;">​</a></h2><p>一个Pod的完整生命周期 过程，其中包含<code>InitContainer</code>、<code>Pod Hook</code>、<code>健康检查</code>三个主要部分</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202404151512974.png" alt="image-20240415151234196"></p><h2 id="_8-3生命周期总结" tabindex="-1">8.3生命周期总结 <a class="header-anchor" href="#_8-3生命周期总结" aria-label="Permalink to &quot;8.3生命周期总结&quot;">​</a></h2><p>1、在启动任何容器之前，先创建pause基础容器，它初始化Pod的环境并为后续加⼊的容器提供共享的名称空间</p><p>2、按顺序以串⾏⽅式运⾏⽤户定义的各个初始化容器进⾏Pod环境初始化，任何⼀个初始化容器运⾏失败都会导致Pod创建失败，⽽后按照restartPolicy的策略进⾏处理，默认为重启</p><p>3、待所有初始化容器成功完成后，启动因此程序容器，如果有多个容器则会并⾏启动，⽽后各⾃维护各⾃的⽣命周期。当容器启动时会同时运⾏主容器上定义的PostStart钩⼦函数，该步骤失败将导致相关容器被重启</p><p>4、运⾏容器启动健康状态监测（startupProbe），判断容器是否启动成功，如果失败，则会根据restartPolicy中定义的策略进⾏处理，如果没有定义，则默认状态为Success</p><p>5、容器启动成功后定期进⾏存活状态监测（liveness）和就绪状态监测（readiness），存活状态监测失败将导致容器重启，⽽就绪状态监测失败会使得该容器从其所属的负载均衡中被移除</p><p>6、终⽌Pod时，会先运⾏preStop钩⼦函数，并在宽限期（terminationGrace-Period-Seconds）结束后终⽌容器，宽限期默认为30秒；</p><h2 id="_8-4-pod创建过程" tabindex="-1">8.4 Pod创建过程 <a class="header-anchor" href="#_8-4-pod创建过程" aria-label="Permalink to &quot;8.4 Pod创建过程&quot;">​</a></h2><ol><li>用户通过kubectl或其他api客户端提交需要创建的pod信息给apiServer</li><li>apiServer开始生成pod对象的信息，并将信息存入etcd，然后返回确认信息至客户端</li><li>apiServer开始反映etcd中的pod对象的变化，其它组件使用watch机制来跟踪检查apiServer上的变动</li><li>scheduler发现有新的pod对象要创建，开始为Pod分配主机并将结果信息更新至apiServer</li><li>node节点上的kubelet发现有pod调度过来，尝试调用docker启动容器，并将结果回送至apiServer</li><li>apiServer将接收到的pod状态信息存入etcd中</li></ol><h2 id="_8-5-pod终止过程" tabindex="-1">8.5 Pod终止过程 <a class="header-anchor" href="#_8-5-pod终止过程" aria-label="Permalink to &quot;8.5 Pod终止过程&quot;">​</a></h2><ol><li>用户向apiServer发送删除pod对象的命令</li><li>apiServcer中的pod对象信息会随着时间的推移而更新，在宽限期内（默认30s），pod被视为dead</li><li>将pod标记为terminating状态</li><li>kubelet在监控到pod对象转为terminating状态的同时启动pod关闭过程</li><li>端点控制器监控到pod对象的关闭行为时将其从所有匹配到此端点的service资源的端点列表中移除</li><li>如果当前pod对象定义了preStop钩子处理器，则在其标记为terminating后即会以同步的方式启动执行</li><li>pod对象中的容器进程收到停止信号</li><li>宽限期结束后，若pod中还存在仍在运行的进程，那么pod对象会收到立即终止的信号</li><li>kubelet请求apiServer将此pod资源的宽限期设置为0从而完成删除操作，此时pod对于用户已不可见</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">简单来说，当</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Kubernetes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">需要终止一个</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">时，它会按照以下步骤进行操作：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">1.设置</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">状态为</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Terminating</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">，并从所有服务的</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Endpoints</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">列表中删除。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">2.执行</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PreStop</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Hook</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">，发送命令或</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HTTP</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">请求到</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">中。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">3.向</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">中的容器发送</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">SIGTERM</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">信号，通知容器即将关闭。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">4.等待指定的优雅终止宽限期（terminationGracePeriod），通常是30秒，期间</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PreStop</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Hook</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">和</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">SIGTERM</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">信号并行执行。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">5.如果</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">在宽限期内终止完成，则</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">被删除。否则，Kubernetes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">将发送</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">SIGKILL</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">信号，强制终止</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">中的容器。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">简单来说，当</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Kubernetes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">需要终止一个</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">时，它会按照以下步骤进行操作：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">1.设置</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">状态为</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Terminating</span><span style="color:#24292E;"> </span><span style="color:#032F62;">，并从所有服务的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Endpoints</span><span style="color:#24292E;"> </span><span style="color:#032F62;">列表中删除。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">2.执行</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PreStop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Hook</span><span style="color:#24292E;"> </span><span style="color:#032F62;">，发送命令或</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HTTP</span><span style="color:#24292E;"> </span><span style="color:#032F62;">请求到</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">中。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">3.向</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">中的容器发送</span><span style="color:#24292E;"> </span><span style="color:#032F62;">SIGTERM</span><span style="color:#24292E;"> </span><span style="color:#032F62;">信号，通知容器即将关闭。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">4.等待指定的优雅终止宽限期（terminationGracePeriod），通常是30秒，期间</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PreStop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Hook</span><span style="color:#24292E;"> </span><span style="color:#032F62;">和</span><span style="color:#24292E;"> </span><span style="color:#032F62;">SIGTERM</span><span style="color:#24292E;"> </span><span style="color:#032F62;">信号并行执行。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">5.如果</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">在宽限期内终止完成，则</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">被删除。否则，Kubernetes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">将发送</span><span style="color:#24292E;"> </span><span style="color:#032F62;">SIGKILL</span><span style="color:#24292E;"> </span><span style="color:#032F62;">信号，强制终止</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">中的容器。</span></span></code></pre></div><h1 id="_9-init-container" tabindex="-1">9.Init Container <a class="header-anchor" href="#_9-init-container" aria-label="Permalink to &quot;9.Init Container&quot;">​</a></h1><h2 id="_9-1基本概念" tabindex="-1">9.1基本概念 <a class="header-anchor" href="#_9-1基本概念" aria-label="Permalink to &quot;9.1基本概念&quot;">​</a></h2><p>Init Container是用来做初始化工作的容器。可以有一个或多个，如果多个按照定义的顺序依次执行，只有所有的执行完后，主容器才启动。由于一个Pod里的存储卷是共享的，所以<code>Init Container</code>里产生的数据可以被主容器使用到，但它仅仅是在Pod启动时，在主容器启动前执行，做初始化工作，如果 Pod 的 Init 容器失败，Kubernetes 会不断地重启该 Pod，直到Init 容器成功为止。如果 Pod 对应的restartPolicy 值为 Never，Kubernetes 不会重新启动 Pod。</p><h2 id="_9-2-原理" tabindex="-1">9.2 原理 <a class="header-anchor" href="#_9-2-原理" aria-label="Permalink to &quot;9.2 原理&quot;">​</a></h2><p>初始化容器的概念原理如下：</p><ol><li>顺序执行 <ul><li>Pod 中可以定义多个初始化容器，它们按照配置文件中定义的顺序依次执行。</li><li>当一个初始化容器成功完成其任务后，Kubernetes 才会启动下一个初始化容器。</li><li>只有当所有初始化容器都成功退出时，Kubernetes 才会启动 Pod 中的主要应用容器。</li></ul></li><li>独立于应用容器 <ul><li>初始化容器与应用容器之间是相互隔离的，它们具有不同的镜像和环境，并且不共享存储卷。</li><li>初始化容器可以访问并修改将被应用容器使用的卷，从而实现为应用容器准备工作目录、下载配置文件、创建数据库或设置网络等任务。</li></ul></li><li>用途 <ul><li>下载或者预热数据：比如从远程服务器拉取配置文件或数据资源到共享卷中。</li><li>依赖检查：确保某些外部服务已经可用，如数据库或消息队列。</li><li>应用初始化：执行复杂的预处理步骤，例如生成密钥对或加密凭据。</li><li>注册信息：向注册中心进行服务注册操作，等待注册成功后再启动应用。</li></ul></li><li>生命周期管理 <ul><li>初始化容器不支持就绪探针（readiness probes），因为它们在Pod准备就绪之前必须完成。</li><li>如果某个初始化容器失败，Kubernetes 将不会启动后续的初始化容器或应用容器，而是等待该容器重新启动并完成其任务。</li></ul></li><li>资源限制 <ul><li>就像普通的容器一样，init容器也可以设置资源限制，如CPU和内存请求/限制，以确保它们不会消耗过多的集群资源。</li></ul></li><li>故障排查 <ul><li>初始化容器失败时，可以通过查看Pod的状态以及容器日志来了解初始化过程中遇到的问题。</li></ul></li></ol><h2 id="_9-3应用场景" tabindex="-1">9.3应⽤场景 <a class="header-anchor" href="#_9-3应用场景" aria-label="Permalink to &quot;9.3应⽤场景&quot;">​</a></h2><p>1、app容器依赖MySQL的数据交互，所以可以启动一个初始化容器检查MySQL服务是否正常，如果正常则启动主容器</p><p>检查MySQL服务是否正常，如果正常则启动主容器</p><p>2、在启动主容器之前，使用初始化容器对系统内核参数进行调优，然后共享给主容器使用</p><p>3、获取集群成员节点地址，为主容器生成对应配置信息，这样主容器启动后，可以通过配置信息加入集群环境</p><h3 id="场景1" tabindex="-1">场景1 <a class="header-anchor" href="#场景1" aria-label="Permalink to &quot;场景1&quot;">​</a></h3><p>1.编写yaml，使⽤初始化容器对MySQL端⼝进⾏检查，如果存活则运⾏Pod，否则就⼀直重启尝试</p><p>vim pod_init_check_mysql.yml</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-check-mysql</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Always</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 初始化容器</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">initContainers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">check-mysql</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">oldxu3957/tools</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;sh&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;nc -z 10.103.236.204 3306&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">securityContext</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">privileged</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> 			</span><span style="color:#6A737D;"># 以特权模式运⾏容器，否则⽆法修改内核参数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 主容器</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">webapps</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-check-mysql</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Always</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 初始化容器</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">initContainers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">check-mysql</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">oldxu3957/tools</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;sh&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;nc -z 10.103.236.204 3306&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">securityContext</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">privileged</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> 			</span><span style="color:#6A737D;"># 以特权模式运⾏容器，否则⽆法修改内核参数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 主容器</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">webapps</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#创建</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl apply  -f pod_init_check_mysql.yml</span></span>
<span class="line"><span style="color:#B392F0;">pod/pod-check-mysql</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">created</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                              </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">RESTARTS</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">pod-check-mysql</span><span style="color:#E1E4E8;">                   </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">/1</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Init:0/1</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">49</span><span style="color:#9ECBFF;">s</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#当MySQL服务没有启动完毕，则该Pod会出现初始化失败，然后触发重启</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                              </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">                  </span><span style="color:#9ECBFF;">RESTARTS</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">pod-check-mysql</span><span style="color:#E1E4E8;">                   </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">/1</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Init:CrashLoopBackOff</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> (16s </span><span style="color:#9ECBFF;">ago</span><span style="color:#E1E4E8;">)     3m37s</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#安装MySQL服务，确保3306对外监听</span></span>
<span class="line"><span style="color:#B392F0;">yum</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mariadb-server</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-y</span></span>
<span class="line"><span style="color:#B392F0;">systemctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mariadb</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#创建</span></span>
<span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl apply  -f pod_init_check_mysql.yml</span></span>
<span class="line"><span style="color:#6F42C1;">pod/pod-check-mysql</span><span style="color:#24292E;"> </span><span style="color:#032F62;">created</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看</span></span>
<span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                              </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">      </span><span style="color:#032F62;">RESTARTS</span><span style="color:#24292E;">        </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">pod-check-mysql</span><span style="color:#24292E;">                   </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">/1</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Init:0/1</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">49</span><span style="color:#032F62;">s</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#当MySQL服务没有启动完毕，则该Pod会出现初始化失败，然后触发重启</span></span>
<span class="line"><span style="color:#24292E;">[root@kube-master yaml]# kubectl get pod</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                              </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">                  </span><span style="color:#032F62;">RESTARTS</span><span style="color:#24292E;">        </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">pod-check-mysql</span><span style="color:#24292E;">                   </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">/1</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Init:CrashLoopBackOff</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> (16s </span><span style="color:#032F62;">ago</span><span style="color:#24292E;">)     3m37s</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#安装MySQL服务，确保3306对外监听</span></span>
<span class="line"><span style="color:#6F42C1;">yum</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mariadb-server</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span></span>
<span class="line"><span style="color:#6F42C1;">systemctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mariadb</span></span></code></pre></div><h1 id="_10-pod-hook" tabindex="-1">10.Pod Hook <a class="header-anchor" href="#_10-pod-hook" aria-label="Permalink to &quot;10.Pod Hook&quot;">​</a></h1><p>容器⽣命周期钩⼦（Container Lifecycle Hooks）监听容器⽣命周期的特定事件，并在事件发⽣时执⾏已注册的回调函数。</p><p>Kubernetes支持postStart和preStop事件。当一个容器启动后，Kubernetes将立即发送postStart事件；在容器被终结之前，Kubernetes 将发送一个 preStop 事件。容器可以为每个事件指定一个处理程序。</p><h2 id="_10-1两种钩子" tabindex="-1">10.1两种钩子 <a class="header-anchor" href="#_10-1两种钩子" aria-label="Permalink to &quot;10.1两种钩子&quot;">​</a></h2><h3 id="poststart" tabindex="-1">postStart <a class="header-anchor" href="#poststart" aria-label="Permalink to &quot;postStart&quot;">​</a></h3><p>postStart：容器创建后立即执行，由于是异步执行，它无法保证一定在容器之前运行。如果失败，容器会被杀死，并根据RestartPolicy决定是否重启</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#查看语法</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">explain</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod.spec.containers.lifecycle</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#查看语法</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">explain</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod.spec.containers.lifecycle</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#通过postStart设定端口重定向，将请求本机的80调度到本机的8080端口</span></span>
<span class="line"><span style="color:#85E89D;">lifecycle</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">postStart</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">exec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&quot;/bin/bash&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&quot;-c&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&quot;iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#通过postStart设定端口重定向，将请求本机的80调度到本机的8080端口</span></span>
<span class="line"><span style="color:#22863A;">lifecycle</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">postStart</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">exec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">command</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;/bin/bash&quot;</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;-c&quot;</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080&quot;</span></span></code></pre></div><h3 id="prestop" tabindex="-1">preStop <a class="header-anchor" href="#prestop" aria-label="Permalink to &quot;preStop&quot;">​</a></h3><p>preStop：在容器终止前执行。用于：释放占用的资源、清理注册过的信息、优雅的关闭进程。在其完成之前会阻塞删除容器的操作，默认等待时间为3θs，可以通过terminationGracePeriodSeconds宽限时间</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#runner主要用来编译打包提高CI效率。启动后会注册到gitlab上，后续不需要可以删除Pod，然后清理注册信息。#通过preStop清理runner注册信息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#85E89D;">lifecycle</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">preStop</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">exec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">/bin/bash</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">-c</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&quot;/usr/bin/gitlab-runner unregister --name $RUNNER_NAME&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#runner主要用来编译打包提高CI效率。启动后会注册到gitlab上，后续不需要可以删除Pod，然后清理注册信息。#通过preStop清理runner注册信息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">lifecycle</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">preStop</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">exec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">command</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">/bin/bash</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">-c</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;/usr/bin/gitlab-runner unregister --name $RUNNER_NAME&quot;</span></span></code></pre></div><h2 id="_10-2-案例" tabindex="-1">10.2 案例 <a class="header-anchor" href="#_10-2-案例" aria-label="Permalink to &quot;10.2 案例&quot;">​</a></h2><p>postStart 命令在容器的/usr/share/nginx/html/index.html自定义一段内容 preStop 负责优雅地终止 nginx 服务。<code>terminationGracePeriodSeconds</code>：宽限期，如果超过宽限期pod还没有终止，则会由SIGKILL强制关闭信号介入。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-lifecycles</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx:latest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">lifecycle</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">postStart</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">exec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#9ECBFF;">&quot;/bin/sh&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#9ECBFF;">&quot;-c&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#9ECBFF;">&quot;echo Hello from the postStart handler &gt; /usr/share/nginx/html/index.html&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">preStop</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">exec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#9ECBFF;">&quot;/bin/sh&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#9ECBFF;">&quot;-c&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#9ECBFF;">&quot;nginx -s quit&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-lifecycles</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx:latest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">lifecycle</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">postStart</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">exec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">command</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#032F62;">&quot;/bin/sh&quot;</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#032F62;">&quot;-c&quot;</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#032F62;">&quot;echo Hello from the postStart handler &gt; /usr/share/nginx/html/index.html&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">preStop</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">exec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">command</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#032F62;">&quot;/bin/sh&quot;</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#032F62;">&quot;-c&quot;</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#032F62;">&quot;nginx -s quit&quot;</span></span></code></pre></div><h1 id="_11-pod检测探针" tabindex="-1">11. Pod检测探针 <a class="header-anchor" href="#_11-pod检测探针" aria-label="Permalink to &quot;11. Pod检测探针&quot;">​</a></h1><h2 id="_11-1-需要探针原因" tabindex="-1">11.1 需要探针原因 <a class="header-anchor" href="#_11-1-需要探针原因" aria-label="Permalink to &quot;11.1 需要探针原因&quot;">​</a></h2><p>当容器进程运行时如果出现了异常退出，Kubernetes则会认为容器发生故障，会尝试进行重启解决该问题。但有不少情况是发生了故障，但进程并没有退出。比如访问Web服务器时出现了500的内错误，可能是系统超载，也可能是资源死锁，但nginx进程并没有异常退出，在这种情况下重启容器可能是最佳的方法。那如何来实现这个检测呢</p><p>Kubernetes使用探针（probe）的方式来保障容器正常运行，实现零岩机；它通过kubeLet定期对容器进行健康检查（exec、tcp、http），当探针检测到容器状态异常时，会通过重启策略来进行重启或重建完成修复。修复后继续进行探针检测，已确保容器稳定运行</p><h2 id="_11-2-探针探测类型" tabindex="-1">11.2 探针探测类型 <a class="header-anchor" href="#_11-2-探针探测类型" aria-label="Permalink to &quot;11.2 探针探测类型&quot;">​</a></h2><h3 id="startupprobe" tabindex="-1">startupProbe <a class="header-anchor" href="#startupprobe" aria-label="Permalink to &quot;startupProbe&quot;">​</a></h3><p>用于检测容器中的应用是否已经正常启动。如果使用了启动探针，则所有其他探针都会被禁用，需要等待启动探针检测成功之后才可以执行。如果启动探针探测失败，则kubeLet会将容器杀死，而容器依其重启策略进行重启。如果容器没有提供启动探测，则默认状态为Success<code>（1.16 版本增加的）</code></p><h3 id="livenessprobe" tabindex="-1">livenessProbe <a class="header-anchor" href="#livenessprobe" aria-label="Permalink to &quot;livenessProbe&quot;">​</a></h3><p>用于检测容器是否存活，如果存活探测检测失败，kubelet会杀死容器，然后根据容器重启策略，决定是否重启该容器。如果容器不提供存活探针，则默认状态为Success</p><h3 id="readinessprobe" tabindex="-1">readinessProbe <a class="header-anchor" href="#readinessprobe" aria-label="Permalink to &quot;readinessProbe&quot;">​</a></h3><p>指容器是否准备好接收网络请求，如果就绪探测失败，则将容器设定为未就绪状态，然后将其从负载均衡列表中移除，这样就不会有请求会调度到该Pod上；如果容器不提供就绪态探针，则默认状态为Success.</p><h2 id="_11-3探针检查机制" tabindex="-1">11.3探针检查机制 <a class="header-anchor" href="#_11-3探针检查机制" aria-label="Permalink to &quot;11.3探针检查机制&quot;">​</a></h2><ul><li>exec：在容器内执⾏指定命令。如果命令退出时返回码为 0 则认为诊断成功。</li><li>httpGet：对指定的IP、端⼝，执⾏HTTP请求。如果响应的状态码⼤于等于200且⼩于400，则诊断被认为是成功的。</li><li>tcpSocket：对容器的 IP 地址上的指定端⼝执⾏ TCP 检查。如果端⼝打开，则诊断被认为是成功的</li></ul><p>每次探测都将获得以下三种结果之⼀：</p><p>Success（成功）：容器通过了诊断。</p><p>Failure（失败）：容器未通过诊断，可能会触发重启操作</p><p>Unknown（未知）：诊断失败，因此不会采取任何⾏动</p><h2 id="_11-4格式" tabindex="-1">11.4格式 <a class="header-anchor" href="#_11-4格式" aria-label="Permalink to &quot;11.4格式&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">probe</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx:latest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">livenessProbe</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">exec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">httpGet</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">tcpSocket</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">initialDelaySeconds</span><span style="color:#E1E4E8;">: 	</span><span style="color:#6A737D;">#延迟多久探测</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">PeriodSeconds</span><span style="color:#E1E4E8;">: 		</span><span style="color:#6A737D;">#探测频率</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">timeoutSeconds</span><span style="color:#E1E4E8;">: 		</span><span style="color:#6A737D;">#探针超市</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">successThreshold</span><span style="color:#E1E4E8;">: 	</span><span style="color:#6A737D;">#成功N次，则认为是成功</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">failureThreshold</span><span style="color:#E1E4E8;">: 	</span><span style="color:#6A737D;">#失败N次，则认为是失败</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">probe</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx:latest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">livenessProbe</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">exec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">httpGet</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">tcpSocket</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">initialDelaySeconds</span><span style="color:#24292E;">: 	</span><span style="color:#6A737D;">#延迟多久探测</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">PeriodSeconds</span><span style="color:#24292E;">: 		</span><span style="color:#6A737D;">#探测频率</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">timeoutSeconds</span><span style="color:#24292E;">: 		</span><span style="color:#6A737D;">#探针超市</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">successThreshold</span><span style="color:#24292E;">: 	</span><span style="color:#6A737D;">#成功N次，则认为是成功</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">failureThreshold</span><span style="color:#24292E;">: 	</span><span style="color:#6A737D;">#失败N次，则认为是失败</span></span></code></pre></div><h2 id="_11-5-区别" tabindex="-1">11.5 区别 <a class="header-anchor" href="#_11-5-区别" aria-label="Permalink to &quot;11.5 区别&quot;">​</a></h2><h3 id="readinessprobe-与-livenessprobe-的区别" tabindex="-1">ReadinessProbe 与 LivenessProbe 的区别 <a class="header-anchor" href="#readinessprobe-与-livenessprobe-的区别" aria-label="Permalink to &quot;ReadinessProbe 与 LivenessProbe 的区别&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ReadinessProbe 当检测失败后，将 Pod 的 IP:Port 从对应的 EndPoint 列表中删除。</span></span>
<span class="line"><span style="color:#e1e4e8;">livenessProbe 当检测失败后，将杀死容器并根据 Pod 的重启策略来决定作出对应的措施。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ReadinessProbe 当检测失败后，将 Pod 的 IP:Port 从对应的 EndPoint 列表中删除。</span></span>
<span class="line"><span style="color:#24292e;">livenessProbe 当检测失败后，将杀死容器并根据 Pod 的重启策略来决定作出对应的措施。</span></span></code></pre></div><h3 id="startupprobe-与-readinessprobe、livenessprobe-的区别" tabindex="-1">StartupProbe 与 ReadinessProbe、LivenessProbe 的区别 <a class="header-anchor" href="#startupprobe-与-readinessprobe、livenessprobe-的区别" aria-label="Permalink to &quot;StartupProbe 与 ReadinessProbe、LivenessProbe 的区别&quot;">​</a></h3><p>如果三个探针同时存在，先执行 StartupProbe 探针，其他两个探针将会被暂时禁用，直到 pod 满足 StartupProbe 探针配置的条件，其他 2 个探针启动，如果不满足按照规则重启容器。另外两种探针在容器启动后，会按照配置，直到容器消亡才停止探测，而 StartupProbe 探针只是在容器启动后按照配置满足一次后，不再进行后续的探测。</p><h2 id="_11-6-什么时候使用探针" tabindex="-1">11.6 什么时候使用探针？ <a class="header-anchor" href="#_11-6-什么时候使用探针" aria-label="Permalink to &quot;11.6 什么时候使用探针？&quot;">​</a></h2><h3 id="何时使用存活探针-liveness-probe" tabindex="-1">何时使用存活探针（Liveness Probe） <a class="header-anchor" href="#何时使用存活探针-liveness-probe" aria-label="Permalink to &quot;何时使用存活探针（Liveness Probe）&quot;">​</a></h3><ul><li><p><strong>容器可能卡死或无响应</strong>：如果你的应用程序在遇到问题时可能卡死或进入无响应状态，而不会自行崩溃，那么就应该使用存活探针。Liveness Probe 可以检测到这些状态，并触发 kubelet 终止并重启容器。</p></li><li><p><strong>确保自动重启</strong>：如果你希望容器在探测失败时被杀死并重新启动，以确保应用的持续可用性，那么应配置存活探针。此时，可以将 <code>restartPolicy</code> 设置为 <code>Always</code> 或 <code>OnFailure</code>，以确保在探针检测到问题时容器能够自动重启。</p></li></ul><h3 id="何时使用就绪探针-read-iness-probe" tabindex="-1">何时使用就绪探针（Read iness Probe） <a class="header-anchor" href="#何时使用就绪探针-read-iness-probe" aria-label="Permalink to &quot;何时使用就绪探针（Read iness Probe）&quot;">​</a></h3><ul><li><p><strong>控制流量路由</strong>：如果你希望只有在探测成功时才开始向 Pod 发送请求流量，就需要指定就绪探针。就绪探针常与存活探针相同，但它确保 Pod 在启动阶段不会接收任何数据，只有探测成功后才开始接收流量。</p></li><li><p><strong>维护状态</strong>：如果希望容器能自行进入维护状态，可以使用就绪探针，检查与存活探针不同的特定端点。对于依赖于后端服务的应用程序，可以同时使用存活探针和就绪探针。存活探针检测容器本身的健康状况，而就绪探针则确保所需的后端服务可用，避免将流量导向出错的 Pod。</p></li><li><p><strong>Pod 删除</strong>：注意，如果只是想在 Pod 被删除时排空请求，通常不需要使用就绪探针。Pod 在删除时会自动进入未就绪状态，无论是否有就绪探针，直到容器停止为止。</p></li></ul><h3 id="何时使用启动探针-startup-probe" tabindex="-1">何时使用启动探针（Startup Probe） <a class="header-anchor" href="#何时使用启动探针-startup-probe" aria-label="Permalink to &quot;何时使用启动探针（Startup Probe）&quot;">​</a></h3><ul><li><strong>应用启动慢</strong>：如果容器在启动期间需要加载大型数据或配置文件，可以使用启动探针。它确保在启动完成前不会触发其他探针。</li></ul><h2 id="_11-7案例" tabindex="-1">11.7案例 <a class="header-anchor" href="#_11-7案例" aria-label="Permalink to &quot;11.7案例&quot;">​</a></h2><h3 id="_1-startupprobe" tabindex="-1">1.startupProbe <a class="header-anchor" href="#_1-startupprobe" aria-label="Permalink to &quot;1.startupProbe&quot;">​</a></h3><h4 id="exec" tabindex="-1">exec <a class="header-anchor" href="#exec" aria-label="Permalink to &quot;exec&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">执行一段命令，根据返回值判断执行结果。</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">返回值为0,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">非0两种结果，可以理解为&quot;echo </span><span style="color:#79B8FF;">$?</span><span style="color:#9ECBFF;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">执行一段命令，根据返回值判断执行结果。</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">返回值为0,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">非0两种结果，可以理解为&quot;echo </span><span style="color:#005CC5;">$?</span><span style="color:#032F62;">&quot;</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">explain</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod.spec.containers.startupProbe.exec</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">explain</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod.spec.containers.startupProbe.exec</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-startup</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demoapp</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">startupProbe</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">exec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">&quot;/bin/sh&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">&quot;-c&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">&quot;ps aux | grp demo.py&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">initialDelaySeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;"># 容器启动多久后开始探测，默认0</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">periodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;"># 探测频率,10s探测⼀次</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">timeoutSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;"># 探测超时时长</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">successThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;"># 成功多少次则为成功，默认1次</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">failureThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;"># 失败多少次则为失败，默认3次</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-startup</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demoapp</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">startupProbe</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">exec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">command</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">&quot;/bin/sh&quot;</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">&quot;-c&quot;</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">&quot;ps aux | grp demo.py&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">initialDelaySeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">	</span><span style="color:#6A737D;"># 容器启动多久后开始探测，默认0</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">periodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">			</span><span style="color:#6A737D;"># 探测频率,10s探测⼀次</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">timeoutSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">		</span><span style="color:#6A737D;"># 探测超时时长</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">successThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">		</span><span style="color:#6A737D;"># 成功多少次则为成功，默认1次</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">failureThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">		</span><span style="color:#6A737D;"># 失败多少次则为失败，默认3次</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#第一次探测失败多久会重启</span></span>
<span class="line"><span style="color:#e1e4e8;"># initialDelaySeconds + (periodSeconds +timeoutSeconds) * failureThreshold</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">#程序启动完成后：此时不需要计入initiaLDelaySeconds</span></span>
<span class="line"><span style="color:#e1e4e8;"># (periodSeconds + timeoutSeconds)*failureThreshold</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#第一次探测失败多久会重启</span></span>
<span class="line"><span style="color:#24292e;"># initialDelaySeconds + (periodSeconds +timeoutSeconds) * failureThreshold</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">#程序启动完成后：此时不需要计入initiaLDelaySeconds</span></span>
<span class="line"><span style="color:#24292e;"># (periodSeconds + timeoutSeconds)*failureThreshold</span></span></code></pre></div><h4 id="httpget" tabindex="-1">httpGet <a class="header-anchor" href="#httpget" aria-label="Permalink to &quot;httpGet&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">通过发起HTTTP协议的GET请求检测某个http请求的返回状态码，从而判断服务是否正常。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">常见的状态码分为很多类，比如:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2xx,3xx&quot;正常,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;4xx,5xx&quot;错误。</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#B392F0;">200:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">返回状态码成功。</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#B392F0;">301:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">永久跳转，会将跳转信息缓存到浏览器本地。</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#B392F0;">302:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">临时跳转，并不会将本次跳转缓存到本地。</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#B392F0;">401:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">验证失败。</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#B392F0;">403:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">权限被拒绝。</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#B392F0;">404:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">文件找不到。</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#B392F0;">413:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">文件上传过大。</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#B392F0;">500:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">服务器内部错误。</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#B392F0;">502:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">无效的请求。</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#B392F0;">504:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">后端应用网关相应超时。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">通过发起HTTTP协议的GET请求检测某个http请求的返回状态码，从而判断服务是否正常。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">常见的状态码分为很多类，比如:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2xx,3xx&quot;正常,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;4xx,5xx&quot;错误。</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">200:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">返回状态码成功。</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">301:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">永久跳转，会将跳转信息缓存到浏览器本地。</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">302:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">临时跳转，并不会将本次跳转缓存到本地。</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">401:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">验证失败。</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">403:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">权限被拒绝。</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">404:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">文件找不到。</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">413:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">文件上传过大。</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">500:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">服务器内部错误。</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">502:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">无效的请求。</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">504:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">后端应用网关相应超时。</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">explain</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod.spec.containers.startupProbe.httpGet</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">explain</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod.spec.containers.startupProbe.httpGet</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-startup</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demoapp</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">startupProbe</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">httpGet</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">scheme</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">HTTP</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">initialDelaySeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">periodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">timeoutSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">successThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">failureThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-startup</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demoapp</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">startupProbe</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">httpGet</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">scheme</span><span style="color:#24292E;">: </span><span style="color:#032F62;">HTTP</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">initialDelaySeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">periodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">timeoutSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">successThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">failureThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span></span></code></pre></div><h4 id="tcpsocket" tabindex="-1">tcpSocket <a class="header-anchor" href="#tcpsocket" aria-label="Permalink to &quot;tcpSocket&quot;">​</a></h4><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-startup</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demoapp</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">startupProbe</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">tcpSocket</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">scheme</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">HTTP</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">initialDelaySeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">periodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">timeoutSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">successThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">failureThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-startup</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demoapp</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">startupProbe</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">tcpSocket</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">scheme</span><span style="color:#24292E;">: </span><span style="color:#032F62;">HTTP</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">initialDelaySeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">periodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">timeoutSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">successThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">failureThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span></span></code></pre></div><h3 id="_2-livenessprobe" tabindex="-1">2.livenessProbe <a class="header-anchor" href="#_2-livenessprobe" aria-label="Permalink to &quot;2.livenessProbe&quot;">​</a></h3><p>用于检测容器是否存活，<code>如果存活探测检测失败，kubelet会杀死容器，然后根据容器重启策略，决定是否重启该容器</code>。如果容器不提供存活探针，则默认状态为Success</p><h4 id="exec-1" tabindex="-1">exec <a class="header-anchor" href="#exec-1" aria-label="Permalink to &quot;exec&quot;">​</a></h4><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-liveness</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demoapp</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">livenessProbe</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">exec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">&quot;/bin/sh&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">&quot;-c&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">&#39;[ &quot;$(curl -s 127.0.0.1/livez)&quot; == &quot;OK&quot; ]&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">initialDelaySeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">periodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">timeoutSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">successThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">failureThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-liveness</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demoapp</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">livenessProbe</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">exec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">command</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">&quot;/bin/sh&quot;</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">&quot;-c&quot;</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">&#39;[ &quot;$(curl -s 127.0.0.1/livez)&quot; == &quot;OK&quot; ]&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">initialDelaySeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">periodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">timeoutSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">successThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">failureThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span></span></code></pre></div><p>为了测试存活状态监测效果，可以⼿动将/livez接⼝的响应内容修改为任意值</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod-liveness-exec</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-S</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-X</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">POST</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;livez=error&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http://127.0.0.1/livez</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod-liveness-exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-S</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-X</span><span style="color:#24292E;"> </span><span style="color:#032F62;">POST</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;livez=error&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http://127.0.0.1/livez</span></span></code></pre></div><p>会发现容器等待60s之后，会触发重启操作</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">describe</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod-liveness</span></span>
<span class="line"><span style="color:#79B8FF;">.....</span></span>
<span class="line"><span style="color:#B392F0;">Events:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Type</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Reason</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Age</span><span style="color:#E1E4E8;">                   </span><span style="color:#9ECBFF;">From</span><span style="color:#E1E4E8;">               </span><span style="color:#9ECBFF;">Message</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">----</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">------</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">----</span><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">----</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">-------</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Normal</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Scheduled</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">20</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;">                   </span><span style="color:#9ECBFF;">default-scheduler</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">Successfully</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assigned</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">default/pod-liveness</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kube-node01</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Normal</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Pulled</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;"> (x4 </span><span style="color:#9ECBFF;">over</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;">)     kubelet            Container image </span><span style="color:#9ECBFF;">&quot;registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1&quot;</span><span style="color:#E1E4E8;"> already present on machine</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Normal</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Created</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;"> (x4 </span><span style="color:#9ECBFF;">over</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;">)     kubelet            Created container demoapp</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Normal</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Started</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;"> (x4 </span><span style="color:#9ECBFF;">over</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;">)     kubelet            Started container demoapp</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Warning</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">Unhealthy</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">m13s</span><span style="color:#E1E4E8;"> (x12 </span><span style="color:#9ECBFF;">over</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">19</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;">)  kubelet            Liveness probe failed:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Normal</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Killing</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">m13s</span><span style="color:#E1E4E8;"> (x4 </span><span style="color:#9ECBFF;">over</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">19</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;">)   kubelet            Container demoapp failed liveness probe, will be restarted</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">describe</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod-liveness</span></span>
<span class="line"><span style="color:#005CC5;">.....</span></span>
<span class="line"><span style="color:#6F42C1;">Events:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Type</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Reason</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Age</span><span style="color:#24292E;">                   </span><span style="color:#032F62;">From</span><span style="color:#24292E;">               </span><span style="color:#032F62;">Message</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">----</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">------</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">----</span><span style="color:#24292E;">                  </span><span style="color:#005CC5;">----</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">-------</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Normal</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Scheduled</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">20</span><span style="color:#032F62;">m</span><span style="color:#24292E;">                   </span><span style="color:#032F62;">default-scheduler</span><span style="color:#24292E;">  </span><span style="color:#032F62;">Successfully</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assigned</span><span style="color:#24292E;"> </span><span style="color:#032F62;">default/pod-liveness</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kube-node01</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Normal</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Pulled</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">m</span><span style="color:#24292E;"> (x4 </span><span style="color:#032F62;">over</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#032F62;">m</span><span style="color:#24292E;">)     kubelet            Container image </span><span style="color:#032F62;">&quot;registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1&quot;</span><span style="color:#24292E;"> already present on machine</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Normal</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Created</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">m</span><span style="color:#24292E;"> (x4 </span><span style="color:#032F62;">over</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#032F62;">m</span><span style="color:#24292E;">)     kubelet            Created container demoapp</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Normal</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Started</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">m</span><span style="color:#24292E;"> (x4 </span><span style="color:#032F62;">over</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#032F62;">m</span><span style="color:#24292E;">)     kubelet            Started container demoapp</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Warning</span><span style="color:#24292E;">  </span><span style="color:#032F62;">Unhealthy</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">m13s</span><span style="color:#24292E;"> (x12 </span><span style="color:#032F62;">over</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">19</span><span style="color:#032F62;">m</span><span style="color:#24292E;">)  kubelet            Liveness probe failed:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Normal</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Killing</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">m13s</span><span style="color:#24292E;"> (x4 </span><span style="color:#032F62;">over</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">19</span><span style="color:#032F62;">m</span><span style="color:#24292E;">)   kubelet            Container demoapp failed liveness probe, will be restarted</span></span></code></pre></div><h4 id="httpget-1" tabindex="-1">httpGet <a class="header-anchor" href="#httpget-1" aria-label="Permalink to &quot;httpGet&quot;">​</a></h4><p>1、编写yaml</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">root@kube-master yaml</span><span style="color:#E1E4E8;">]# </span><span style="color:#9ECBFF;">cat pod-liveness-http.yaml</span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-liveness-http</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-liveness-http</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">livenessProbe</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">httpGet</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;livez&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">scheme</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">HTTP</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">initialDelaySeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">periodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">timeoutSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">successThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">failureThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">root@kube-master yaml</span><span style="color:#24292E;">]# </span><span style="color:#032F62;">cat pod-liveness-http.yaml</span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-liveness-http</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-liveness-http</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">livenessProbe</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">httpGet</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;livez&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">scheme</span><span style="color:#24292E;">: </span><span style="color:#032F62;">HTTP</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">initialDelaySeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">periodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">timeoutSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">successThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">failureThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span></span></code></pre></div><p>2、镜像中定义的默认响应是以200状态码响应，存活状态会成功完成，为了测试存活状态监测效果，可以⼿动将/livez接⼝的响应内容修改为任意值</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod-liveness-http</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-X</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">POST</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;livez=error&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#9ECBFF;">.0.1/livez</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#现象</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@kube-master </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# kubectl describe pod pod-liveness-http</span></span>
<span class="line"><span style="color:#B392F0;">。。。</span></span>
<span class="line"><span style="color:#B392F0;">Events:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Type</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Reason</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Age</span><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">From</span><span style="color:#E1E4E8;">               </span><span style="color:#9ECBFF;">Message</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">----</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">------</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">----</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">----</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">-------</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Normal</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Scheduled</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">18</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">default-scheduler</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">Successfully</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assigned</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">default/pod-liveness-http</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kube-node01</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Warning</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">Unhealthy</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">70</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> (x3 </span><span style="color:#9ECBFF;">over</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">90</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;">)  kubelet            Liveness probe failed: HTTP probe failed with statuscode: 506</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Normal</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Killing</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">70</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">kubelet</span><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">Container</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod-liveness-http</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">liveness</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">probe,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">will</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">restarted</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Normal</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Pulled</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">40</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> (x2 </span><span style="color:#9ECBFF;">over</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;">)  kubelet            Container image </span><span style="color:#9ECBFF;">&quot;registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1&quot;</span><span style="color:#E1E4E8;"> already present on machine</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Normal</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Created</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">40</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> (x2 </span><span style="color:#9ECBFF;">over</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;">)  kubelet            Created container pod-liveness-http</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Normal</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Started</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">40</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> (x2 </span><span style="color:#9ECBFF;">over</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;">)  kubelet            Started container pod-liveness-http</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod-liveness-http</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-X</span><span style="color:#24292E;"> </span><span style="color:#032F62;">POST</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;livez=error&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#032F62;">.0.1/livez</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#现象</span></span>
<span class="line"><span style="color:#24292E;">[root@kube-master </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# kubectl describe pod pod-liveness-http</span></span>
<span class="line"><span style="color:#6F42C1;">。。。</span></span>
<span class="line"><span style="color:#6F42C1;">Events:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Type</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Reason</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Age</span><span style="color:#24292E;">                </span><span style="color:#032F62;">From</span><span style="color:#24292E;">               </span><span style="color:#032F62;">Message</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">----</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">------</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">----</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">----</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">-------</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Normal</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Scheduled</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">18</span><span style="color:#032F62;">m</span><span style="color:#24292E;">                </span><span style="color:#032F62;">default-scheduler</span><span style="color:#24292E;">  </span><span style="color:#032F62;">Successfully</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assigned</span><span style="color:#24292E;"> </span><span style="color:#032F62;">default/pod-liveness-http</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kube-node01</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Warning</span><span style="color:#24292E;">  </span><span style="color:#032F62;">Unhealthy</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">70</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> (x3 </span><span style="color:#032F62;">over</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">90</span><span style="color:#032F62;">s</span><span style="color:#24292E;">)  kubelet            Liveness probe failed: HTTP probe failed with statuscode: 506</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Normal</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Killing</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">70</span><span style="color:#032F62;">s</span><span style="color:#24292E;">                </span><span style="color:#032F62;">kubelet</span><span style="color:#24292E;">            </span><span style="color:#032F62;">Container</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod-liveness-http</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">liveness</span><span style="color:#24292E;"> </span><span style="color:#032F62;">probe,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">will</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">restarted</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Normal</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Pulled</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">40</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> (x2 </span><span style="color:#032F62;">over</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#032F62;">m</span><span style="color:#24292E;">)  kubelet            Container image </span><span style="color:#032F62;">&quot;registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1&quot;</span><span style="color:#24292E;"> already present on machine</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Normal</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Created</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">40</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> (x2 </span><span style="color:#032F62;">over</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#032F62;">m</span><span style="color:#24292E;">)  kubelet            Created container pod-liveness-http</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Normal</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Started</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">40</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> (x2 </span><span style="color:#032F62;">over</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#032F62;">m</span><span style="color:#24292E;">)  kubelet            Started container pod-liveness-http</span></span></code></pre></div><h4 id="tcpsocket-1" tabindex="-1">tcpSocket <a class="header-anchor" href="#tcpsocket-1" aria-label="Permalink to &quot;tcpSocket&quot;">​</a></h4><p>1、编写yaml文件</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">root@kube-master yaml</span><span style="color:#E1E4E8;">]# </span><span style="color:#9ECBFF;">cat pod-liveness-tcp.yaml</span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-liveness-tcp</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-liveness-tcp</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">livenessProbe</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">tcpSocket</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">initialDelaySeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">periodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">timeoutSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">successThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">failureThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">root@kube-master yaml</span><span style="color:#24292E;">]# </span><span style="color:#032F62;">cat pod-liveness-tcp.yaml</span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-liveness-tcp</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-liveness-tcp</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">livenessProbe</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">tcpSocket</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">initialDelaySeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">periodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">timeoutSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">successThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">failureThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span></span></code></pre></div><p>2、直接kill掉这个容器，查看现象</p><h3 id="_3-readinessprobe" tabindex="-1">3.readinessProbe <a class="header-anchor" href="#_3-readinessprobe" aria-label="Permalink to &quot;3.readinessProbe&quot;">​</a></h3><p>指容器是否准备好接收网络请求，<code>如果就绪探测失败，则将容器设定为未就绪状态，然后将其从负载均衡列表中移除</code>，这样就不会有请求会调度到该Pod上；如果容器不提供就绪态探针，则默认状态为Success。</p><p>有些程序启动后需要加载配置或数据，甚至有些程序需要运行预热的过程，需要一定的时间。所以需要避免Pod启动成功后立即让其处理客户端请求，而应该让其初始化完成后转为就绪状态，在对外提供服务。此类应用就需要使用readinessProbe探针</p><h4 id="exec-2" tabindex="-1">exec <a class="header-anchor" href="#exec-2" aria-label="Permalink to &quot;exec&quot;">​</a></h4><p>1、编写yaml文件</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">root@kube-master yaml</span><span style="color:#E1E4E8;">]# </span><span style="color:#9ECBFF;">cat pod-readiness-exec.yaml</span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-readiness-exec</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">readiness</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-readiness-exec</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">readinessProbe</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">exec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">&quot;/bin/sh&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">&quot;-c&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">&#39;[ &quot;$(curl -s 127.0.0.1/livez)&quot; == &quot;OK&quot; ]&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">initialDelaySeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">periodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">timeoutSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">successThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">failureThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">root@kube-master yaml</span><span style="color:#24292E;">]# </span><span style="color:#032F62;">cat pod-readiness-exec.yaml</span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-readiness-exec</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">app</span><span style="color:#24292E;">: </span><span style="color:#032F62;">readiness</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-readiness-exec</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">readinessProbe</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">exec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">command</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">&quot;/bin/sh&quot;</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">&quot;-c&quot;</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">&#39;[ &quot;$(curl -s 127.0.0.1/livez)&quot; == &quot;OK&quot; ]&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">initialDelaySeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">periodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">timeoutSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">successThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">failureThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span></span></code></pre></div><h4 id="httpget-2" tabindex="-1">httpGet <a class="header-anchor" href="#httpget-2" aria-label="Permalink to &quot;httpGet&quot;">​</a></h4><p>1、编写yaml</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span></code></pre></div><p>2、为了测试就绪状态监测效果，将/readyz修改为⾮OK</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod-readiness-http</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-X</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">POST</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;readyz=error&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http://127.0.0.1/readyz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod-readiness-http</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-X</span><span style="color:#24292E;"> </span><span style="color:#032F62;">POST</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;readyz=error&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http://127.0.0.1/readyz</span></span></code></pre></div><p>3、由于pod未就绪，所以会将该节点从Service负载均衡中准为未就绪状态（需要事先创建好负载均衡，否则难以观察效果）</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod-readiness-http</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">describe</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod-readiness-http</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod-readiness-http</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">describe</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod-readiness-http</span></span></code></pre></div><h4 id="tcpsocket-2" tabindex="-1">tcpSocket <a class="header-anchor" href="#tcpsocket-2" aria-label="Permalink to &quot;tcpSocket&quot;">​</a></h4><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">root@kube-master yaml</span><span style="color:#E1E4E8;">]# </span><span style="color:#9ECBFF;">cat pod-readiness-tcp.yaml</span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-readiness-tcp</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">readiness</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-readiness-tcp</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">readinessProbe</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">tcpSocket</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">initialDelaySeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">periodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">timeoutSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">successThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">failureThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">root@kube-master yaml</span><span style="color:#24292E;">]# </span><span style="color:#032F62;">cat pod-readiness-tcp.yaml</span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-readiness-tcp</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">app</span><span style="color:#24292E;">: </span><span style="color:#032F62;">readiness</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-readiness-tcp</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">registry.cn-zhangjiakou.aliyuncs.com/hsuing/demoapp:v1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">readinessProbe</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">tcpSocket</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">initialDelaySeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">periodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">timeoutSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">successThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">failureThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span></span></code></pre></div>`,223),e=[o];function c(t,r,E,y,i,d){return n(),a("div",null,e)}const h=s(p,[["render",c]]);export{u as __pageData,h as default};
