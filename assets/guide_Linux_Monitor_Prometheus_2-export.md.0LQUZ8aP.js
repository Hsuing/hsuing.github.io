import{_ as s,o as e,c as a,R as n}from"./chunks/framework.zUbWieqp.js";const m=JSON.parse('{"title":"1.Exporter","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Linux/Monitor/Prometheus/2-export.md","filePath":"guide/Linux/Monitor/Prometheus/2-export.md","lastUpdated":1739441864000}'),t={name:"guide/Linux/Monitor/Prometheus/2-export.md"},p=n(`<h1 id="_1-exporter" tabindex="-1">1.Exporter <a class="header-anchor" href="#_1-exporter" aria-label="Permalink to &quot;1.Exporter&quot;">​</a></h1><p>只要任何遵循Prometheus数据格式 ，可对其提供监控指标的程序都可以称为Exporter。在Prometheus社区中提供了丰富多样的Exporter供选择，如前面用到的node_exporter。</p><p>这些Exporter不仅类型丰富，功能上也很强大，通过合理的使用可以极大的方便我们的运维监控工作。除此之外，Prometheus还提供了支持多种开发语言的Clinet Libraries，用于满足Exporter的定制化开发需求。</p><h1 id="_2-exporter运行方式" tabindex="-1">2. Exporter运行方式 <a class="header-anchor" href="#_2-exporter运行方式" aria-label="Permalink to &quot;2. Exporter运行方式&quot;">​</a></h1><h2 id="_2-1-独立运行" tabindex="-1">2.1 独立运行 <a class="header-anchor" href="#_2-1-独立运行" aria-label="Permalink to &quot;2.1 独立运行&quot;">​</a></h2><p>前面使用过的node_exporter为例，由于操作系统本身并不直接支持Prometheus，因此，只能通过一个独立运行的程序，从操作系统提供的相关接口将系统的状态参数转换为可供Prometheus读取的监控指标。</p><h2 id="_2-2-应用集成" tabindex="-1">2.2 应用集成 <a class="header-anchor" href="#_2-2-应用集成" aria-label="Permalink to &quot;2.2 应用集成&quot;">​</a></h2><p>由于Prometheus项目的火热，目前有部分开源产品直接在代码层面使用Prometheus的Client Library，提供了在监控上的直接支持，如kubernetes、ETCD等产品。</p><p>这类产品自身提供对应的metrics接口，Prometheus可通过接口直接获取相关的系统指标数据。这种方式打破了监控的界限，应用程序本身做为一个Exporter提供功能。</p><h1 id="_3-常用的exporter" tabindex="-1">3. 常用的Exporter <a class="header-anchor" href="#_3-常用的exporter" aria-label="Permalink to &quot;3. 常用的Exporter&quot;">​</a></h1><p><a href="https://prometheus.io/docs/instrumenting/exporters" target="_blank" rel="noreferrer">https://prometheus.io/docs/instrumenting/exporters</a></p><h1 id="_4-自定义exporter" tabindex="-1">4. 自定义Exporter <a class="header-anchor" href="#_4-自定义exporter" aria-label="Permalink to &quot;4. 自定义Exporter&quot;">​</a></h1><p>虽然Prometheus社区提供了丰富多样的Exporter给用户使用，但由于各家公司的环境都有自身的特点，有时候可能无法在现有资源中找到合适的工具。对此，我们可以利用Prometheus的Clinet Libraries，开发符合实际需要的自定义Exporter。</p><p>Client Libraries支持的语言版本非常丰富，除了官方提供了Go、Java or Scala、Python和Ruby几种外，还有很多第三方开发的其他语言版本。</p><p>比如python</p><p>本次将调用到的Linux的命令如下 ，用于获取系统的TIME_WAIT连接数量</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">netstat</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-an</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">TIME_WAIT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">wc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-l</span></span>
<span class="line"><span style="color:#B392F0;">36</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">netstat</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-an</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TIME_WAIT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">wc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span></span>
<span class="line"><span style="color:#6F42C1;">36</span></span></code></pre></div><p>使用pip安装python的prometheus-client库</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">$ pip install prometheus-client</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">$ pip install prometheus-client</span></span></code></pre></div><p>在Python开发中引入prometheus-client和commands库，command库用于执行Linux系统命令。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">from prometheus_client import Gauge</span></span>
<span class="line"><span style="color:#e1e4e8;">import commands</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">from prometheus_client import Gauge</span></span>
<span class="line"><span style="color:#24292e;">import commands</span></span></code></pre></div><p>定义一个Gauge指标，名称为time_wait_count，并添加标签type。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">time_wait_count = Gauge(&#39;time_wait_count&#39;, &#39;time_wait count of system&#39;,[&#39;type&#39;])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">time_wait_count = Gauge(&#39;time_wait_count&#39;, &#39;time_wait count of system&#39;,[&#39;type&#39;])</span></span></code></pre></div><p>定义执行函数，函数调用上面的Linux命令，用于获取相关的指标信息</p><p>python</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">def get_time_wait_count():</span></span>
<span class="line"><span style="color:#e1e4e8;">    number=commands.getoutput(&#39;netstat -an  |grep TIME_WAIT |wc -l&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;">    time_wait_count.labels(&#39;Linux&#39;).set(int(number))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">def get_time_wait_count():</span></span>
<span class="line"><span style="color:#24292e;">    number=commands.getoutput(&#39;netstat -an  |grep TIME_WAIT |wc -l&#39;)</span></span>
<span class="line"><span style="color:#24292e;">    time_wait_count.labels(&#39;Linux&#39;).set(int(number))</span></span></code></pre></div><p>现在，我们可以通过执行get_time_wait_count函数获取到time_wait_count的指标value，但要做为一个exporter运行，我们还得支持http协议。</p><p>此处，可以用到prometheus_client的start_http_server模块，该模块支持做为http服务启动。 完整的代码如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">from prometheus_client import start_http_server,Gauge</span></span>
<span class="line"><span style="color:#e1e4e8;">import commands</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">time_wait_count = Gauge(&#39;time_wait_count&#39;, &#39;time_wait count of system&#39;,[&#39;type&#39;])</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">def get_time_wait_count():</span></span>
<span class="line"><span style="color:#e1e4e8;">    number=commands.getoutput(&#39;netstat -an  |grep TIME_WAIT |wc -l&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;">    time_wait_count.labels(&#39;Linux&#39;).set(int(number))</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">if __name__ == &#39;__main__&#39;:</span></span>
<span class="line"><span style="color:#e1e4e8;">    # Start up the server to expose the metrics.</span></span>
<span class="line"><span style="color:#e1e4e8;">    start_http_server(8090)</span></span>
<span class="line"><span style="color:#e1e4e8;">    # Generate some requests.</span></span>
<span class="line"><span style="color:#e1e4e8;">    while True:</span></span>
<span class="line"><span style="color:#e1e4e8;">        get_time_wait_count()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">from prometheus_client import start_http_server,Gauge</span></span>
<span class="line"><span style="color:#24292e;">import commands</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">time_wait_count = Gauge(&#39;time_wait_count&#39;, &#39;time_wait count of system&#39;,[&#39;type&#39;])</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">def get_time_wait_count():</span></span>
<span class="line"><span style="color:#24292e;">    number=commands.getoutput(&#39;netstat -an  |grep TIME_WAIT |wc -l&#39;)</span></span>
<span class="line"><span style="color:#24292e;">    time_wait_count.labels(&#39;Linux&#39;).set(int(number))</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">if __name__ == &#39;__main__&#39;:</span></span>
<span class="line"><span style="color:#24292e;">    # Start up the server to expose the metrics.</span></span>
<span class="line"><span style="color:#24292e;">    start_http_server(8090)</span></span>
<span class="line"><span style="color:#24292e;">    # Generate some requests.</span></span>
<span class="line"><span style="color:#24292e;">    while True:</span></span>
<span class="line"><span style="color:#24292e;">        get_time_wait_count()</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">python</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mytest_exporter.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">python</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mytest_exporter.py</span></span></code></pre></div><p><a href="https://www.cnblogs.com/lizexiong/p/15578427.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/lizexiong/p/15578427.html</a></p>`,31),o=[p];function l(r,c,i,u,h,d){return e(),a("div",null,o)}const y=s(t,[["render",l]]);export{m as __pageData,y as default};
