import{_ as s,o as a,c as n,R as l}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/go/算法/1-布隆过滤器.md","filePath":"guide/go/算法/1-布隆过滤器.md","lastUpdated":1701928035000}'),o={name:"guide/go/算法/1-布隆过滤器.md"},p=l(`<h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><blockquote><p>布隆过滤器（英语：Bloom Filter）是 1970 年由布隆提出，是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。 它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。 – 维基百科</p></blockquote><h2 id="查找问题建模" tabindex="-1">查找问题建模 <a class="header-anchor" href="#查找问题建模" aria-label="Permalink to &quot;查找问题建模&quot;">​</a></h2><p><strong>如何判断某个元素是否存在于一个集合中</strong>？</p><p>比较直观的做法是将所有元素保存起来，然后逐个比较确认结果，建模转换为具体的数据结构：</p><ul><li><strong>线性结构</strong>: 数组、链表等，时间复杂度为 O(N), 空间复杂度为 O(N)</li><li><strong>散列表结构</strong>: Map、HashTable 等, 时间复杂度为 O(1), 空间复杂度为 O(N)</li><li><strong>树形结构</strong>: AVL、RBTree 等, 时间复杂度为 O(logN), 空间复杂度为 O(N)</li></ul><p>常见的数据结构随着元素的增加，存储空间也会越来越大，同时查询速度也会越来越慢 (散列表结构不受影响)，如果我们希望在保持时间复杂度为 O(N) 的前提下， 尽可能地降低内存占用，就需要转换一下思路：<strong>保存特征数据，而非所有数据</strong>。什么是特征数据？ 简单来说，就是能够唯一标识出其对应的源数据， 比如常见的 <code>用户 ID</code>、<code>游戏中奖 ID</code>、<code>管理后台审批流 ID</code> 等。</p><h2 id="原理和应用场景" tabindex="-1">原理和应用场景 <a class="header-anchor" href="#原理和应用场景" aria-label="Permalink to &quot;原理和应用场景&quot;">​</a></h2><p><strong>布隆过滤器的原理</strong>: 当一个元素被加入集合时，通过 <code>K 个哈希函数</code> 将元素映射到一个位图数据结构 (例如 bitmap) 中的 K 个位置上面，并将这些位置全部置为 1。 判断元素是否存在于集合时，只需查看 <code>K 个哈希函数</code> 映射后的 K 个位置上面的值即可。</p><p><strong>如果这些位置任意一个为 0，则表示被检测元素一定不存在于集合中，如果都是 1，则表示被检测元素有较大可能存在于集合中</strong>。</p><h3 id="为什么不能检测-一定存在" tabindex="-1">为什么不能检测 “一定存在” ? <a class="header-anchor" href="#为什么不能检测-一定存在" aria-label="Permalink to &quot;为什么不能检测 “一定存在” ?&quot;">​</a></h3><p>检测元素时可以返回 “一定不存在” 和 “可能存在”，因为可能有多个元素映射到相同的 <code>bit</code> 上面，导致该位置为 1, 那么一个不存在的元素也可能会被误判为存在， 所以无法提供 “一定存在” 的语义保证。</p><h3 id="为什么元素不允许被-删除" tabindex="-1">为什么元素不允许被 “删除” ? <a class="header-anchor" href="#为什么元素不允许被-删除" aria-label="Permalink to &quot;为什么元素不允许被 “删除” ?&quot;">​</a></h3><p>如果删除了某个元素，导致对应的 <code>bit</code> 位置为 0, 但是可能有多个元素映射到相同的 <code>bit</code> 上面，那么一个存在的元素会被误判为不存在 (这是不可接收的)， 所以为了 “一定不存在” 的语义保证，元素不允许被删除。</p><p>PS: 虽然可以引入一个 <code>删除计数器</code> 来解决上述问题，不过这需要引入额外的空间，失去了使用过滤器的意义。</p><h3 id="两个语义操作" tabindex="-1">两个语义操作 <a class="header-anchor" href="#两个语义操作" aria-label="Permalink to &quot;两个语义操作&quot;">​</a></h3><ul><li><strong>Add</strong> : 添加一个元素到集合中</li><li><strong>Test</strong> : 检查给定元素是否存在于集合中</li></ul><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><h3 id="url-去重" tabindex="-1">URL 去重 <a class="header-anchor" href="#url-去重" aria-label="Permalink to &quot;URL 去重&quot;">​</a></h3><p>假设下面的 URL 列表为采集队列 (一共 100 条数据)，我们希望采集完成的 URL 可以记录起来，避免多次采集，如果使用正常的字符串存储的话 (以 Go 语言为例，string 占用 16 bytes)， 大概需要 <code>16 bytes * 100 = 1600 bytes</code> 内存空间。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">https://www.example.com/u/101/profile</span></span>
<span class="line"><span style="color:#B392F0;">https://www.example.com/u/102/profile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">https://www.example.com/u/200/profile</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">https://www.example.com/u/101/profile</span></span>
<span class="line"><span style="color:#6F42C1;">https://www.example.com/u/102/profile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">https://www.example.com/u/200/profile</span></span></code></pre></div><p>而如果我们改为 <code>布隆过滤器</code> 的方式来记录的话，假设哈希函数可以将每个链接转换为 1 个 <code>0-255</code> 的数字，通过将数据存入一个 <code>bitmap</code>, 那么理想情况下 (不发生任何碰撞) 最终只需要 <code>1 个 byte</code> 的内存空间即可，<strong>内存使用直接降低了 1600 倍</strong>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 布隆过滤器记录 URL 只需要 1 个 byte</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">------------------------------------</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">0</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">3</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">255</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">------------------------------------</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#B392F0;">------------------------------------</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 布隆过滤器记录 URL 只需要 1 个 byte</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">------------------------------------</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">0</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">1</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">3</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">255</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">------------------------------------</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#6F42C1;">------------------------------------</span></span></code></pre></div><h3 id="网站用户性别" tabindex="-1">网站用户性别 <a class="header-anchor" href="#网站用户性别" aria-label="Permalink to &quot;网站用户性别&quot;">​</a></h3><p>假设网站的用户数量为 1000万，每个用户性别存储需要 <code>1 个 bytes</code>, 如果正常存储的话，大概需要 <code>1 byte * 1000 W ≈ 10 MB</code> 内存空间。</p><p>而如果我们改为 <code>布隆过滤器</code> 的方式来记录的话，假设用户 ID 是一个数字，通过将数据存入一个 <code>bitmap</code>, 那么 <code>1 byte</code> 可以表示 <code>256 个</code> 用户性别， 理想情况下 (不发生任何碰撞) 最终只需要 <code>1000 W / 256 * 1 byte ≈ 0.04 MB</code> 内存空间，<strong>内存使用直接降低了 256 倍</strong>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 布隆过滤器记录用户网站性别</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">--------------------------------------------------</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">0</span><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">3</span><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">9999999</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">--------------------------------------------------</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User...</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#B392F0;">--------------------------------------------------</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 布隆过滤器记录用户网站性别</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">--------------------------------------------------</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">0</span><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">1</span><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">3</span><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">9999999</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">--------------------------------------------------</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User...</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#6F42C1;">--------------------------------------------------</span></span></code></pre></div><h3 id="其他应用场景" tabindex="-1">其他应用场景 <a class="header-anchor" href="#其他应用场景" aria-label="Permalink to &quot;其他应用场景&quot;">​</a></h3><ul><li>垃圾邮件过滤</li><li>防止缓存穿透</li><li>业务记录计数器</li><li>Web 拦截</li></ul><h2 id="两个核心支撑点" tabindex="-1">两个核心支撑点 <a class="header-anchor" href="#两个核心支撑点" aria-label="Permalink to &quot;两个核心支撑点&quot;">​</a></h2><p>通过上面两个简单的应用场景可以看到，要实现一个健壮的 <code>布隆过滤器</code>，需要规划设计好两个技术点：</p><ul><li><strong>元素长度和用于存储哈希映射值的数据结构</strong>，一般使用 bitmap (具体的长度和存储规模有关)</li><li><strong>显著降低碰撞、性能优良的哈希函数</strong></li></ul><p><code>Murmur3</code>，<code>FNV</code> 系列和 <code>Jenkins</code> 等非密码学算法适合作为哈希函数，其中 <code>Murmur3</code> 因为易于实现，并且在速度和随机分布上有很好的权衡， 实践中多选用其作为 <code>布隆过滤器</code> 的哈希函数。</p><h2 id="数学部分" tabindex="-1">数学部分 <a class="header-anchor" href="#数学部分" aria-label="Permalink to &quot;数学部分&quot;">​</a></h2><p>一个 <code>布隆过滤器</code> 至少需要包含如下参数:</p><ul><li>哈希空间大小，记为 <code>m</code></li><li>元素集合大小，记为 <code>n</code></li><li>哈希函数个数，记为 <code>k</code></li><li>误判概率，记为 <code>p</code> (可能出现一个元素不在集合中，但是被误判为存在于集合中，这个误判的概率取值范围为 <code>0 - 1</code>)</li></ul><p>哈希函数个数满足以下公式时，<code>布隆过滤器</code> <strong>有最好的效果</strong> (数学证明部分省略，数学渣暴露了 😦 … )</p><blockquote><p>k = [(ln2)(m/n)]</p></blockquote><p>还是以刚才的 <code>网站用户性别</code> 为例，<code>1000W</code> 用户需要以不高于 <code>0.00001%</code> 误判率的的情况下被检测到，需要多少个哈希函数？需要耗费多少空间？</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 带入公式计算</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ceil</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> (-k </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exp</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">log(p</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">k</span><span style="color:#E1E4E8;">))))</span></span>
<span class="line"><span style="color:#B392F0;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exp</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">-k</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> (m </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">n</span><span style="color:#E1E4E8;">))</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">k</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ceil</span><span style="color:#E1E4E8;">((n </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> log(p)) </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">2,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">))))</span></span>
<span class="line"><span style="color:#B392F0;">k</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">round</span><span style="color:#E1E4E8;">((m </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> n) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> log(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 带入公式计算</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ceil</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> (-k </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exp</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">log(p</span><span style="color:#24292E;">) </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">k</span><span style="color:#24292E;">))))</span></span>
<span class="line"><span style="color:#6F42C1;">p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pow</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exp</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">-k</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> (m </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">n</span><span style="color:#24292E;">))</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">k</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ceil</span><span style="color:#24292E;">((n </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> log(p)) </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pow</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">2,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">))))</span></span>
<span class="line"><span style="color:#6F42C1;">k</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">round</span><span style="color:#24292E;">((m </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> n) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> log(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">))</span></span></code></pre></div><p>记不住数学公式？没关系，已经有大佬做好了一个 <a href="https://hur.st/bloomfilter/" target="_blank" rel="noreferrer">在线工具</a>，可以通过输入参数直接生成对应的哈希函数个数。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051750986.png" alt="Bloom Filter Calculator"></p><h2 id="开源库" tabindex="-1">开源库 <a class="header-anchor" href="#开源库" aria-label="Permalink to &quot;开源库&quot;">​</a></h2><p>笔者选择了 <a href="https://github.com/bits-and-blooms/bloom" target="_blank" rel="noreferrer">bits-and-blooms/bloom</a> 作为研究 <code>布隆过滤器</code> 代码实现，版本为 <code>v3.3.1</code>。</p><h3 id="安装组件" tabindex="-1">安装组件 <a class="header-anchor" href="#安装组件" aria-label="Permalink to &quot;安装组件&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-u</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/bits-and-blooms/bloom/v3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-u</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/bits-and-blooms/bloom/v3</span></span></code></pre></div><h3 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>初始化过滤器时，需要知道对应的业务场景有多少元素（期望的容量），以及期望的误判概率。常见的误判率为 <code>1%</code>, 误报率越低，需要的内存就越多， 同时容量越大，需要的内存就越多。</p><p><strong>初始化过滤器时，应该尽可能明确需要的元素数量，因为 <code>布隆过滤器</code> 不是动态数据结构，如果指定的元素数量太少，则可能会超出误判概率范围</strong>。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/bits-and-blooms/bloom</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 初始化能够接收 100 万个元素且误判率为 1% 的布隆过滤器</span></span>
<span class="line"><span style="color:#E1E4E8;">	filter </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> bloom.</span><span style="color:#79B8FF;">NewWithEstimates</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.01</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	hw </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`hello world\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	hg </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`hello golang\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	filter.</span><span style="color:#79B8FF;">Add</span><span style="color:#E1E4E8;">(hw)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">println</span><span style="color:#E1E4E8;">(filter.</span><span style="color:#79B8FF;">Test</span><span style="color:#E1E4E8;">(hw)) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">println</span><span style="color:#E1E4E8;">(filter.</span><span style="color:#79B8FF;">Test</span><span style="color:#E1E4E8;">(hg)) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/bits-and-blooms/bloom</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 初始化能够接收 100 万个元素且误判率为 1% 的布隆过滤器</span></span>
<span class="line"><span style="color:#24292E;">	filter </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> bloom.</span><span style="color:#005CC5;">NewWithEstimates</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.01</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	hw </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`hello world\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	hg </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`hello golang\`</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	filter.</span><span style="color:#005CC5;">Add</span><span style="color:#24292E;">(hw)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">println</span><span style="color:#24292E;">(filter.</span><span style="color:#005CC5;">Test</span><span style="color:#24292E;">(hw)) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">println</span><span style="color:#24292E;">(filter.</span><span style="color:#005CC5;">Test</span><span style="color:#24292E;">(hg)) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们只添加了 <code>hello world</code> 字符串到过滤器中，所以正常的输出应该是 <code>true false</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#005CC5;">false</span></span></code></pre></div><h2 id="源码分析" tabindex="-1">源码分析 <a class="header-anchor" href="#源码分析" aria-label="Permalink to &quot;源码分析&quot;">​</a></h2><p>接下来，我们来简单分析下 <code>bits-and-blooms/bloom</code> 的实现代码。</p><h3 id="哈希算法选择" tabindex="-1">哈希算法选择 <a class="header-anchor" href="#哈希算法选择" aria-label="Permalink to &quot;哈希算法选择&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/bits-and-blooms/bloom/v3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.14</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">github.com/bits-and-blooms/bitset</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v1.3.1</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">github.com/twmb/murmur3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v1.1.6</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">module</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/bits-and-blooms/bloom/v3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.14</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">require</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">github.com/bits-and-blooms/bitset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v1.3.1</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">github.com/twmb/murmur3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v1.1.6</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>从 <code>bits-and-blooms/bloom</code> 的依赖包中，可以看到其选择了 <code>murmur3</code> 算法作为哈希函数实现。</p><h3 id="bloomfilter" tabindex="-1">BloomFilter <a class="header-anchor" href="#bloomfilter" aria-label="Permalink to &quot;BloomFilter&quot;">​</a></h3><p><code>BloomFilter</code> 结构体表示一个 <code>布隆过滤器</code>，包含 3 个字段，分别对应上文提到的 <code>布隆过滤器</code> 的必要参数。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BloomFilter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	m </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// 哈希空间大小</span></span>
<span class="line"><span style="color:#E1E4E8;">	k </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// 哈希函数个数</span></span>
<span class="line"><span style="color:#E1E4E8;">	b </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">bitset.BitSet    </span><span style="color:#6A737D;">// bitmap</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BloomFilter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	m </span><span style="color:#D73A49;">uint</span><span style="color:#24292E;">              </span><span style="color:#6A737D;">// 哈希空间大小</span></span>
<span class="line"><span style="color:#24292E;">	k </span><span style="color:#D73A49;">uint</span><span style="color:#24292E;">              </span><span style="color:#6A737D;">// 哈希函数个数</span></span>
<span class="line"><span style="color:#24292E;">	b </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">bitset.BitSet    </span><span style="color:#6A737D;">// bitmap</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="初始化过滤器" tabindex="-1">初始化过滤器 <a class="header-anchor" href="#初始化过滤器" aria-label="Permalink to &quot;初始化过滤器&quot;">​</a></h3><p><code>NewWithEstimates</code> 方法创建一个 <code>布隆过滤器</code>，内部调用了 <code>EstimateParameters</code> 方法来计算 <code>m</code> 和 <code>k</code> 的值， 最后通过 <code>m</code> 和 <code>k</code> 初始化一个 <code>BloomFilter</code> 结构体并返回。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewWithEstimates</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, fp </span><span style="color:#F97583;">float64</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">BloomFilter {</span></span>
<span class="line"><span style="color:#E1E4E8;">	m, k </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">EstimateParameters</span><span style="color:#E1E4E8;">(n, fp)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">New</span><span style="color:#E1E4E8;">(m, k)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EstimateParameters</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, p </span><span style="color:#F97583;">float64</span><span style="color:#E1E4E8;">) (m </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">, k </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uint</span><span style="color:#E1E4E8;">(math.</span><span style="color:#79B8FF;">Ceil</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">float64</span><span style="color:#E1E4E8;">(n) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> math.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(p) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> math.</span><span style="color:#79B8FF;">Pow</span><span style="color:#E1E4E8;">(math.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">    k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uint</span><span style="color:#E1E4E8;">(math.</span><span style="color:#79B8FF;">Ceil</span><span style="color:#E1E4E8;">(math.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">float64</span><span style="color:#E1E4E8;">(m) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">float64</span><span style="color:#E1E4E8;">(n)))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewWithEstimates</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">uint</span><span style="color:#24292E;">, fp </span><span style="color:#D73A49;">float64</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">BloomFilter {</span></span>
<span class="line"><span style="color:#24292E;">	m, k </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">EstimateParameters</span><span style="color:#24292E;">(n, fp)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">New</span><span style="color:#24292E;">(m, k)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EstimateParameters</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">uint</span><span style="color:#24292E;">, p </span><span style="color:#D73A49;">float64</span><span style="color:#24292E;">) (m </span><span style="color:#D73A49;">uint</span><span style="color:#24292E;">, k </span><span style="color:#D73A49;">uint</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uint</span><span style="color:#24292E;">(math.</span><span style="color:#005CC5;">Ceil</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">float64</span><span style="color:#24292E;">(n) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> math.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(p) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> math.</span><span style="color:#005CC5;">Pow</span><span style="color:#24292E;">(math.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">    k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uint</span><span style="color:#24292E;">(math.</span><span style="color:#005CC5;">Ceil</span><span style="color:#24292E;">(math.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">float64</span><span style="color:#24292E;">(m) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">float64</span><span style="color:#24292E;">(n)))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="添加元素" tabindex="-1">添加元素 <a class="header-anchor" href="#添加元素" aria-label="Permalink to &quot;添加元素&quot;">​</a></h3><p><code>BloomFilter.Add</code> 方法添加一个元素到 <code>布隆过滤器</code>，返回当前的 <code>BloomFilter</code> 对象来支持链式调用。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (f </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">BloomFilter) </span><span style="color:#B392F0;">Add</span><span style="color:#E1E4E8;">(data []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">BloomFilter {</span></span>
<span class="line"><span style="color:#E1E4E8;">	h </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">baseHashes</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> f.k; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		f.b.</span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(f.</span><span style="color:#79B8FF;">location</span><span style="color:#E1E4E8;">(h, i))</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> f</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (f </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">BloomFilter) </span><span style="color:#6F42C1;">Add</span><span style="color:#24292E;">(data []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">BloomFilter {</span></span>
<span class="line"><span style="color:#24292E;">	h </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">baseHashes</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> f.k; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		f.b.</span><span style="color:#005CC5;">Set</span><span style="color:#24292E;">(f.</span><span style="color:#005CC5;">location</span><span style="color:#24292E;">(h, i))</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> f</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>baseHashes</code> 函数返回哈希函数计算出的哈希值，其内部调用了 <code>murmur3</code> 算法。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">baseHashes</span><span style="color:#E1E4E8;">(data []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">) [</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">baseHashes</span><span style="color:#24292E;">(data []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">) [</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>location</code> 函数返回哈希值对应的 <code>bitmap</code> 的位置索引，通过将 <code>bitmap</code> 对应的位置进行设置，就可以将元素添加到 <code>布隆过滤器</code> 了。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">location</span><span style="color:#E1E4E8;">(h [</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">, i </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">location</span><span style="color:#24292E;">(h [</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">, i </span><span style="color:#D73A49;">uint</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="检测元素" tabindex="-1">检测元素 <a class="header-anchor" href="#检测元素" aria-label="Permalink to &quot;检测元素&quot;">​</a></h3><p><code>BloomFilter.Test</code> 方法检测一个元素是否存在于 <code>布隆过滤器</code> 中，可以看到，其内部实现就是 <code>BloomFilter.Add</code> 方法的逆过程。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (f </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">BloomFilter) </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;">(data []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	h </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">baseHashes</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> f.k; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">f.b.</span><span style="color:#79B8FF;">Test</span><span style="color:#E1E4E8;">(f.</span><span style="color:#79B8FF;">location</span><span style="color:#E1E4E8;">(h, i)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (f </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">BloomFilter) </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;">(data []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	h </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">baseHashes</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> f.k; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">f.b.</span><span style="color:#005CC5;">Test</span><span style="color:#24292E;">(f.</span><span style="color:#005CC5;">location</span><span style="color:#24292E;">(h, i)) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="调用流程图" tabindex="-1">调用流程图 <a class="header-anchor" href="#调用流程图" aria-label="Permalink to &quot;调用流程图&quot;">​</a></h3><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202312051750688.png" alt="调用流程图"></p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>本文简述了 <code>布隆过滤器</code> 的基本概念和原理，并通过开源库 <code>bits-and-blooms/bloom</code> 的实现代码分析了实现 <code>布隆过滤器</code> 的核心技术点， 最后引用维基百科关于 <code>布隆过滤器</code> 的优缺点作为文章结尾。</p><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><p><code>布隆过滤器</code> 在算法的空间复杂度和时间复杂度方面都有巨大的优势，<code>Add</code> 和 <code>Test</code> 操作的时间复杂度都是常数 O(K) (K: 哈希函数个数)。 由于哈希函数相互之间没有关联，因此可以通过硬件并行实现计算加速，此外，由于 <code>布隆过滤器</code> 不存储源数据，在某些对数据保密要求非常严格的场景 (数据可用，但不可见) 有明显优势。 最后，在哈希空间向量长度相同的情况下，使用同一组哈希函数的两个 <code>布隆过滤器</code> 的 <code>集合相关运算</code>可以使用位操作进行。</p><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><p><code>布隆过滤器</code> 最明显的的缺点就是 <code>误判率</code>，随着元素数量增加，<code>误判率</code> 也随之增加，所以如果元素数量很少的情况下，使用 <code>map</code> 就可以了。 此外，<code>布隆过滤器</code> 不支持删除元素， 因为 <code>布隆过滤器</code> 只能确定元素一定不存在于集合中，无法确定元素一定存在于集合中，如果一定要删除某个元素， 则必须重新构建整个 <code>布隆过滤器</code>。</p><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8" target="_blank" rel="noreferrer">布隆过滤器 - 维基百科</a></li><li><a href="https://github.com/bits-and-blooms/bloom" target="_blank" rel="noreferrer">bits-and-blooms/bloom</a></li><li><a href="https://www.jasondavies.com/bloomfilter/" target="_blank" rel="noreferrer">Bloom Filters</a></li><li><a href="https://mp.weixin.qq.com/s/IWq0GHbHspAwIuQJ9epCMA" target="_blank" rel="noreferrer">经典论文解读——布隆过滤器</a></li><li><a href="https://mp.weixin.qq.com/s/rP02j7WcP79-oRniVJ9HNg" target="_blank" rel="noreferrer">白话布隆过滤器BloomFilter</a></li><li><a href="https://awesome-go.com/bloom-and-cuckoo-filters/" target="_blank" rel="noreferrer">Bloom and Cuckoo Filters - Awesome Go</a></li><li><a href="https://redis.io/commands/?group=bitmap" target="_blank" rel="noreferrer">redis bitmap</a></li><li><a href="https://coolshell.cn/articles/17225.html" target="_blank" rel="noreferrer">CUCKOO FILTER：设计与实现</a></li></ul>`,83),e=[p];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{h as __pageData,u as default};
