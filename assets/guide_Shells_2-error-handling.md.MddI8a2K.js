import{_ as s,o as a,c as n,R as l}from"./chunks/framework.zUbWieqp.js";const u=JSON.parse('{"title":"1. 内置工具","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Shells/2-error-handling.md","filePath":"guide/Shells/2-error-handling.md","lastUpdated":1736245023000}'),p={name:"guide/Shells/2-error-handling.md"},o=l(`<h1 id="_1-内置工具" tabindex="-1">1. 内置工具 <a class="header-anchor" href="#_1-内置工具" aria-label="Permalink to &quot;1. 内置工具&quot;">​</a></h1><h2 id="_1-1-set" tabindex="-1">1.1 set <a class="header-anchor" href="#_1-1-set" aria-label="Permalink to &quot;1.1 set&quot;">​</a></h2><p><strong><code>set -e</code></strong>：当命令失败时停止脚本</p><p><strong><code>set -u</code></strong>：当使用未设置的变量时退出</p><p><strong><code>set -o pipefail</code></strong>：确保检测到管道失败</p><p>比如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;"> -euo </span><span style="color:#9ECBFF;">pipefail</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">output</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">cat</span><span style="color:#9ECBFF;"> /nonexistent/file)</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">&quot;如果文件不存在，这行不会执行。&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">set</span><span style="color:#24292E;"> -euo </span><span style="color:#032F62;">pipefail</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">output</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">cat</span><span style="color:#032F62;"> /nonexistent/file)</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">&quot;如果文件不存在，这行不会执行。&quot;</span></span></code></pre></div><h2 id="_1-2-trap" tabindex="-1">1.2 trap <a class="header-anchor" href="#_1-2-trap" aria-label="Permalink to &quot;1.2 trap&quot;">​</a></h2><p><code>trap</code> 允许你捕获信号和错误，从而进行清理或优雅退出</p><p>比如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">trap</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">&#39;rm -f /tmp/tempfile&#39;</span><span style="color:#B392F0;"> EXIT</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">&quot;Working...&quot;</span><span style="color:#B392F0;"> &gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/tmp/tempfile</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">trap</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">&#39;rm -f /tmp/tempfile&#39;</span><span style="color:#6F42C1;"> EXIT</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">&quot;Working...&quot;</span><span style="color:#6F42C1;"> &gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/tmp/tempfile</span></span></code></pre></div><h2 id="_1-3-exit" tabindex="-1">1.3 exit <a class="header-anchor" href="#_1-3-exit" aria-label="Permalink to &quot;1.3 exit&quot;">​</a></h2><h1 id="_2-静默" tabindex="-1">2. 静默 <a class="header-anchor" href="#_2-静默" aria-label="Permalink to &quot;2. 静默&quot;">​</a></h1><p>默认情况下，Bash 脚本在发生错误时仍会继续运行。这可能导致严重后果</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/critical/file</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> echo </span><span style="color:#B392F0;">&quot;Error: Could not delete file&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/critical/file</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#6F42C1;"> echo </span><span style="color:#6F42C1;">&quot;Error: Could not delete file&quot;</span></span></code></pre></div><p>在此示例中，脚本将记录错误消息，但会继续执行后续命令，可能导致损坏</p><h1 id="_3-如何检查错误" tabindex="-1">3. 如何检查错误 <a class="header-anchor" href="#_3-如何检查错误" aria-label="Permalink to &quot;3. 如何检查错误&quot;">​</a></h1><p>每个 Bash 命令都会返回一个<strong>退出代码</strong>：</p><ul><li><strong>退出代码 0</strong>：表示成功。</li><li><strong>非零退出代码</strong>：表示失败。</li></ul><p>常见代码包括：</p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>成功</td></tr><tr><td>1</td><td>一般错误</td></tr><tr><td>2</td><td>Shell 内置命令的误用</td></tr><tr><td>127</td><td>命令未找到</td></tr><tr><td>128</td><td>无效的退出参数</td></tr><tr><td>130</td><td>脚本被 Ctrl+C 终止</td></tr></tbody></table><h1 id="_4-高级调试" tabindex="-1">4. 高级调试 <a class="header-anchor" href="#_4-高级调试" aria-label="Permalink to &quot;4. 高级调试&quot;">​</a></h1><h2 id="_4-1-set-x" tabindex="-1">4.1 set -x <a class="header-anchor" href="#_4-1-set-x" aria-label="Permalink to &quot;4.1 set -x&quot;">​</a></h2><h2 id="_4-2-bashdb" tabindex="-1">4.2 bashdb <a class="header-anchor" href="#_4-2-bashdb" aria-label="Permalink to &quot;4.2 bashdb&quot;">​</a></h2><p><code>bashdb</code> 是 Bash 脚本的调试器，提供断点和逐步执行功能</p><h2 id="_4-3-strace" tabindex="-1">4.3 strace <a class="header-anchor" href="#_4-3-strace" aria-label="Permalink to &quot;4.3 strace&quot;">​</a></h2><p><code>strace</code> 捕获脚本进行的系统调用，有助于诊断 I/O 错误</p><h1 id="_5-案例" tabindex="-1">5. 案例 <a class="header-anchor" href="#_5-案例" aria-label="Permalink to &quot;5. 案例&quot;">​</a></h1><h2 id="_5-1-没有设置变量" tabindex="-1">5.1 没有设置变量 <a class="header-anchor" href="#_5-1-没有设置变量" aria-label="Permalink to &quot;5.1 没有设置变量&quot;">​</a></h2><p><strong>验证变量</strong>确保在使用变量之前定义它们。</p><p><strong>添加</strong> <strong><code>trap</code></strong> <strong>以确保安全</strong>使用 <code>trap</code> 拦截错误并停止执行。</p><p><strong>试运行测试</strong>在运行实际命令之前，加入试运行模式以测试脚本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;"> -euo </span><span style="color:#9ECBFF;">pipefail</span></span>
<span class="line"><span style="color:#79B8FF;">trap</span><span style="color:#B392F0;">&#39;echo &quot;An error occurred. Exiting.&quot;; exit 1&#39;</span><span style="color:#B392F0;"> ERR</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 确保目标目录已定义</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [[ </span><span style="color:#F97583;">-z</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">TARGET_DIR</span><span style="color:#F97583;">:-</span><span style="color:#9ECBFF;">}&quot;</span><span style="color:#E1E4E8;"> ]];</span><span style="color:#B392F0;"> then</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#B392F0;">&quot;Error: TARGET_DIR is not defined.&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">exit</span><span style="color:#E1E4E8;"> 1</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 试运行模式以确保安全</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [[ </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">DRY_RUN</span><span style="color:#F97583;">:-</span><span style="color:#E1E4E8;">false</span><span style="color:#9ECBFF;">}&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;"> ]];</span><span style="color:#B392F0;"> then</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#B392F0;">&quot;Dry run: Listing files to delete in </span><span style="color:#E1E4E8;">$TARGET_DIR</span><span style="color:#B392F0;">&quot;</span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls &quot;</span><span style="color:#E1E4E8;">$TARGET_DIR</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#B392F0;">&quot;Deleting files in </span><span style="color:#E1E4E8;">$TARGET_DIR</span><span style="color:#B392F0;">...&quot;</span></span>
<span class="line"><span style="color:#B392F0;"> </span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rf </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$TARGET_DIR</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">/</span><span style="color:#F97583;">*</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">set</span><span style="color:#24292E;"> -euo </span><span style="color:#032F62;">pipefail</span></span>
<span class="line"><span style="color:#005CC5;">trap</span><span style="color:#6F42C1;">&#39;echo &quot;An error occurred. Exiting.&quot;; exit 1&#39;</span><span style="color:#6F42C1;"> ERR</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 确保目标目录已定义</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [[ </span><span style="color:#D73A49;">-z</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">TARGET_DIR</span><span style="color:#D73A49;">:-</span><span style="color:#032F62;">}&quot;</span><span style="color:#24292E;"> ]];</span><span style="color:#6F42C1;"> then</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#6F42C1;">&quot;Error: TARGET_DIR is not defined.&quot;</span></span>
<span class="line"><span style="color:#005CC5;">exit</span><span style="color:#24292E;"> 1</span></span>
<span class="line"><span style="color:#D73A49;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 试运行模式以确保安全</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [[ </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">DRY_RUN</span><span style="color:#D73A49;">:-</span><span style="color:#24292E;">false</span><span style="color:#032F62;">}&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> ]];</span><span style="color:#6F42C1;"> then</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#6F42C1;">&quot;Dry run: Listing files to delete in </span><span style="color:#24292E;">$TARGET_DIR</span><span style="color:#6F42C1;">&quot;</span></span>
<span class="line"><span style="color:#6F42C1;"> </span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls &quot;</span><span style="color:#24292E;">$TARGET_DIR</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#6F42C1;">&quot;Deleting files in </span><span style="color:#24292E;">$TARGET_DIR</span><span style="color:#6F42C1;">...&quot;</span></span>
<span class="line"><span style="color:#6F42C1;"> </span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rf </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$TARGET_DIR</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">/</span><span style="color:#D73A49;">*</span></span>
<span class="line"><span style="color:#D73A49;">fi</span></span></code></pre></div><p>试运行</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">$ TARGET_DIR=/tmp DRY_RUN=true ./cleanup.sh</span></span>
<span class="line"><span style="color:#e1e4e8;">Dry run: Listing files to delete in /tmp</span></span>
<span class="line"><span style="color:#e1e4e8;">file1.txt</span></span>
<span class="line"><span style="color:#e1e4e8;">file2.log</span></span>
<span class="line"><span style="color:#e1e4e8;">tempfile</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">$ TARGET_DIR=/tmp DRY_RUN=true ./cleanup.sh</span></span>
<span class="line"><span style="color:#24292e;">Dry run: Listing files to delete in /tmp</span></span>
<span class="line"><span style="color:#24292e;">file1.txt</span></span>
<span class="line"><span style="color:#24292e;">file2.log</span></span>
<span class="line"><span style="color:#24292e;">tempfile</span></span></code></pre></div><p>实际运行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">TARGET_DIR=/tmp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">DRY_RUN=</span><span style="color:#79B8FF;">false</span><span style="color:#9ECBFF;"> ./cleanup.sh</span></span>
<span class="line"><span style="color:#B392F0;">Deleting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">files in /tmp...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TARGET_DIR=/tmp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">DRY_RUN=</span><span style="color:#005CC5;">false</span><span style="color:#032F62;"> ./cleanup.sh</span></span>
<span class="line"><span style="color:#6F42C1;">Deleting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">files in /tmp...</span></span></code></pre></div><h2 id="_5-2-迁移数据库" tabindex="-1">5.2 迁移数据库 <a class="header-anchor" href="#_5-2-迁移数据库" aria-label="Permalink to &quot;5.2 迁移数据库&quot;">​</a></h2><p><strong>检查文件是否存在</strong>在继续之前验证所需的 SQL 文件是否存在。</p><p><strong>使用</strong> <strong><code>trap</code></strong> <strong>进行错误处理</strong>优雅地捕获和处理错误。</p><p><strong>在迁移前备份数据库</strong>创建数据库备份以允许在失败时回滚。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;"> -euo </span><span style="color:#9ECBFF;">pipefail</span></span>
<span class="line"><span style="color:#79B8FF;">trap</span><span style="color:#B392F0;">&#39;echo &quot;Migration failed. Restoring database backup...&quot;; mysql -u user -p database &lt; /backup/db_backup.sql&#39;</span><span style="color:#B392F0;"> ERR</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 验证迁移文件</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [[ </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;migration.sql&quot;</span><span style="color:#E1E4E8;"> ]];</span><span style="color:#B392F0;"> then</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#B392F0;">&quot;Error: migration.sql file not found.&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">exit</span><span style="color:#E1E4E8;"> 1</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 备份数据库</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#B392F0;">&quot;Creating database backup...&quot;</span></span>
<span class="line"><span style="color:#B392F0;">mysqldump</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-u</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">database</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/backup/db_backup.sql</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 应用迁移</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#B392F0;">&quot;Applying migration...&quot;</span></span>
<span class="line"><span style="color:#B392F0;">mysql</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-u</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">database</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">migration.sql</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#005CC5;">set</span><span style="color:#24292E;"> -euo </span><span style="color:#032F62;">pipefail</span></span>
<span class="line"><span style="color:#005CC5;">trap</span><span style="color:#6F42C1;">&#39;echo &quot;Migration failed. Restoring database backup...&quot;; mysql -u user -p database &lt; /backup/db_backup.sql&#39;</span><span style="color:#6F42C1;"> ERR</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 验证迁移文件</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [[ </span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;migration.sql&quot;</span><span style="color:#24292E;"> ]];</span><span style="color:#6F42C1;"> then</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#6F42C1;">&quot;Error: migration.sql file not found.&quot;</span></span>
<span class="line"><span style="color:#005CC5;">exit</span><span style="color:#24292E;"> 1</span></span>
<span class="line"><span style="color:#D73A49;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 备份数据库</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#6F42C1;">&quot;Creating database backup...&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">mysqldump</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-u</span><span style="color:#24292E;"> </span><span style="color:#032F62;">user</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">database</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/backup/db_backup.sql</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 应用迁移</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#6F42C1;">&quot;Applying migration...&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">mysql</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-u</span><span style="color:#24292E;"> </span><span style="color:#032F62;">user</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">database</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">migration.sql</span></span></code></pre></div>`,42),e=[o];function t(c,r,i,y,E,d){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
