import{_ as o,o as t,c as i,R as l}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"1.如何保证集群的安全性？","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/权限管理/2-安全框架.md","filePath":"guide/container/k8s/权限管理/2-安全框架.md","lastUpdated":1734344767000}'),n={name:"guide/container/k8s/权限管理/2-安全框架.md"},r=l('<ul><li>K8S安全控制框架主要由下面3个阶段进行控制，每一个阶段都支持插件方式，通过API Server配置来启用插件。 <ol><li>Authentication（鉴权）</li><li>Authorization（授权）</li><li>Admission Control（准入控制）</li></ol></li><li>客户端要想访问k8s集群api server，一般需要证书，token或者用户名+密码，如果pod访问，需要serviceaccount</li><li>安全框架结构图</li></ul><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202408071017504.png" alt="image"></p><h1 id="_1-如何保证集群的安全性" tabindex="-1">1.如何保证集群的安全性？ <a class="header-anchor" href="#_1-如何保证集群的安全性" aria-label="Permalink to &quot;1.如何保证集群的安全性？&quot;">​</a></h1><ol><li><strong>网络安全</strong>： <ul><li><strong>网络策略（Network Policies）</strong>：定义Pod间的网络通信规则，控制进出Pod的流量。</li><li><strong>防火墙与访问控制</strong>：配置节点防火墙限制对集群节点不必要的外部访问，仅允许来自受信任来源的必要服务端口。</li><li><strong>Service Account最小权限原则</strong>：默认最小权限，并为每个Service Account设置适当的RBAC规则。</li></ul></li><li><strong>身份认证与授权</strong>： <ul><li><strong>API Server 认证</strong>：启用TLS加密、客户端证书、静态Token文件、动态Token服务如kubelet-bootstrap Token、OIDC或Webhook认证等。</li><li><strong>RBAC（基于角色的访问控制）</strong>：精细管理用户和组对Kubernetes资源的访问权限，通过Role、ClusterRole、RoleBinding和ClusterRoleBinding来实现。</li></ul></li><li><strong>镜像安全性</strong>： <ul><li><strong>私有镜像仓库</strong>：避免使用公共仓库，优先使用私有仓库托管容器镜像，降低恶意软件风险。</li><li><strong>镜像扫描</strong>：定期执行安全扫描工具，检测潜在漏洞。</li><li><strong>内容信任（Image Signing and Notary）</strong>：利用Notary或其他技术验证镜像签名。</li></ul></li><li><strong>集群组件更新与补丁</strong>： <ul><li><strong>及时更新</strong>：保持Kubernetes及其依赖组件版本最新，应用安全补丁。</li><li><strong>Node节点OS更新</strong>：确保运行Kubernetes Worker节点的操作系统及软件包都及时打上安全更新。</li></ul></li><li><strong>日志审计与监控</strong>： <ul><li><strong>日志记录与分析</strong>：启用详细的日志记录，结合Prometheus、Grafana等工具进行性能监控和异常检测。</li><li><strong>事件与审计日志</strong>：配置Audit Logging以跟踪集群中的所有API调用并生成审计报告。</li></ul></li><li><strong>Pod安全策略</strong>： <ul><li><strong>Pod Security Policy（PSP）</strong>：虽然在Kubernetes 1.21版本后被弃用，但可以使用替代方案来定义运行时安全上下文，限制Pod的能力（例如，禁止特权模式、非必要的主机路径挂载等）。</li></ul></li><li><strong>节点隔离</strong>： <ul><li><strong>污点（Taints）与容忍度（Tolerations）</strong>：用于控制哪些工作负载可以调度到特定节点上，增强节点间的隔离性。</li></ul></li><li><strong>服务网格与Sidecar代理</strong>： <ul><li><strong>Istio、Linkerd等服务网格</strong>：提供细粒度的流量控制和安全策略，包括双向TLS加密、身份认证和服务间访问控制。</li></ul></li><li><strong>安全最佳实践</strong>： <ul><li><strong>最小化暴露的服务</strong>：仅对外暴露必要的服务，减少攻击面。</li><li><strong>密码和密钥管理</strong>：妥善管理敏感信息，使用Secrets存储和分发。</li><li><strong>自动化安全检查</strong>：采用CI/CD流程中的自动化安全测试工具，确保部署前安全合规。</li></ul></li></ol>',4),s=[r];function e(g,a,u,c,d,_){return t(),i("div",null,s)}const P=o(n,[["render",e]]);export{h as __pageData,P as default};
