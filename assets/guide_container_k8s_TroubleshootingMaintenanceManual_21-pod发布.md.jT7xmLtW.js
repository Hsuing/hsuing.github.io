import{_ as s,o as n,c as a,R as p}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"1. Pod中断原因","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/TroubleshootingMaintenanceManual/21-pod发布.md","filePath":"guide/container/k8s/TroubleshootingMaintenanceManual/21-pod发布.md","lastUpdated":1733739638000}'),l={name:"guide/container/k8s/TroubleshootingMaintenanceManual/21-pod发布.md"},o=p(`<h1 id="_1-pod中断原因" tabindex="-1">1. Pod中断原因 <a class="header-anchor" href="#_1-pod中断原因" aria-label="Permalink to &quot;1. Pod中断原因&quot;">​</a></h1><p>Kubernetes 集群中，业务通常采用 Deployment + LoadBalancer 类型 Service 的方式对外提供服务</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202410291554658.webp" alt="图片"></p><h2 id="_1-1-新建pod" tabindex="-1">1.1 新建pod <a class="header-anchor" href="#_1-1-新建pod" aria-label="Permalink to &quot;1.1 新建pod&quot;">​</a></h2><p>Pod running 后被加入到 Endpoint 后端，容器服务监控到 Endpoint 变更后将 Node 加入到 SLB 后端。此时请求从 SLB 转发到 Pod 中，但是 Pod 业务代码还未初始化完毕，无法处理请求，导致服务中断</p><h2 id="_1-2-删除pod" tabindex="-1">1.2 删除pod <a class="header-anchor" href="#_1-2-删除pod" aria-label="Permalink to &quot;1.2 删除pod&quot;">​</a></h2><p>在删除旧 pod 过程中需要对多个对象（如 Endpoint、ipvs/iptables、SLB）进行状态同步，并且这些同步操作是异步执行的</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202410291600105.webp" alt="图片"></p><h3 id="pod" tabindex="-1"><strong>Pod</strong> <a class="header-anchor" href="#pod" aria-label="Permalink to &quot;**Pod**&quot;">​</a></h3><ol><li>pod 状态变更：将 Pod 设置为 Terminating 状态，并从所有 Service 的 Endpoints 列表中删除。此时，Pod 停止获得新的流量，但在 Pod 中运行的容器不会受到影响；</li><li>执行 preStop Hook：Pod 删除时会触发 preStop Hook，preStop Hook 支持 bash 脚本、TCP 或 HTTP 请求；</li><li>发送 SIGTERM 信号：向 Pod 中的容器发送 SIGTERM 信号；</li><li>等待指定的时间：terminationGracePeriodSeconds 字段用于控制等待时间，默认值为 30 秒。该步骤与 preStop Hook 同时执行，因此 terminationGracePeriodSeconds 需要大于 preStop 的时间，否则会出现 preStop 未执行完毕，pod 就被 kill 的情况；</li><li>发送 SIGKILL 信号：等待指定时间后，向 pod 中的容器发送 SIGKILL 信号，删除 pod。</li></ol><p><strong>中断原因</strong>：上述 1、2、3、4 步骤同时进行，因此有可能存在 Pod 收到 SIGTERM 信号并且停止工作后，还未从 Endpoints 中移除的情况。此时，请求从 slb 转发到 pod 中，而 Pod 已经停止工作，因此会出现服务中断</p><h2 id="_1-3-iptables-ipvs" tabindex="-1">1.3 iptables/ipvs <a class="header-anchor" href="#_1-3-iptables-ipvs" aria-label="Permalink to &quot;1.3 iptables/ipvs&quot;">​</a></h2><p><strong>中断原因</strong>：当 pod 变为 termintaing 状态时，会从所有 service 的 endpoint 中移除该 pod。kube-proxy 会清理对应的 iptables/ipvs 条目。而容器服务 watch 到 endpoint 变化后，会调用 slb openapi 移除后端，此操作会耗费几秒。由于这两个操作是同时进行，因此有可能存在节点上的 iptables/ipvs 条目已经被清理，但是节点还未从 slb 移除的情况。此时，流量从 slb 流入，而节点上已经没有对应的 iptables/ipvs 规则导致服务中断</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202410291603324.webp" alt="图片"></p><h2 id="_1-4-slb" tabindex="-1">1.4 SLB <a class="header-anchor" href="#_1-4-slb" aria-label="Permalink to &quot;1.4 SLB&quot;">​</a></h2><p><strong>中断原因</strong>：容器服务监控到 Endpoints 变化后，会将 Node 从 slb 后端移除。当节点从 slb 后端移除后，SLB 对于继续发往该节点的长连接会直接断开，导致服务中断。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202410291606187.png" alt="image-20241029160617930"></p><h1 id="_2-pod配置" tabindex="-1">2. Pod配置 <a class="header-anchor" href="#_2-pod配置" aria-label="Permalink to &quot;2. Pod配置&quot;">​</a></h1><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">apps/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Deployment</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">default</span></span>
<span class="line"><span style="color:#85E89D;">strategy</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">rollingUpdate</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">maxSurge</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">50%</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">maxUnavailable</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">0%</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#为0，保证有新的Pod启动后才停止之前的pod</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">RollingUpdate</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">terminationGracePeriodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#默认30</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 存活检测</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">livenessProbe</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">failureThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">initialDelaySeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">30</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">periodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">30</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">successThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">tcpSocket</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5084</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">timeoutSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 就绪检测</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">readinessProbe</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">initialDelaySeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">      # </span><span style="color:#9ECBFF;">在开始就绪检查之前等待 30s</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">periodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 每 20 秒检查一次</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">failureThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">		   </span><span style="color:#6A737D;"># 在连续 3 次失败后将 Pod 标记为未就绪</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">successThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">timeoutSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;"># 允许响应最多 10 秒</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">tcpSocket</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5084</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 优雅退出，command这里根据业务进行修改</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">lifecycle</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">preStop</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">exec</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#9ECBFF;">sleep</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#79B8FF;">30</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">apps/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Deployment</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">default</span></span>
<span class="line"><span style="color:#22863A;">strategy</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">rollingUpdate</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">maxSurge</span><span style="color:#24292E;">: </span><span style="color:#032F62;">50%</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">maxUnavailable</span><span style="color:#24292E;">: </span><span style="color:#032F62;">0%</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#为0，保证有新的Pod启动后才停止之前的pod</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">RollingUpdate</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">terminationGracePeriodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">60</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#默认30</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 存活检测</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">livenessProbe</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">failureThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">initialDelaySeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">30</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">periodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">30</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">successThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">tcpSocket</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5084</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">timeoutSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 就绪检测</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">readinessProbe</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">initialDelaySeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">      # </span><span style="color:#032F62;">在开始就绪检查之前等待 30s</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">periodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 每 20 秒检查一次</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">failureThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">		   </span><span style="color:#6A737D;"># 在连续 3 次失败后将 Pod 标记为未就绪</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">successThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">timeoutSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">           </span><span style="color:#6A737D;"># 允许响应最多 10 秒</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">tcpSocket</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5084</span></span>
<span class="line"><span style="color:#24292E;">      </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 优雅退出，command这里根据业务进行修改</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">lifecycle</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">preStop</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">exec</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#032F62;">sleep</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#005CC5;">30</span></span></code></pre></div><h2 id="_1-springboot案例" tabindex="-1">1.springboot案例 <a class="header-anchor" href="#_1-springboot案例" aria-label="Permalink to &quot;1.springboot案例&quot;">​</a></h2><p>简单点就是：</p><ol><li>Kube-apiserver接收到pod的删除请求，在Etcd上更新pod的状态为Terminating；</li><li>Kubelet 清理节点上容器相关的资源，如存储、网络；</li><li>Kubelet向容器发送SIGTERM，如果容器内进程没有任何配置，则容器立即退出。</li><li>如果容器在默认的 30 秒内没有退出，Kubelet 将发送 SIGKILL 并强制其退出。</li></ol><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202411081103493.png" alt="image-20241108110324209"></p><p>hook，和将终止宽限期延长，具体实现如下：</p><ol><li>preStop hook做了两件事情：</li></ol><p>1）nacos反注册（也称 实例注销），确保在实例关闭期间不会再有新的请求被路由到该实例。</p><ol start="2"><li>sleep 35s，nacos客户端的实例缓存为30s，30s后会重新拉取实例信息，超时为10s，一般不用10s这么长，所以我们设置为35s。</li><li>springboot开启优雅停机后，最大等待时间为30s。</li><li>terminationGracePeriodSeconds默认为30s，远小于preStop和springboot的时间之和，所以我们需要将其调大，我这里设置的是60s。</li><li>其实在terminationGracePeriodSeconds耗尽后，k8s还给了一个2s的额外宽限期，最后才执行SIGKILL。</li></ol><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202411081124937.png" alt="image-20241108112405861"></p><p>在SpringBoot &gt; 2.3.0的版本后支持应用程序优雅停机，需要在java微服务的配置中设置如下两个属性</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">:  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 默认值immediate:即立即关闭，graceful:即优雅停机  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">shutdown</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">graceful</span></span>
<span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">lifecycle</span><span style="color:#E1E4E8;">:    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 优雅停机最大等待时间，默认30s    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">timeout-per-shutdown-phase</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">30s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">server</span><span style="color:#24292E;">:  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 默认值immediate:即立即关闭，graceful:即优雅停机  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">shutdown</span><span style="color:#24292E;">: </span><span style="color:#032F62;">graceful</span></span>
<span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">lifecycle</span><span style="color:#24292E;">:    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 优雅停机最大等待时间，默认30s    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">timeout-per-shutdown-phase</span><span style="color:#24292E;">: </span><span style="color:#032F62;">30s</span></span></code></pre></div><p>通过env定义POD_IP获取当前Pod的ip，传递给preStop进行nacos反注册</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod1</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">image</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">env</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">POD_IP</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">valueFrom</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">fieldRef</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">fieldPath</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">status.podIP</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">lifecycle</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">preStop</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">exec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#9ECBFF;">/bin/sh</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#9ECBFF;">&#39;-c&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">            curl -s --connect-timeout 10 -m 20 -X POST &quot;http://svc:8848/nacos/v1/ns/instance?port=8080&amp;healthy=true&amp;ip=\${POD_IP}&amp;weight=1&amp;enabled=false&amp;serviceName=sre-yilingyi&amp;encoding=GBK&amp;namespaceId=production&quot; &amp;&amp; sleep 35</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">terminationGracePeriodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">60</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod1</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">image</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">env</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">POD_IP</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">valueFrom</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">fieldRef</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">fieldPath</span><span style="color:#24292E;">: </span><span style="color:#032F62;">status.podIP</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">lifecycle</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">preStop</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">exec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">command</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#032F62;">/bin/sh</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#032F62;">&#39;-c&#39;</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#032F62;">            curl -s --connect-timeout 10 -m 20 -X POST &quot;http://svc:8848/nacos/v1/ns/instance?port=8080&amp;healthy=true&amp;ip=\${POD_IP}&amp;weight=1&amp;enabled=false&amp;serviceName=sre-yilingyi&amp;encoding=GBK&amp;namespaceId=production&quot; &amp;&amp; sleep 35</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">terminationGracePeriodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">60</span></span></code></pre></div>`,32),e=[o];function c(t,r,E,y,i,d){return n(),a("div",null,e)}const g=s(l,[["render",c]]);export{h as __pageData,g as default};
