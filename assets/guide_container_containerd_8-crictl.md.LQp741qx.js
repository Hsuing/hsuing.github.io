import{_ as t,o as d,c as e,R as r}from"./chunks/framework.zUbWieqp.js";const m=JSON.parse('{"title":"1.介绍","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/containerd/8-crictl.md","filePath":"guide/container/containerd/8-crictl.md","lastUpdated":1730819630000}'),c={name:"guide/container/containerd/8-crictl.md"},s=r(`<h1 id="_1-介绍" tabindex="-1">1.介绍 <a class="header-anchor" href="#_1-介绍" aria-label="Permalink to &quot;1.介绍&quot;">​</a></h1><p>作为接替Docker运行时的Containerd在早在Kubernetes1.7时就能直接与Kubelet集成使用，只是大部分时候我们因熟悉Docker，在部署集群时采用了默认的dockershim。在<code>V1.24</code>起的版本的kubelet就彻底移除了<code>dockershim</code>，改为默认使用<code>Containerd</code>了，当然也可以使用 <code>cri-dockerd</code> 适配器来将 <code>Docker Engine</code> 与 Kubernetes 集成。可以参考<a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/#docker" target="_blank" rel="noreferrer">官方文档</a></p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202411052306394.png" alt="在这里插入图片描述"></p><p>crictl 是遵循 CRI 接口规范的一个命令行工具，通常用它来检查和管理kubelet节点上的容器运行时和镜像</p><p>ctr 是 containerd 的一个客户端工具</p><p>ctr -v 输出的是 containerd 的版本，crictl -v 输出的是当前 k8s 的版本，从结果显而易见你可以认为 crictl 是用于 k8s 的</p><h1 id="_2-命令" tabindex="-1">2.命令 <a class="header-anchor" href="#_2-命令" aria-label="Permalink to &quot;2.命令&quot;">​</a></h1><table><thead><tr><th>命令</th><th>docker</th><th>ctr（containerd）</th><th>crictl（kubernetes）</th></tr></thead><tbody><tr><td>查看运行的容器</td><td>docker ps</td><td>ctr task ls/ctr container ls</td><td>crictl ps</td></tr><tr><td>查看镜像</td><td>docker images</td><td>ctr image ls</td><td>crictl images</td></tr><tr><td>查看容器日志</td><td>docker logs</td><td>无</td><td>crictl logs</td></tr><tr><td>查看容器数据信息</td><td>docker inspect</td><td>ctr container info</td><td>crictl inspect</td></tr><tr><td>查看容器资源</td><td>docker stats</td><td>无</td><td>crictl stats</td></tr><tr><td>启动/关闭已有的容器</td><td>docker start/stop</td><td>ctr task start/kill</td><td>crictl start/stop</td></tr><tr><td>运行一个新的容器</td><td>docker run</td><td>ctr run</td><td>无（最小单元为pod）</td></tr><tr><td>打标签</td><td>docker tag</td><td>ctr image tag</td><td>无</td></tr><tr><td>创建一个新的容器</td><td>docker create</td><td>ctr container create</td><td>crictl create</td></tr><tr><td>导入镜像</td><td>docker load</td><td>ctr image import</td><td>无</td></tr><tr><td>导出镜像</td><td>docker save</td><td>ctr image export</td><td>无</td></tr><tr><td>删除容器</td><td>docker rm</td><td>ctr container rm</td><td>crictl rm</td></tr><tr><td>删除镜像</td><td>docker rmi</td><td>ctr image rm</td><td>crictl rmi</td></tr><tr><td>拉取镜像</td><td>docker pull</td><td>ctr image pull</td><td>ctictl pull</td></tr><tr><td>推送镜像</td><td>docker push</td><td>ctr image push</td><td>无</td></tr><tr><td>登录或在容器内部执行命令</td><td>docker exec</td><td>无</td><td>crictl exec</td></tr><tr><td>清空不用的容器</td><td>docker image prune</td><td>无</td><td>crictl rmi --prune</td></tr></tbody></table><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#输入命令查看帮助</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--help</span></span>
<span class="line"><span style="color:#B392F0;">ctr</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--help</span></span>
<span class="line"><span style="color:#B392F0;">crictl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--help</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#输入命令查看帮助</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--help</span></span>
<span class="line"><span style="color:#6F42C1;">ctr</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--help</span></span>
<span class="line"><span style="color:#6F42C1;">crictl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--help</span></span></code></pre></div>`,9),a=[s];function n(o,l,p,i,h,k){return d(),e("div",null,a)}const _=t(c,[["render",n]]);export{m as __pageData,_ as default};
