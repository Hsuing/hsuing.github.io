import{_ as s,o as n,c as a,R as l}from"./chunks/framework.zUbWieqp.js";const u=JSON.parse('{"title":"1. ESSD云盘","description":"","frontmatter":{},"headers":[],"relativePath":"guide/cloud/ali/8-ecs_disk.md","filePath":"guide/cloud/ali/8-ecs_disk.md","lastUpdated":1732616842000}'),p={name:"guide/cloud/ali/8-ecs_disk.md"},o=l(`<h1 id="_1-essd云盘" tabindex="-1">1. ESSD<a href="https://help.aliyun.com/zh/ecs/user-guide/essds" target="_blank" rel="noreferrer">云盘</a> <a class="header-anchor" href="#_1-essd云盘" aria-label="Permalink to &quot;1. ESSD[云盘](https://help.aliyun.com/zh/ecs/user-guide/essds)&quot;">​</a></h1><p>阿里云ESSD（Enterprise SSD）云盘结合25 GE网络和RDMA技术，为您提供单盘高达100万的随机读写能力和单路低时延性能。本文介绍了ESSD云盘的性能级别、适用场景及性能上限，提供了选择不同ESSD云盘性能级别时的参考信息。</p><table><thead><tr><th>ESSD云盘属性</th><th><strong>性能级别PL</strong></th><th><strong>性能级别PL</strong></th><th><strong>性能级别PL</strong></th><th><strong>性能级别PL</strong></th></tr></thead><tbody><tr><td></td><td><strong>PL3</strong></td><td><strong>PL2</strong></td><td><strong>PL1</strong></td><td><strong>PL0</strong></td></tr><tr><td>性能描述</td><td>并发极限I/O性能极高，读写时延极稳定。</td><td>并发极限I/O性能较高，读写时延稳定。</td><td>并发极限I/O性能中等，读写时延较为稳定。</td><td>并发极限I/O性能中等，读写时延较为稳定。</td></tr><tr><td>云盘容量范围（GiB）</td><td>1,261~65,536</td><td>461~65,536</td><td>20~65,536</td><td>1~65,536</td></tr><tr><td>单盘最大IOPS（Input/Output Operations Per Second）</td><td>1,000,000</td><td>100,000</td><td>50,000</td><td>10,000</td></tr><tr><td>单盘最大吞吐量（MB/s）</td><td>4,000</td><td>750</td><td>350</td><td>180</td></tr><tr><td>单盘IOPS性能计算公式</td><td>min{1800+50*容量, 1000000}</td><td>min{1800+50*容量, 100000}</td><td>min{1800+50*容量, 50000}</td><td>min{1800+12*容量, 10000}</td></tr><tr><td>单盘吞吐量性能计算公式（MB/s）</td><td>min{120+0.5*容量, 4000}</td><td>min{120+0.5*容量, 750}</td><td>min{120+0.5*容量, 350}</td><td>min{100+0.25*容量, 180}</td></tr><tr><td>业务场景示例</td><td>中大型核心业务关系型数据库及NoSQL数据库，大型SAP和Oracle系统。</td><td>中等规模的关系型数据库、NoSQL数据库、中等规模的ELK日志集群、SAP和Oracle等企业级商用软件。</td><td>中小型MySQL和SQLServer等数据库场景，中小规模ELK日志集群，SAP和Oracle等企业级商用软件，容器应用。</td><td>中小型MySQL和SQLServer等数据库场景，中小规模ELK日志集群，SAP和Oracle等企业级商用软件，容器应用。</td></tr><tr><td>在推荐业务场景下，这些产品的系统盘或数据盘建议替换为ESSD云盘。</td><td>16核vCPU以上本地SSD实例规格族（i1、i2、i2g）的数据盘</td><td>SSD云盘，本地SSD实例规格族（i1、i2、i2g）的数据盘</td><td>SSD云盘</td><td>系统盘</td></tr></tbody></table><h2 id="_1-1-测试性能" tabindex="-1">1.1 测试性能 <a class="header-anchor" href="#_1-1-测试性能" aria-label="Permalink to &quot;1.1 测试性能&quot;">​</a></h2><p>测试工具：使用FIO。</p><p><a href="https://linux.die.net/man/1/fio" target="_blank" rel="noreferrer">FIO</a>（Flexible I/O Tester）是一个开源的、强大的I/O性能测试工具，可以用来对存储设备进行随机读写、顺序读写等负载测试。</p><h3 id="_1-部署" tabindex="-1">1.部署 <a class="header-anchor" href="#_1-部署" aria-label="Permalink to &quot;1.部署&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yum install libaio libaio-devel fio -y</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yum install libaio libaio-devel fio -y</span></span></code></pre></div><h3 id="_2-测试" tabindex="-1">2.测试 <a class="header-anchor" href="#_2-测试" aria-label="Permalink to &quot;2.测试&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RunFio</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> numjobs</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">$1</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;"># 实例中的测试线程数，例如示例中的10</span></span>
<span class="line"><span style="color:#E1E4E8;"> iodepth</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">$2</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;"># 同时发出I/O数的上限，例如示例中的64</span></span>
<span class="line"><span style="color:#E1E4E8;"> bs</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">$3</span><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 单次I/O的块文件大小，例如示例中的4k</span></span>
<span class="line"><span style="color:#E1E4E8;"> rw</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">$4</span><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 测试时的读写策略，例如示例中的randwrite</span></span>
<span class="line"><span style="color:#E1E4E8;"> size</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">$5</span></span>
<span class="line"><span style="color:#E1E4E8;"> filename</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">$6</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 指定测试文件的名称，例如示例中的/dev/your_device</span></span>
<span class="line"><span style="color:#E1E4E8;"> nr_cpus</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">cat</span><span style="color:#9ECBFF;"> /proc/cpuinfo </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">grep</span><span style="color:#9ECBFF;"> &quot;processor&quot; </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">wc</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-l</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ $nr_cpus </span><span style="color:#F97583;">-lt</span><span style="color:#E1E4E8;"> $numjobs ];</span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">“Numjobs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">more</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">than</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpu</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cores,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exit!”</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">exit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-1</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fi</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nu=</span><span style="color:#E1E4E8;">$numjobs</span><span style="color:#9ECBFF;">+1</span></span>
<span class="line"><span style="color:#E1E4E8;"> cpulist</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> ((i</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">     list</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">cat</span><span style="color:#9ECBFF;"> /sys/block/your_device/mq/</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">/cpu_list </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">awk</span><span style="color:#9ECBFF;"> &#39;{if(i&lt;=NF) print $i;}&#39; i=&quot;</span><span style="color:#E1E4E8;">$i</span><span style="color:#9ECBFF;">&quot; </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">tr</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#9ECBFF;"> &#39;,&#39; </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">tr</span><span style="color:#9ECBFF;"> &#39;\\n&#39; &#39;,&#39;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#F97583;">-z</span><span style="color:#E1E4E8;"> $list ];</span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">fi</span></span>
<span class="line"><span style="color:#E1E4E8;">     cpulist</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">\${cpulist}\${list}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">done</span></span>
<span class="line"><span style="color:#E1E4E8;"> spincpu</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">echo</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">$cpulist</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">cut</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#9ECBFF;"> &#39;,&#39; </span><span style="color:#79B8FF;">-f</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">-\${</span><span style="color:#E1E4E8;">nu</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $spincpu</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fio</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--ioengine=libaio</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--runtime=30s</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--numjobs=\${</span><span style="color:#E1E4E8;">numjobs</span><span style="color:#79B8FF;">}</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--iodepth=\${</span><span style="color:#E1E4E8;">iodepth</span><span style="color:#79B8FF;">}</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--bs=\${</span><span style="color:#E1E4E8;">bs</span><span style="color:#79B8FF;">}</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--size=\${</span><span style="color:#E1E4E8;">size</span><span style="color:#79B8FF;">}</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--rw=\${</span><span style="color:#E1E4E8;">rw</span><span style="color:#79B8FF;">}</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--filename=\${</span><span style="color:#E1E4E8;">filename</span><span style="color:#79B8FF;">}</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--time_based=1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--direct=1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name=test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--group_reporting</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--cpus_allowed=</span><span style="color:#E1E4E8;">$spincpu</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--cpus_allowed_policy=split</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/sys/block/your_device/queue/rq_affinity</span></span>
<span class="line"><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#B392F0;">RunFio</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">k</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">randwrite</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#9ECBFF;">g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/dev/your_device</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RunFio</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> numjobs</span><span style="color:#D73A49;">=</span><span style="color:#E36209;">$1</span><span style="color:#24292E;">   </span><span style="color:#6A737D;"># 实例中的测试线程数，例如示例中的10</span></span>
<span class="line"><span style="color:#24292E;"> iodepth</span><span style="color:#D73A49;">=</span><span style="color:#E36209;">$2</span><span style="color:#24292E;">   </span><span style="color:#6A737D;"># 同时发出I/O数的上限，例如示例中的64</span></span>
<span class="line"><span style="color:#24292E;"> bs</span><span style="color:#D73A49;">=</span><span style="color:#E36209;">$3</span><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 单次I/O的块文件大小，例如示例中的4k</span></span>
<span class="line"><span style="color:#24292E;"> rw</span><span style="color:#D73A49;">=</span><span style="color:#E36209;">$4</span><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 测试时的读写策略，例如示例中的randwrite</span></span>
<span class="line"><span style="color:#24292E;"> size</span><span style="color:#D73A49;">=</span><span style="color:#E36209;">$5</span></span>
<span class="line"><span style="color:#24292E;"> filename</span><span style="color:#D73A49;">=</span><span style="color:#E36209;">$6</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 指定测试文件的名称，例如示例中的/dev/your_device</span></span>
<span class="line"><span style="color:#24292E;"> nr_cpus</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">cat</span><span style="color:#032F62;"> /proc/cpuinfo </span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">grep</span><span style="color:#032F62;"> &quot;processor&quot; </span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">wc</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-l</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ $nr_cpus </span><span style="color:#D73A49;">-lt</span><span style="color:#24292E;"> $numjobs ];</span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">“Numjobs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">more</span><span style="color:#24292E;"> </span><span style="color:#032F62;">than</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cpu</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cores,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exit!”</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#005CC5;">exit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-1</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">fi</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nu=</span><span style="color:#24292E;">$numjobs</span><span style="color:#032F62;">+1</span></span>
<span class="line"><span style="color:#24292E;"> cpulist</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> ((i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">     list</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">cat</span><span style="color:#032F62;"> /sys/block/your_device/mq/</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">/cpu_list </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">awk</span><span style="color:#032F62;"> &#39;{if(i&lt;=NF) print $i;}&#39; i=&quot;</span><span style="color:#24292E;">$i</span><span style="color:#032F62;">&quot; </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">tr</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-d</span><span style="color:#032F62;"> &#39;,&#39; </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">tr</span><span style="color:#032F62;"> &#39;\\n&#39; &#39;,&#39;\`</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ </span><span style="color:#D73A49;">-z</span><span style="color:#24292E;"> $list ];</span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">fi</span></span>
<span class="line"><span style="color:#24292E;">     cpulist</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">\${cpulist}\${list}</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">done</span></span>
<span class="line"><span style="color:#24292E;"> spincpu</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">\`</span><span style="color:#005CC5;">echo</span><span style="color:#032F62;"> </span><span style="color:#24292E;">$cpulist</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">cut</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-d</span><span style="color:#032F62;"> &#39;,&#39; </span><span style="color:#005CC5;">-f</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">-\${</span><span style="color:#24292E;">nu</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $spincpu</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fio</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--ioengine=libaio</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--runtime=30s</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--numjobs=\${</span><span style="color:#24292E;">numjobs</span><span style="color:#005CC5;">}</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--iodepth=\${</span><span style="color:#24292E;">iodepth</span><span style="color:#005CC5;">}</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--bs=\${</span><span style="color:#24292E;">bs</span><span style="color:#005CC5;">}</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--size=\${</span><span style="color:#24292E;">size</span><span style="color:#005CC5;">}</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--rw=\${</span><span style="color:#24292E;">rw</span><span style="color:#005CC5;">}</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--filename=\${</span><span style="color:#24292E;">filename</span><span style="color:#005CC5;">}</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--time_based=1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--direct=1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name=test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--group_reporting</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--cpus_allowed=</span><span style="color:#24292E;">$spincpu</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--cpus_allowed_policy=split</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/sys/block/your_device/queue/rq_affinity</span></span>
<span class="line"><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#6F42C1;">RunFio</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">128</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">k</span><span style="color:#24292E;"> </span><span style="color:#032F62;">randwrite</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#032F62;">g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/dev/your_device</span></span></code></pre></div><ul><li>请将所有<code>your_device</code>设置为ESSD云盘实际的设备名，例如nvme1n1。</li><li>根据实际情况设置<code>RunFio 10 64 4k randwrite /dev/your_device</code>中的<em>10</em>、<em>64</em>、<em>4k</em>、<em>randwrite</em>和*/dev/your_device*。</li><li>如果云盘上的数据丢失不影响业务，可以设置<code>filename=[设备名，例如/dev/vdb]</code>；否则，请设置为<code>filename=[具体的文件路径，例如/mnt/test.image]</code>。</li></ul><ul><li>执行</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sh</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">st100w.sh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sh</span><span style="color:#24292E;"> </span><span style="color:#032F62;">st100w.sh</span></span></code></pre></div><ul><li>参数说明</li></ul><table><thead><tr><th><strong>rq_affinity取值</strong></th><th><strong>取值说明</strong></th></tr></thead><tbody><tr><td>1</td><td>表示块设备收到I/O完成（I/O Completion）的事件时，这个I/O被发送回处理这个I/O下发流程的vCPU所在Group上处理。在多线程并发的情况下，I/O Completion就可能集中在某一个vCPU上执行，造成瓶颈，导致性能无法提升。</td></tr><tr><td>2</td><td>表示块设备收到I/O Completion的事件时，这个I/O会在当初下发的vCPU上执行。在多线程并发的情况下，就可以充分发挥各个vCPU的性能。</td></tr></tbody></table><h1 id="_2-bps和iops" tabindex="-1">2. BPS和IOPS <a class="header-anchor" href="#_2-bps和iops" aria-label="Permalink to &quot;2. BPS和IOPS&quot;">​</a></h1><p>BPS（每秒字节数）和IOPS（每秒输入/输出操作数）</p><h2 id="_2-1-bps和iops增高" tabindex="-1">2.1 bps和iops增高 <a class="header-anchor" href="#_2-1-bps和iops增高" aria-label="Permalink to &quot;2.1 bps和iops增高&quot;">​</a></h2><ol><li><strong>高负载应用或服务</strong>： <ul><li>如果<a href="https://www.kdun.com/" target="_blank" rel="noreferrer">服务器</a>上运行的应用或服务（如数据库、文件服务器等）突然接收到大量请求，可能会导致BPS和IOPS的增加。检查应用日志和监控数据，确定是否有异常流量或请求模式。</li></ul></li><li><strong>内存不足</strong>： <ul><li>当<a href="https://www.kdun.com/" target="_blank" rel="noreferrer">服务器</a>内存不足时，系统可能会使用磁盘作为虚拟内存（swap），这会导致磁盘I/O显著增加。检查内存使用情况，考虑增加内存资源或优化内存使用。</li></ul></li><li><strong>磁盘空间不足</strong>： <ul><li>磁盘空间不足可能导致系统频繁地进行磁盘整理，从而增加IOPS。清理不必要的文件或增加磁盘空间可以解决这个问题。</li></ul></li><li><strong>数据库优化问题</strong>： <ul><li>数据库查询效率低下或索引问题可能导致高IOPS。检查数据库性能，优化查询语句和索引。</li></ul></li><li><strong>系统或应用更新</strong>： <ul><li>系统或应用的自动更新可能会在后台进行大量数据读写操作。检查更新日志，确认是否有更新活动。</li></ul></li><li><strong>硬件问题</strong>： <ul><li>硬件故障（如磁盘损坏）也可能导致IOPS异常。检查硬件状态，必要时更换故障硬件。</li></ul></li><li><strong>安全问题</strong>： <ul><li><a href="https://www.kdun.com/" target="_blank" rel="noreferrer">服务器</a>可能遭受攻击，如DDoS攻击，导致资源使用率异常。检查安全日志，采取相应的安全措施。</li></ul></li><li><strong>配置问题</strong>： <ul><li>错误的系统或应用配置可能导致资源使用效率低下。检查配置文件，进行必要的调整。</li></ul></li></ol>`,19),t=[o];function e(r,c,y,E,i,F){return n(),a("div",null,t)}const C=s(p,[["render",e]]);export{u as __pageData,C as default};
