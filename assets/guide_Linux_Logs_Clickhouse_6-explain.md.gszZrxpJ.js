import{_ as s,o as a,c as n,R as l}from"./chunks/framework.zUbWieqp.js";const u=JSON.parse('{"title":"1.explain","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Linux/Logs/Clickhouse/6-explain.md","filePath":"guide/Linux/Logs/Clickhouse/6-explain.md","lastUpdated":1730888659000}'),p={name:"guide/Linux/Logs/Clickhouse/6-explain.md"},o=l(`<h1 id="_1-explain" tabindex="-1">1.explain <a class="header-anchor" href="#_1-explain" aria-label="Permalink to &quot;1.explain&quot;">​</a></h1><p><a href="https://clickhouse.com/docs/en/sql-reference/statements/explain#explain-ast" target="_blank" rel="noreferrer">官当</a></p><p><strong>方法一（20.6之前版本）：</strong></p><p>在 clickhouse 20.6 版本之前要查看 SQL 语句的执行计划需要设置日志级别为 trace 才能可以看到，并且只能真正执行 sql，在执行日志里面查看</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">clickhouse</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">client </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">u xxxx </span><span style="color:#6A737D;">--password xxxxxx --send_logs_level=trace &lt;&lt;&lt; &#39;your query sql&#39; &gt; /dev/null；</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">clickhouse</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">client </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">u xxxx </span><span style="color:#6A737D;">--password xxxxxx --send_logs_level=trace &lt;&lt;&lt; &#39;your query sql&#39; &gt; /dev/null；</span></span></code></pre></div><p><strong>方法二（20.6与20.6之后版本）</strong>：explain SQL</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">比如：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">explain plan </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">sql语句</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">比如：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">explain plan </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">sql语句</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="_1-1-explain类型组成" tabindex="-1">1.1 explain类型组成 <a class="header-anchor" href="#_1-1-explain类型组成" aria-label="Permalink to &quot;1.1 explain类型组成&quot;">​</a></h2><h3 id="ast" tabindex="-1"><strong>AST</strong> <a class="header-anchor" href="#ast" aria-label="Permalink to &quot;**AST**&quot;">​</a></h3><p>用于查看语法树,不常使用</p><h3 id="syntax" tabindex="-1"><strong>SYNTAX</strong> <a class="header-anchor" href="#syntax" aria-label="Permalink to &quot;**SYNTAX**&quot;">​</a></h3><p>查询优化后的 SQL 语句(<code>使用较多</code>)</p><h3 id="query-tree" tabindex="-1"><strong>QUERY TREE</strong> <a class="header-anchor" href="#query-tree" aria-label="Permalink to &quot;**QUERY TREE**&quot;">​</a></h3><p><strong>PLAN</strong></p><p>用于查看执行计划，可以指定五个参数</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>header</td><td>打印计划中各个步骤的 header 说明，默认 0（关闭）</td></tr><tr><td>description</td><td>打印计划中各个步骤的描述，默认 1（开启）</td></tr><tr><td>indexes</td><td>显示索引使用情况，默认 0（关闭）</td></tr><tr><td>actions</td><td>打印计划中各个步骤的详细信息，默认 0（关闭）</td></tr><tr><td>json</td><td>以 JSON 格式打印执行计划的详细信息，默认 0（关闭）</td></tr></tbody></table><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">EXPLAIN </span><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> numbers(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">GROUP BY</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;"> % </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">EXPLAIN </span><span style="color:#F97583;">json</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">description</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">UNION ALL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> FORMAT TSVRaw;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">EXPLAIN </span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">number</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> numbers(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">GROUP BY</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">number</span><span style="color:#24292E;"> % </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">EXPLAIN </span><span style="color:#D73A49;">json</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">description</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">UNION ALL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> FORMAT TSVRaw;</span></span></code></pre></div><h3 id="pipeline" tabindex="-1"><strong>PIPELINE</strong> <a class="header-anchor" href="#pipeline" aria-label="Permalink to &quot;**PIPELINE**&quot;">​</a></h3><p>用于查看 pipeline 计划</p><ul><li><code>header</code>：打印计划中各个步骤的 header 说明，默认 0（关闭）；</li><li><code>graph</code>：用 DOT 图形语言描述管道图，默认 0（关闭）；</li><li><code>compact</code>：如果开启了 graph，紧凑打印行，默认 1（开启）；</li></ul><h2 id="_1-2-语法" tabindex="-1">1.2 语法 <a class="header-anchor" href="#_1-2-语法" aria-label="Permalink to &quot;1.2 语法&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">EXPLAIN [AST | SYNTAX | PLAN | PIPELINE | TABLE OVERRIDE] [setting = value, ...]</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> ... |</span></span>
<span class="line"><span style="color:#E1E4E8;">      tableFunction(...) [COLUMNS (...)] [ORDER BY ...] [PARTITION BY ...] [PRIMARY KEY] [SAMPLE BY ...] [TTL ...]</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    [FORMAT ...]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">EXPLAIN [AST | SYNTAX | PLAN | PIPELINE | TABLE OVERRIDE] [setting = value, ...]</span></span>
<span class="line"><span style="color:#24292E;">    [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> ... |</span></span>
<span class="line"><span style="color:#24292E;">      tableFunction(...) [COLUMNS (...)] [ORDER BY ...] [PARTITION BY ...] [PRIMARY KEY] [SAMPLE BY ...] [TTL ...]</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">    [FORMAT ...]</span></span></code></pre></div><h2 id="_1-3-案例" tabindex="-1">1.3 案例 <a class="header-anchor" href="#_1-3-案例" aria-label="Permalink to &quot;1.3 案例&quot;">​</a></h2><h3 id="_1-plan" tabindex="-1">1.plan <a class="header-anchor" href="#_1-plan" aria-label="Permalink to &quot;1.plan&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">explain [plan] </span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> arrayJoin([1,2,3,null,null]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">explain </span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">database</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">table</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) cnt </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">system</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">parts</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">database</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;datasets&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;system&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">group by</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">database</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">table</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">order by</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">database</span><span style="color:#E1E4E8;">,cnt </span><span style="color:#F97583;">desc</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">limit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">by</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">database</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">explain plan header</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, actions</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">description=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">system</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">numbers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">limit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">explain [plan] </span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> arrayJoin([1,2,3,null,null]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">explain </span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">database</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">table</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">count</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) cnt </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">system</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">parts</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">database</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;datasets&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;system&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">group by</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">database</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">table</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">order by</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">database</span><span style="color:#24292E;">,cnt </span><span style="color:#D73A49;">desc</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">limit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">by</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">database</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">explain plan header</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, actions</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">description=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">system</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">numbers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">limit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="_2-syntax" tabindex="-1">2.syntax <a class="header-anchor" href="#_2-syntax" aria-label="Permalink to &quot;2.syntax&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">-- 先做一次查询</span></span>
<span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> ? </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> : (</span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> ? </span><span style="color:#9ECBFF;">&#39;world&#39;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&#39;xyz&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> numbers(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 第一次查看语法优化</span></span>
<span class="line"><span style="color:#E1E4E8;">EXPLAIN SYNTAX </span><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> ? </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> : (</span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> ? </span><span style="color:#9ECBFF;">&#39;world&#39;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&#39;xyz&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> numbers(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 返回优化后的语句</span></span>
<span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;world&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;xyz&#39;</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> numbers(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 开启三元运算符优化</span></span>
<span class="line"><span style="color:#F97583;">SET</span><span style="color:#E1E4E8;"> optimize_if_chain_to_multiif </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 再次查看语法优化</span></span>
<span class="line"><span style="color:#E1E4E8;">EXPLAIN SYNTAX </span><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> ? </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> : (</span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> ? </span><span style="color:#9ECBFF;">&#39;world&#39;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&#39;xyz&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> numbers(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 返回优化后的语句</span></span>
<span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> multiIf(</span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;world&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;xyz&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> numbers(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- 先做一次查询</span></span>
<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> ? </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;"> : (</span><span style="color:#D73A49;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> ? </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&#39;xyz&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> numbers(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 第一次查看语法优化</span></span>
<span class="line"><span style="color:#24292E;">EXPLAIN SYNTAX </span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> ? </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;"> : (</span><span style="color:#D73A49;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> ? </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&#39;xyz&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> numbers(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 返回优化后的语句</span></span>
<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;xyz&#39;</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> numbers(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 开启三元运算符优化</span></span>
<span class="line"><span style="color:#D73A49;">SET</span><span style="color:#24292E;"> optimize_if_chain_to_multiif </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 再次查看语法优化</span></span>
<span class="line"><span style="color:#24292E;">EXPLAIN SYNTAX </span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> ? </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;"> : (</span><span style="color:#D73A49;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> ? </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&#39;xyz&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> numbers(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 返回优化后的语句</span></span>
<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> multiIf(</span><span style="color:#D73A49;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;xyz&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> numbers(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="_3-pipeline" tabindex="-1">3.pipeline <a class="header-anchor" href="#_3-pipeline" aria-label="Permalink to &quot;3.pipeline&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">EXPLAIN PIPELINE </span><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> numbers_mt(</span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">GROUP BY</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;"> % </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">--打开其他参数</span></span>
<span class="line"><span style="color:#E1E4E8;">EXPLAIN PIPELINE header</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,graph</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> numbers_mt(</span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">GROUP BY</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">number</span><span style="color:#E1E4E8;">%</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">EXPLAIN PIPELINE </span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">number</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> numbers_mt(</span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">GROUP BY</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">number</span><span style="color:#24292E;"> % </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">--打开其他参数</span></span>
<span class="line"><span style="color:#24292E;">EXPLAIN PIPELINE header</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,graph</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">number</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> numbers_mt(</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">GROUP BY</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">number</span><span style="color:#24292E;">%</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span></code></pre></div><h1 id="_2-建表优化" tabindex="-1">2. 建表优化 <a class="header-anchor" href="#_2-建表优化" aria-label="Permalink to &quot;2. 建表优化&quot;">​</a></h1><h2 id="_2-1-数据类型" tabindex="-1">2.1 数据类型 <a class="header-anchor" href="#_2-1-数据类型" aria-label="Permalink to &quot;2.1 数据类型&quot;">​</a></h2><h3 id="_1-时间类型字段" tabindex="-1">1.时间类型字段 <a class="header-anchor" href="#_1-时间类型字段" aria-label="Permalink to &quot;1.时间类型字段&quot;">​</a></h3><ul><li>ClickHouse 中建表时不建议使用string</li><li>ClickHouse 中建表时日期、时间字段最好设置成对应的 Date 、Datetime 类型，避免后续需要经过函数转换处理，执行效率高、可读性好</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">table</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">t_type2</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;"> id UInt32,</span></span>
<span class="line"><span style="color:#E1E4E8;"> sku_id String,</span></span>
<span class="line"><span style="color:#E1E4E8;"> total_amount </span><span style="color:#F97583;">Decimal</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) ,</span></span>
<span class="line"><span style="color:#E1E4E8;"> create_time </span><span style="color:#F97583;">Datetime</span></span>
<span class="line"><span style="color:#E1E4E8;">) engine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ReplacingMergeTree(create_time)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">partition</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">by</span><span style="color:#E1E4E8;"> toYYYYMMDD(create_time) </span><span style="color:#6A737D;">--不需要转换</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">primary key</span><span style="color:#E1E4E8;"> (id)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">order by</span><span style="color:#E1E4E8;"> (id, sku_id);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">create</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">table</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">t_type2</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;"> id UInt32,</span></span>
<span class="line"><span style="color:#24292E;"> sku_id String,</span></span>
<span class="line"><span style="color:#24292E;"> total_amount </span><span style="color:#D73A49;">Decimal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) ,</span></span>
<span class="line"><span style="color:#24292E;"> create_time </span><span style="color:#D73A49;">Datetime</span></span>
<span class="line"><span style="color:#24292E;">) engine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ReplacingMergeTree(create_time)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">partition</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">by</span><span style="color:#24292E;"> toYYYYMMDD(create_time) </span><span style="color:#6A737D;">--不需要转换</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">primary key</span><span style="color:#24292E;"> (id)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">order by</span><span style="color:#24292E;"> (id, sku_id);</span></span></code></pre></div><h3 id="_2-空值类型字段" tabindex="-1">2.空值类型字段 <a class="header-anchor" href="#_2-空值类型字段" aria-label="Permalink to &quot;2.空值类型字段&quot;">​</a></h3><ul><li><p>ClickHouse 中使用 Nullable 来设置字段可以有空值，但是会拖累性能</p></li><li><p>存储 Nullable 列时需要创建一个额外的文件来存储 NULL 的标记，增加消耗；Nullable 列无法被索引</p></li><li><p>生产上建议：使用字段默认值或者在业务中无意义的值来表示空值</p></li></ul><h2 id="_2-2-分区和索引" tabindex="-1">2.2 分区和索引 <a class="header-anchor" href="#_2-2-分区和索引" aria-label="Permalink to &quot;2.2 分区和索引&quot;">​</a></h2><ul><li><p>建表时要考虑设置分区，避免全表扫描，一般选择按天分区，如果不按天分区，则建议以单表一亿数据为例，分区大小控制在 10-30 个为最佳</p></li><li><p>建表时必须指定 order by 字段，即索引、排序列；在指定多个索引列时将查询频率大的字段放最前面，然后基数特别大的字段不适合做索引列，如用户表的 userid 字段，通常筛选后的数据满足在百万以内为最佳</p></li></ul><h2 id="_2-3-表参数" tabindex="-1">2.3 表参数 <a class="header-anchor" href="#_2-3-表参数" aria-label="Permalink to &quot;2.3 表参数&quot;">​</a></h2><ul><li>Index_granularity 是用来控制索引粒度的，默认是 8192，如非必须不建议调整</li><li>指定 TTL：对于不必须保存历史全量数据的表，建议指定对应的 TTL，可以免去手动过期历史数据的麻烦，TTL 也可以通过 alter table 语句随时修改</li></ul><h2 id="_2-4-写入和删除优化" tabindex="-1">2.4 写入和删除优化 <a class="header-anchor" href="#_2-4-写入和删除优化" aria-label="Permalink to &quot;2.4 写入和删除优化&quot;">​</a></h2><ul><li><p>尽量不要执行单条或小批量删除和插入操作，这样会产生小分区文件，给后台 Merge 任务带来巨大压力</p></li><li><p>不要一次写入太多分区，或数据写入太快，数据写入太快会导致 Merge 速度跟不上而报错，一般建议每秒钟发起 2-3 次写入操作，每次操作写入 2w~5w 条数据（依服务器性能而定）</p></li><li><p>写入过快报错(Too many parts 和 Memory limit)处理：</p><ul><li>“Too many parts 处理”：使用 WAL 预写日志，提高写入性能，in_memory_parts_enable_wal 默认为 true</li><li>在服务器内存充裕的情况下增加内存配额，一般通过 max_memory_usage 来实现</li><li>在服务器内存不充裕的情况下，建议将超出部分内容分配到系统硬盘上，但会降低执行速度，一般通过 max_bytes_before_external_group_by、max_bytes_before_external_sort 参数来实现</li></ul></li></ul><h1 id="_3-ck查询优化" tabindex="-1">3. ck查询优化 <a class="header-anchor" href="#_3-ck查询优化" aria-label="Permalink to &quot;3. ck查询优化&quot;">​</a></h1><p><a href="https://clickhouse.com/docs/zh/operations/settings/query-complexity" target="_blank" rel="noreferrer">官当</a></p><p>1.<strong>索引优化</strong>：clickhouse 的存储结构决定对于大数据量查询时，使用主键索引能够精确的找到所需的数据块，减少不必要的数据块扫描，这样更够极大的提高查询效率。将用户pin作为一级索引，将时间作为二级索。</p><p>2.<strong>填充有空值的字段</strong>：对于一些表字段，若存在空值，则可以考虑使用无业务场景意义的字符进行填充。</p><p>3.<strong>主键查询</strong>：减少查询字段：将select * 改为查询关键字段，select operate_time,id。</p><p>4.<strong>多线程</strong>：多条活动数据，多线程查询出活动和奖励的相关信息。</p><p>5.<strong>分区存储</strong>：将每7天数据放入一个分区中，查询时候根据不同时间查询不同分区的数据。</p><p>6.<strong>count优化</strong>：因为clickhouse对每个表的数据量，在底层文件中提供了预数据。所以能直接使用count()则避免使用count(col_name)。</p><p>7.<strong>聚合外推</strong>：如将sum(money * 2) 变成 sum(money) * 2。对数据库来说，后者的计算量明显少一点。</p><p>8.<strong>高级函数</strong>：ClickHouse中有很多很好用的函数。如：使用multiIf()替代多重case when，对于版本数据的获取使用argMax()函数，而非用子查询关联取最大值**。**</p><p><a href="https://blog.csdn.net/weixin_44480009/article/details/139922122" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_44480009/article/details/139922122</a></p>`,53),e=[o];function t(r,c,E,y,i,d){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
