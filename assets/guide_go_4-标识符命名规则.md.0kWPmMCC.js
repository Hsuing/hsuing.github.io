import{_ as s,o as a,c as e,R as n}from"./chunks/framework.zUbWieqp.js";const g=JSON.parse('{"title":"1.golang标识符、关键字、命名规则","description":"","frontmatter":{},"headers":[],"relativePath":"guide/go/4-标识符命名规则.md","filePath":"guide/go/4-标识符命名规则.md","lastUpdated":1756092571000}'),t={name:"guide/go/4-标识符命名规则.md"},l=n(`<h1 id="_1-golang标识符、关键字、命名规则" tabindex="-1">1.golang标识符、关键字、命名规则 <a class="header-anchor" href="#_1-golang标识符、关键字、命名规则" aria-label="Permalink to &quot;1.golang标识符、关键字、命名规则&quot;">​</a></h1><h2 id="_1-1标识符" tabindex="-1">1.1标识符 <a class="header-anchor" href="#_1-1标识符" aria-label="Permalink to &quot;1.1标识符&quot;">​</a></h2><p>标识符英文是identifier，通俗讲，就是给变量、常量、函数、方法、结构体、数组、切片、接口起名字。</p><p>只要定义了变量，必须使用，否则编译会出错</p><h3 id="_1-1-1标识符组成" tabindex="-1">1.1.1标识符组成 <a class="header-anchor" href="#_1-1-1标识符组成" aria-label="Permalink to &quot;1.1.1标识符组成&quot;">​</a></h3><ol><li>标识符由数字、字母和下划线(_)组成</li><li>只能以字母和下划线(_)开头，不能以<code>数字开头</code></li><li>关键字和保留字不能作为变量名</li><li>标识符区分大小写</li></ol><h2 id="_1-2关键字" tabindex="-1">1.2关键字 <a class="header-anchor" href="#_1-2关键字" aria-label="Permalink to &quot;1.2关键字&quot;">​</a></h2><p>go语音提供了25个关键字</p><table><thead><tr><th>break</th><th>default</th><th>func</th><th>interface</th><th>select</th></tr></thead><tbody><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><tr><td>const</td><td>fallthrough</td><td>if</td><td>range</td><td>type</td></tr><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr></tbody></table><p>除了以上介绍的关键字，Go语言还有36个预定义标识符，其中包含了基本类型的名称和一些基本的内置函数</p><table><thead><tr><th>append</th><th>bool</th><th>byte</th><th>cap</th><th>close</th><th>complex</th><th>complex64</th><th>compesx128</th><th>uint16</th></tr></thead><tbody><tr><td>copy</td><td>false</td><td>float32</td><td>float64</td><td>image</td><td>int</td><td>int8</td><td>int16</td><td>uint32</td></tr><tr><td>int32</td><td>int64</td><td>iota</td><td>len</td><td>make</td><td>new</td><td>nil</td><td>panic</td><td>uint64</td></tr><tr><td>print</td><td>println</td><td>real</td><td>recover</td><td>string</td><td>true</td><td>uint</td><td>uint8</td><td>uintptr</td></tr></tbody></table><h2 id="_1-3命名规范" tabindex="-1">1.3命名规范 <a class="header-anchor" href="#_1-3命名规范" aria-label="Permalink to &quot;1.3命名规范&quot;">​</a></h2><p>Go是一门<code>区分大小写</code>的语言</p><p>命名规则涉及变量、常量、全局函数、结构、接口、方法等的命名。Go语音从语法层面进行了以下<code>限定</code>:任何需要对外暴漏的名字必须以大写字母开头，不需要对外暴漏的则应该以小写字母开头。</p><p>当命名（包含常量、变量、类型、函数名、结构字段等）以一个大写字母开头，如：GetUserName，那么使用这种形式的标识符的对象<code>就可以被外部的代码所使用（客户端程序需要先导入这个包）</code>，这被称为导出（像面向对象语言中的public）；</p><p><code>命名如果是小写字母开头，则对外是不可见的，但是他们在整个包的内部是可见并且可用的</code>（像面向对象语言中的private）</p><h2 id="_1-4包名称" tabindex="-1">1.4包名称 <a class="header-anchor" href="#_1-4包名称" aria-label="Permalink to &quot;1.4包名称&quot;">​</a></h2><p>保持<code>package</code>的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，尽量和标准库不要冲突。包名应该为<code>小写</code>单词，不要使用下划线或者混合大小写。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">package service</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">package service</span></span></code></pre></div><h2 id="_1-5文件命名" tabindex="-1">1.5文件命名 <a class="header-anchor" href="#_1-5文件命名" aria-label="Permalink to &quot;1.5文件命名&quot;">​</a></h2><p>尽量采取有意义的文件名，简短、有意义，应该为小写单词，使用下划线分割各个单词</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">customer_dao.go</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">customer_dao.go</span></span></code></pre></div><h2 id="_1-6结构体命名" tabindex="-1">1.6结构体命名 <a class="header-anchor" href="#_1-6结构体命名" aria-label="Permalink to &quot;1.6结构体命名&quot;">​</a></h2><p>采用驼峰命名法，首字母根据访问控制大写或者小写</p><p><code>struct</code> 申明和初始化格式采用多行</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">type CustomerOrder struct {</span></span>
<span class="line"><span style="color:#e1e4e8;">	Name string</span></span>
<span class="line"><span style="color:#e1e4e8;">	Address string</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;">order := CustomerOrder{&quot;tom&quot;,&quot;beijing&quot;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">type CustomerOrder struct {</span></span>
<span class="line"><span style="color:#24292e;">	Name string</span></span>
<span class="line"><span style="color:#24292e;">	Address string</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;">order := CustomerOrder{&quot;tom&quot;,&quot;beijing&quot;}</span></span></code></pre></div><h2 id="_1-7接口命名" tabindex="-1">1.7接口命名 <a class="header-anchor" href="#_1-7接口命名" aria-label="Permalink to &quot;1.7接口命名&quot;">​</a></h2><p>命名规则基本上和上面的结构体类型</p><p>单个函数的结构名以&quot;er&quot; 作为后缀，例如 Reader, Writer</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">type Reader interface ｛</span></span>
<span class="line"><span style="color:#e1e4e8;">	Read(p []byte) (n int, err error)</span></span>
<span class="line"><span style="color:#e1e4e8;">｝</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">type Reader interface ｛</span></span>
<span class="line"><span style="color:#24292e;">	Read(p []byte) (n int, err error)</span></span>
<span class="line"><span style="color:#24292e;">｝</span></span></code></pre></div><h2 id="_1-8变量命名" tabindex="-1">1.8变量命名 <a class="header-anchor" href="#_1-8变量命名" aria-label="Permalink to &quot;1.8变量命名&quot;">​</a></h2><p>和结构体类似，变量名称一般遵循驼峰法，首字母根据访问控制原则大写或者小写，但遇到特有名词时，需要遵循以下规则：</p><p>如果变量为私有，切特有名词为首个单词，则使用小写，如appService若变量类型为bool类型，则名称应以Has，Is，Can或Allow 开头</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">var isExist bool</span></span>
<span class="line"><span style="color:#e1e4e8;">var hasConflict bool</span></span>
<span class="line"><span style="color:#e1e4e8;">var canMange bool</span></span>
<span class="line"><span style="color:#e1e4e8;">var allow GitHook bool</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">var isExist bool</span></span>
<span class="line"><span style="color:#24292e;">var hasConflict bool</span></span>
<span class="line"><span style="color:#24292e;">var canMange bool</span></span>
<span class="line"><span style="color:#24292e;">var allow GitHook bool</span></span></code></pre></div><h2 id="_1-9常量命名" tabindex="-1">1.9常量命名 <a class="header-anchor" href="#_1-9常量命名" aria-label="Permalink to &quot;1.9常量命名&quot;">​</a></h2><p>常量均需使用<code>全部大写字母</code>组成,并使用下划线分词</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const APP_URL = &quot;https://www.xx.com&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const APP_URL = &quot;https://www.xx.com&quot;</span></span></code></pre></div><p>如果是枚举类型的常量，需要先创建相应类型：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">type Scheme string</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">const(</span></span>
<span class="line"><span style="color:#e1e4e8;">	HTTP Scheme = &quot;http&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">	HTTPS Scheme = &quot;https&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">type Scheme string</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">const(</span></span>
<span class="line"><span style="color:#24292e;">	HTTP Scheme = &quot;http&quot;</span></span>
<span class="line"><span style="color:#24292e;">	HTTPS Scheme = &quot;https&quot;</span></span>
<span class="line"><span style="color:#24292e;">)</span></span></code></pre></div><h2 id="_2-0错误处理" tabindex="-1">2.0错误处理 <a class="header-anchor" href="#_2-0错误处理" aria-label="Permalink to &quot;2.0错误处理&quot;">​</a></h2><p>错误处理的原则就是不能丢弃任何有返回err 的调用，不要使用_ 丢弃，必须全部处理。接收到错误，要么返回err，或者使用log记录下来尽早return：一旦有错误发生，马上返回，尽量不要使用panic，除非你知道你在做什么，错误描述如果是英文必须为小写，不需要标点结尾，采用独立的错误流进行处理</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//错误写法</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//错误处理</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> ｛</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//正常代码</span></span>
<span class="line"><span style="color:#E1E4E8;">｝</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//正确写法</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//错误处理</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//或者继续</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//错误写法</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//错误处理</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> ｛</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//正常代码</span></span>
<span class="line"><span style="color:#24292E;">｝</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//正确写法</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//错误处理</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//或者继续</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_2-1单元测试" tabindex="-1">2.1单元测试 <a class="header-anchor" href="#_2-1单元测试" aria-label="Permalink to &quot;2.1单元测试&quot;">​</a></h2><p>单元测试文件命名规范为<code>example_test.go</code>测试用例的函数名称必须以<code>Test</code>开头，例如：<code>TestExample</code>每个重要的函数都要首先编写测试用例，测试用例和正规代码一起提交方便进行回归测试</p>`,44),p=[l];function o(c,r,i,d,h,y){return a(),e("div",null,p)}const b=s(t,[["render",o]]);export{g as __pageData,b as default};
