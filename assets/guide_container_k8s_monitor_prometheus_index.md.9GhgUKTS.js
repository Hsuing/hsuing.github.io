import{_ as e,o as t,c as a,R as r}from"./chunks/framework.zUbWieqp.js";const _=JSON.parse('{"title":"1. Prometheus","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/k8s/monitor/prometheus/index.md","filePath":"guide/container/k8s/monitor/prometheus/index.md","lastUpdated":1720533756000}'),o={name:"guide/container/k8s/monitor/prometheus/index.md"},s=r('<h1 id="_1-prometheus" tabindex="-1">1. Prometheus <a class="header-anchor" href="#_1-prometheus" aria-label="Permalink to &quot;1. Prometheus&quot;">​</a></h1><p>官网地址：<a href="https://prometheus.io/docs/prometheus/latest/getting_started" target="_blank" rel="noreferrer">https://prometheus.io/docs/prometheus/latest/getting_started</a></p><h2 id="_1-1-介绍" tabindex="-1">1.1 介绍 <a class="header-anchor" href="#_1-1-介绍" aria-label="Permalink to &quot;1.1 介绍&quot;">​</a></h2><ul><li>灵活的时间序列数据库；</li><li>定制各式各样的监控规则；</li><li>Prometheus的开发人员和用户社区非常活跃；</li><li>独立的开源项目，不依赖于任何公司；</li><li>继Kurberntes之后第二个入驻的项目；</li></ul><h2 id="_1-2-prometheus架构" tabindex="-1">1.2 prometheus架构 <a class="header-anchor" href="#_1-2-prometheus架构" aria-label="Permalink to &quot;1.2 prometheus架构&quot;">​</a></h2><p>来自于官方</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202406261350416.png" alt="img"></p><p>Prometheus的工作原理主要分为五个步骤：</p><p>1.数据采集（Exporters）：Prometheus 定期通过HTTP请求从目标资源中拉取数据。目标资源可以是应用程序、系统、服务或其他资源。</p><p>2.数据存储（Storage）：Prometeus 将采集到的数据存储在本地存储引擎中。存储1667引擎以时间序列方式存储数据，其中每个时间序列都由指标名称和一组键值对组成。</p><p>3.数据聚合（PromQL)v：Prometheus通过查询表达式聚合数据。PromQL是Prometheus的查询语言，它允许用户通过查询表达式从存储引擎中检索指标的特定信息。</p><p>4.告警处理（Alertmanager）：Prometheus可以根据用户指定的规则对数据进行警报。当指标的值超出特定阈值时，Prometheus 向 Alertmanager 发送警报。Alertmanager可以帮助用户对警报进行分组、消除和路由，并将警报发送到相应的接收器，例如邮件、企微、钉钉等。</p><p>5.数据大盘（Grafana）：帮助用户通过可视化方式展示Prometheus的数据，包括仪表盘、图表、日志和警报等。</p><h2 id="_1-3-prometheus时间序列数据" tabindex="-1">1.3 prometheus时间序列数据 <a class="header-anchor" href="#_1-3-prometheus时间序列数据" aria-label="Permalink to &quot;1.3 prometheus时间序列数据&quot;">​</a></h2><h3 id="_1-3-1-什么是序列数据" tabindex="-1">1.3.1 什么是序列数据 <a class="header-anchor" href="#_1-3-1-什么是序列数据" aria-label="Permalink to &quot;1.3.1 什么是序列数据&quot;">​</a></h3><p>时间序列数据（TimeSeries Data）：按照时间顺序记录系统、设备状态变化的数据被称为时序数据。</p><h3 id="_1-3-2-时间序列数据特点" tabindex="-1">1.3.2 时间序列数据特点 <a class="header-anchor" href="#_1-3-2-时间序列数据特点" aria-label="Permalink to &quot;1.3.2 时间序列数据特点&quot;">​</a></h3><p>性能好：关系型数据库对于大规模数据的处理性能糟糕。NOSQL 可以比较好的处理大规模数据，依然比不上时间序列数据库.</p><p>存储成本低：高效的压缩算法，节省存储空间，有效降低 IO</p><div class="warning custom-block"><p class="custom-block-title">💡 说明</p><p>官方数据：Prometheus 有着非常高效的时间序列数据存储方法，每个采样数据仅仅占 用 3.5byte 左右空间，上百万条时间序列，30 秒间隔，保留 60 天，大概200多G.</p><p>后面可以根据官方这些数据,配置自己的存储设置</p></div>',20),i=[s];function h(n,p,l,m,u,c){return t(),a("div",null,i)}const P=e(o,[["render",h]]);export{_ as __pageData,P as default};
