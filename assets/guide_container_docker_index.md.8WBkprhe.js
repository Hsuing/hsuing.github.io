import{_ as s,o as a,c as n,R as o}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"容器概念","description":"","frontmatter":{},"headers":[],"relativePath":"guide/container/docker/index.md","filePath":"guide/container/docker/index.md","lastUpdated":1755002925000}'),l={name:"guide/container/docker/index.md"},p=o(`<h1 id="容器概念" tabindex="-1">容器概念 <a class="header-anchor" href="#容器概念" aria-label="Permalink to &quot;容器概念&quot;">​</a></h1><p>这并不是一个全新的概念。它始于</p><ul><li>1982年－Unix chroot</li><li>2000年－FreeBSD jails</li><li>2004年－Solaris Zones</li></ul><h1 id="_1-docker介绍" tabindex="-1">1. Docker介绍 <a class="header-anchor" href="#_1-docker介绍" aria-label="Permalink to &quot;1. Docker介绍&quot;">​</a></h1><p>Docker 公司位于旧金山，由法裔美籍开发者和企业家 Solumon Hykes 创立，其标志如下图所示。</p><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202407231010944.png" alt="image-20240723101018173"></p><blockquote><p>“Docker”一词来自英国口语，意为码头工人（Dock Worker），即从船上装卸货物的人</p></blockquote><p>Docker 公司起初是一家名为 dotCloud 的平台即服务（Platform-as-a-Service, PaaS）提供商。</p><p>底层技术上，dotCloud 平台利用了 Linux 容器技术。为了方便创建和管理这些容器，dotCloud 开发了一套内部工具，之后被命名为“Docker”。Docker就是这样诞生的！</p><p>2013年，dotCloud 的 PaaS 业务并不景气，公司需要寻求新的突破。于是他们聘请了 Ben Golub 作为新的 CEO，将公司重命名为“Docker”，放弃dotCloud PaaS 平台</p><h2 id="_1-1-docker-engine" tabindex="-1">1.1 Docker Engine <a class="header-anchor" href="#_1-1-docker-engine" aria-label="Permalink to &quot;1.1 Docker Engine&quot;">​</a></h2><p>Docker Engine是一个C/S架构的应用程序，主要包含下面几个组件；</p><ul><li>常驻后台进程Dockerd</li><li>一个用来和Dockerd交互的REST API Server</li><li>命令行CLI接口，通过和REST API进行交互</li></ul><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202407231028046.png" alt="深入解析Docker 架构原理"></p><h2 id="_1-2-docker架构组成" tabindex="-1">1.2 Docker架构组成 <a class="header-anchor" href="#_1-2-docker架构组成" aria-label="Permalink to &quot;1.2 Docker架构组成&quot;">​</a></h2><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/202407231023014.png" alt="来自官方"></p><table><thead><tr><th>Docker 镜像(Images)</th><th>Docker 镜像是用于创建 Docker 容器的模板。</th></tr></thead><tbody><tr><td>Docker 容器(Container)</td><td>容器是独立运行的一个或一组应用。</td></tr><tr><td>Docker 客户端(Client)</td><td>Docker 客户端通过命令行或者其他工具使用 Docker API (<a href="https://docs.docker.com/reference/api/docker_remote_api?spm=a2cwt.28120018.313684.2.42861ee9T9bCzr" target="_blank" rel="noreferrer">https://docs.docker.com/reference/api/docker_remote_api</a>) 与 Docker 的守护进程通信。</td></tr><tr><td>Docker 主机(Host)</td><td>一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</td></tr><tr><td>Docker 仓库(Registry)</td><td>Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(<a href="https://hub.docker.com/" target="_blank" rel="noreferrer">https://hub.docker.com</a>) 提供了庞大的镜像集合供使用。</td></tr><tr><td>Docker Machine</td><td>Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</td></tr></tbody></table><h1 id="_2-docker核心原理" tabindex="-1">2. Docker核心原理 <a class="header-anchor" href="#_2-docker核心原理" aria-label="Permalink to &quot;2. Docker核心原理&quot;">​</a></h1><h2 id="_2-1-namespace简介" tabindex="-1">2.1 Namespace简介 <a class="header-anchor" href="#_2-1-namespace简介" aria-label="Permalink to &quot;2.1 Namespace简介&quot;">​</a></h2><p>Namespace是内核的一个功能，用来给进程隔离一系列系统资源（视图隔离）。</p><h2 id="_2-2-cgroup简介" tabindex="-1">2.2 cgroup简介 <a class="header-anchor" href="#_2-2-cgroup简介" aria-label="Permalink to &quot;2.2 cgroup简介&quot;">​</a></h2><p>Linux Cgroup提供了对一组进程及将来子进程的资源限制的能力。资源包括：CPU、内存、存储、网络等。通过Cgroup可以限制某个进程的资源占用，并监控进程的统计信息。</p><h1 id="_3-docker-容器与传统-vm-方式的区别" tabindex="-1">3. Docker 容器与传统 VM 方式的区别 <a class="header-anchor" href="#_3-docker-容器与传统-vm-方式的区别" aria-label="Permalink to &quot;3. Docker 容器与传统 VM 方式的区别&quot;">​</a></h1><p><img src="https://nnaigos.oss-cn-hangzhou.aliyuncs.com/imgs/20250812203438700.png" alt="image-20250812203223860"></p><table><thead><tr><th>对比项</th><th>Docker 容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>隔离性</td><td>较弱的隔离</td><td>强隔离</td></tr><tr><td>启动速度</td><td>秒级</td><td>分钟级</td></tr><tr><td>镜像大小</td><td>一般为 <code>MB</code></td><td>一般为 <code>GB</code></td></tr><tr><td>运行性能（与直接部署在机器上比较）</td><td>接近原生（损耗小于 2%）</td><td>损耗小于 15%</td></tr><tr><td>镜像可移植性</td><td>平台无关</td><td>平台相关</td></tr><tr><td>系统支持量</td><td>单机上支持上千个容器</td><td>一般几十个</td></tr><tr><td>安全性</td><td>1. 容器内的用户从普通用户权限提升为 <code>root</code> 权限，就直接具备了宿主机的 <code>root</code> 权限。 2. 容器中没有硬件隔离，使得容器容易受到攻击。</td><td>1. 虚拟机租户 <code>root</code> 权限和主机的 <code>root</code> 虚拟机权限是分离的。 2. 硬件隔离技术：防止虚拟机突破和宿主机交互。</td></tr></tbody></table><h1 id="日志清理" tabindex="-1">日志清理 <a class="header-anchor" href="#日志清理" aria-label="Permalink to &quot;日志清理&quot;">​</a></h1><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;input log file  size &#39;</span><span style="color:#FFAB70;">$1</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">default</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#F97583;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">$1</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> ]  </span></span>
<span class="line"><span style="color:#F97583;">then</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  default</span><span style="color:#F97583;">=</span><span style="color:#FFAB70;">$1</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">max</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">expr</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">\\*</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">$default</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;current set file size &#39;</span><span style="color:#E1E4E8;">$max  </span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> file </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\` </span><span style="color:#B392F0;">ls</span><span style="color:#9ECBFF;"> /data/docker_data/containers/</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">-json.log \`</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#F97583;">do</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">#echo $file</span></span>
<span class="line"><span style="color:#E1E4E8;">  s</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">du</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-k</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">$file</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">awk</span><span style="color:#9ECBFF;"> &#39;{print $1}&#39;\`</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># echo $s</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ $s </span><span style="color:#F97583;">-gt</span><span style="color:#E1E4E8;"> $max ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;remove&#39;</span><span style="color:#E1E4E8;">$file</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">truncate</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> $file</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;removed&#39;</span><span style="color:#E1E4E8;">$file</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">fi</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;input log file  size &#39;</span><span style="color:#E36209;">$1</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">default</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ </span><span style="color:#D73A49;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">$1</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> ]  </span></span>
<span class="line"><span style="color:#D73A49;">then</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  default</span><span style="color:#D73A49;">=</span><span style="color:#E36209;">$1</span></span>
<span class="line"><span style="color:#D73A49;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">max</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">expr</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">1024</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">\\*</span><span style="color:#032F62;"> </span><span style="color:#24292E;">$default</span><span style="color:#032F62;">\`</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;current set file size &#39;</span><span style="color:#24292E;">$max  </span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> file </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\` </span><span style="color:#6F42C1;">ls</span><span style="color:#032F62;"> /data/docker_data/containers/</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">-json.log \`</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#D73A49;">do</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">#echo $file</span></span>
<span class="line"><span style="color:#24292E;">  s</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">du</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-k</span><span style="color:#032F62;"> </span><span style="color:#24292E;">$file</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">awk</span><span style="color:#032F62;"> &#39;{print $1}&#39;\`</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># echo $s</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ $s </span><span style="color:#D73A49;">-gt</span><span style="color:#24292E;"> $max ]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;remove&#39;</span><span style="color:#24292E;">$file</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">truncate</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> $file</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;removed&#39;</span><span style="color:#24292E;">$file</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">fi</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div>`,27),e=[p];function t(c,r,i,y,d,E){return a(),n("div",null,e)}const k=s(l,[["render",t]]);export{h as __pageData,k as default};
