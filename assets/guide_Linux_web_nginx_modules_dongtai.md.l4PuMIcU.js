import{_ as s,o as e,c as a,R as n}from"./chunks/framework.zUbWieqp.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Linux/web/nginx/modules/dongtai.md","filePath":"guide/Linux/web/nginx/modules/dongtai.md","lastUpdated":1701684699000}'),o={name:"guide/Linux/web/nginx/modules/dongtai.md"},l=n(`<blockquote><p>nginx自1.9.11以后版本后支持动态模块</p></blockquote><p>1，编译动态模块 先进入解压后的nginx安装包目录，配置configure，然后用make modules</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">cd nginx-1.14.2</span></span>
<span class="line"><span style="color:#e1e4e8;">./configure --with-compat --add-dynamic-module=/usr/src/ngx_brotli</span></span>
<span class="line"><span style="color:#e1e4e8;">make modules</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">cd nginx-1.14.2</span></span>
<span class="line"><span style="color:#24292e;">./configure --with-compat --add-dynamic-module=/usr/src/ngx_brotli</span></span>
<span class="line"><span style="color:#24292e;">make modules</span></span></code></pre></div><p>2，等运行完成后，查看编译好的模块</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ls objs/*.so</span></span>
<span class="line"><span style="color:#e1e4e8;">输出：</span></span>
<span class="line"><span style="color:#e1e4e8;">objs/ngx_http_brotli_filter_module.so  objs/ngx_http_brotli_static_module.so</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ls objs/*.so</span></span>
<span class="line"><span style="color:#24292e;">输出：</span></span>
<span class="line"><span style="color:#24292e;">objs/ngx_http_brotli_filter_module.so  objs/ngx_http_brotli_static_module.so</span></span></code></pre></div><p>3，将编译好的模块文件复制到nginx动态模块加载目录</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">cp objs/{ngx_http_brotli_filter_module.so,ngx_http_brotli_static_module.so} /data/apps/nginx/modules</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">cp objs/{ngx_http_brotli_filter_module.so,ngx_http_brotli_static_module.so} /data/apps/nginx/modules</span></span></code></pre></div><p>4,注册Brotli模块 为了方便管理nginx动态模块，建议新建一个modules.conf文件，单独管理动态模块,(记得include)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">打开/data/apps/nginx/modules.conf，注册刚才编译好的 Brotli 模块</span></span>
<span class="line"><span style="color:#e1e4e8;">cat /data/apps/nginx/modules.conf</span></span>
<span class="line"><span style="color:#e1e4e8;"># Brotli模块</span></span>
<span class="line"><span style="color:#e1e4e8;">load_module modules/ngx_http_brotli_filter_module.so;</span></span>
<span class="line"><span style="color:#e1e4e8;">load_module modules/ngx_http_brotli_static_module.so;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">打开/data/apps/nginx/modules.conf，注册刚才编译好的 Brotli 模块</span></span>
<span class="line"><span style="color:#24292e;">cat /data/apps/nginx/modules.conf</span></span>
<span class="line"><span style="color:#24292e;"># Brotli模块</span></span>
<span class="line"><span style="color:#24292e;">load_module modules/ngx_http_brotli_filter_module.so;</span></span>
<span class="line"><span style="color:#24292e;">load_module modules/ngx_http_brotli_static_module.so;</span></span></code></pre></div><blockquote><p>注意</p></blockquote><p>启用Brotli压缩 Brotli和gzip是可以并存的，无需关闭gzip</p><p>Brotli 压缩只能在https中生效，因为 在 http 请求中 request header 里的 Accept-Encoding: gzip, deflate 是没有 br 的</p><p>在反向代理配置文件代码中添加</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">proxy_set_header Accept-Encoding &quot;&quot;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">proxy_set_header Accept-Encoding &quot;&quot;;</span></span></code></pre></div>`,14),p=[l];function t(i,c,d,r,u,_){return e(),a("div",null,p)}const m=s(o,[["render",t]]);export{h as __pageData,m as default};
