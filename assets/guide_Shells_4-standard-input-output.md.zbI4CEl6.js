import{_ as o,o as e,c as t,R as d}from"./chunks/framework.zUbWieqp.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Shells/4-standard-input-output.md","filePath":"guide/Shells/4-standard-input-output.md","lastUpdated":1755179008000}'),c={name:"guide/Shells/4-standard-input-output.md"},s=d('<p>在 Linux/Unix 系统中，<code>2&gt;&amp;1</code> 是一种<strong>文件描述符重定向</strong>的语法，用于将标准错误（<code>stderr</code>）合并到标准输出（<code>stdout</code>）。它的核心逻辑涉及文件描述符（File Descriptor）和 Shell 的重定向规则。</p><p><strong>1）文件描述符</strong></p><p>Shell 中每个输入/输出流对应一个数字标识：</p><ul><li><code>0</code>：标准输入（stdin）</li><li><code>1</code>：标准输出（stdout，默认重定向目标，可不写）</li><li><code>2</code>：标准错误（stderr）</li></ul><p>例如：</p><ul><li>标准输入：<code>echo &quot;hello&quot; | grep &quot;he&quot; /dev/stdin</code>可用于传递管道数据等</li><li>标准输出：<code>&gt; file</code> 等价于 <code>1&gt; file</code>（重定向 stdout 到文件）</li><li>标准错误：<code>2&gt; file</code> 重定向 stderr 到文件</li></ul><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><p><strong>运维场景</strong>：Linux 中几乎所有的脚本日志记录都会用到此语法，确保错误信息不丢失！</p><p><strong>问题</strong>：默认情况下，<code>&gt;</code> 仅重定向 <code>stdout</code>，错误信息（<code>stderr</code>）仍会输出到终端，可能遗漏关键报错。</p><p><strong>解决</strong>：通过 <code>2&gt;&amp;1</code> 将错误和正常输出统一记录到文件，便于排查。</p><p><code>2&gt;&amp;1</code> <strong>的语法解析</strong></p><ul><li><code>2&gt;</code>：表示重定向 <code>stderr</code>。</li><li><code>&amp;1</code>：指向 <code>stdout</code> 的<strong>当前目标</strong>（不是字面数字 1，而是 stdout 的引用）。</li><li><strong>组合含义</strong>：将 <code>stderr</code> 合并到 <code>stdout</code> 的流向中。</li></ul><p><strong>理解 2&gt;&amp;1</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">command &gt; file.log 2&gt;&amp;1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">command &gt; file.log 2&gt;&amp;1</span></span></code></pre></div><ol><li>先设置 <code>stdout</code> 重定向到 <code>file.log</code>（<code>&gt; file.log</code>）。</li><li>再将 <code>stderr</code> 指向 <code>stdout</code> 的当前目标（即 <code>file.log</code>）。</li></ol><p>⚠️ <strong>顺序很重要</strong>：</p><ul><li>若写成 <code>2&gt;&amp;1 &gt; file.log</code>，<code>stderr</code> 会先指向 <code>stdout</code> 的默认目标（终端），之后 <code>stdout</code> 才重定向到文件，此时错误仍打印到终端！</li></ul><h3 id="正常理解" tabindex="-1"><strong>正常理解</strong> <a class="header-anchor" href="#正常理解" aria-label="Permalink to &quot;**正常理解**&quot;">​</a></h3><ol><li>&amp; <strong>的作用</strong>：表示引用文件描述符（如 <code>&amp;1</code> 是 <code>stdout</code> 描述符的引用），而非直接重定向到文件名。</li><li>与 <code>2&gt;1</code> 的区别：</li></ol><ul><li><code>2&gt;1</code>：将 <code>stderr</code> 重定向到名为 <code>1</code> 的文件。</li><li><code>2&gt;&amp;1</code>：将 <code>stderr</code> 重定向到 <code>stdout</code> 的当前目标。</li></ul><p>总结：<code>2&gt;&amp;1</code> <strong>的本质</strong>：将标准错误（<code>stderr</code>）的流向绑定到标准输出（<code>stdout</code>）的当前目标。</p>',21),l=[s];function r(a,i,n,p,g,u){return e(),t("div",null,l)}const _=o(c,[["render",r]]);export{m as __pageData,_ as default};
